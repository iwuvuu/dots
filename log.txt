[34mDEBUG[0m Syncing eggs to Local
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"rofi" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/rofi/jerry.rasi
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/rofi/jerry.rasi
[34mDEBUG[0m Syncing file eggs/rofi/launcher.rasi
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/rofi/launcher.rasi
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"eww" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/eww/OLD/myapplauncher/myapplauncher.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/myapplauncher/myapplauncher.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/mybar/mybar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/mybar/mybar.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/mydashboard/calendar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/mydashboard/calendar.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/powermenu/powermenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/powermenu/powermenu.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/themes/rose/bar/mybar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/themes/rose/bar/mybar.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/themes/rose/calendar/calendar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/themes/rose/calendar/calendar.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/themes/rose/powermenu/powermenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/themes/rose/powermenu/powermenu.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/themes/rose/settings/settings.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/themes/rose/settings/settings.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/vars/colors.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/vars/colors.scss
[34mDEBUG[0m Syncing file eggs/eww/OLD/vars/rose_pine.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/OLD/vars/rose_pine.scss
[34mDEBUG[0m Syncing file eggs/eww/eww.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/eww.scss
[34mDEBUG[0m Syncing file eggs/eww/themes/catppuccinLatte.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/themes/catppuccinLatte.scss
[34mDEBUG[0m Syncing file eggs/eww/themes/everforest-light.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/themes/everforest-light.scss
[34mDEBUG[0m Syncing file eggs/eww/themes/gruvbox-dark.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/themes/gruvbox-dark.scss
[34mDEBUG[0m Syncing file eggs/eww/themes/material-lighter.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/themes/material-lighter.scss
[34mDEBUG[0m Syncing file eggs/eww/types/groove/index.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/groove/index.scss
[34mDEBUG[0m Syncing file eggs/eww/types/groove/topbar/topBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/groove/topbar/topBar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/snazzy/index.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/snazzy/index.scss
[34mDEBUG[0m Syncing file eggs/eww/types/snazzy/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/snazzy/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Syncing file eggs/eww/types/snazzy/widgets/settings/settings.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/snazzy/widgets/settings/settings.scss
[34mDEBUG[0m Syncing file eggs/eww/types/snazzy/widgets/topbar/parts/calendar/calendar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/snazzy/widgets/topbar/parts/calendar/calendar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/snazzy/widgets/topbar/topBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/snazzy/widgets/topbar/topBar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/index.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/index.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/barPoint/barPoint.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/barPoint/barPoint.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/osd/osdVolume.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/osd/osdVolume.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/settings/settings.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/settings/settings.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload/widgets/topbar/topBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload/widgets/topbar/topBar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/index.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/index.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/barPoint/barPoint.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/barPoint/barPoint.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/osd/osdVolume.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/osd/osdVolume.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/settings/settings.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/settings/settings.scss
[34mDEBUG[0m Syncing file eggs/eww/types/workload.~1~/widgets/topbar/topBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/types/workload.~1~/widgets/topbar/topBar.scss
[34mDEBUG[0m Syncing file eggs/eww/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/widgets/leftBar/leftBar.scss
[34mDEBUG[0m Syncing file eggs/eww/widgets/osd/osdVolume.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/widgets/osd/osdVolume.scss
[34mDEBUG[0m Syncing file eggs/eww/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/widgets/powerMenu/powerMenu.scss
[34mDEBUG[0m Syncing file eggs/eww/widgets/settings/settings.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/widgets/settings/settings.scss
[34mDEBUG[0m Syncing file eggs/eww/widgets/topbar/topBar.scss
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/eww/widgets/topbar/topBar.scss
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"bin" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/bin/rofi_wallpaper.sh
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/bin/rofi_wallpaper.sh
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"kitty" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/kitty/kitty.conf
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/kitty/kitty.conf
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"ags" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/ags/@girs/accountsservice-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/accountsservice-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/adw-1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/adw-1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/appmenuglibtranslator-25.04.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/appmenuglibtranslator-25.04.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/appstream-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/appstream-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/appstreamcompose-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/appstreamcompose-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astal-3.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astal-3.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astal-4.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astal-4.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalapps-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalapps-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalauth-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalauth-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalbattery-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalbattery-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalbluetooth-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalbluetooth-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalcava-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalcava-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalgreet-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalgreet-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalhyprland-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalhyprland-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalio-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalio-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalmpris-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalmpris-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalnetwork-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalnetwork-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalnotifd-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalnotifd-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalpowerprofiles-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalpowerprofiles-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalriver-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalriver-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astaltray-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astaltray-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/astalwp-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/astalwp-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/atk-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/atk-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/atspi-2.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/atspi-2.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/avahi-0.6.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/avahi-0.6.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/avahicore-0.6.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/avahicore-0.6.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/ayatanaappindicator3-0.1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/ayatanaappindicator3-0.1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/ayatanaido3-0.4.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/ayatanaido3-0.4.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/blockdev-3.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/blockdev-3.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cairo-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cairo-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cairo.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cairo.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cdesktopenums-3.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cdesktopenums-3.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cinnamondesktop-3.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cinnamondesktop-3.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cloudproviders-0.3.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cloudproviders-0.3.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/colord-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/colord-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/colorhug-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/colorhug-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/console.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/console.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cudagst-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cudagst-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/cvc-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/cvc-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/dbus-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/dbus-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/dbusglib-1.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/dbusglib-1.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/dbusmenu-0.4.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/dbusmenu-0.4.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/dbusmenugtk3-0.4.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/dbusmenugtk3-0.4.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/dom.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/dom.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/fontconfig-2.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/fontconfig-2.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/freetype2-2.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/freetype2-2.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gck-1.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gck-1.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gck-2.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gck-2.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gcr-3.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gcr-3.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gcr-4.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gcr-4.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gcrui-3.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gcrui-3.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gdesktopenums-3.0.d.ts
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/ags/@girs/gdesktopenums-3.0.d.ts
[34mDEBUG[0m Syncing file eggs/ags/@girs/gdk-3.0.d.ts
[34mDEBUG[0m Checking egg deployment [3megg.name[0m[2m=[0m"nvim" [3megg.deployed[0m[2m=[0mtrue [3megg.enabled[0m[2m=[0mtrue
[34mDEBUG[0m Syncing file eggs/nvim/init.lua
[34mDEBUG[0m Rendering template
[34mDEBUG[0m No changes needed in eggs/nvim/init.lua
  × Failed to sync some eggs

Error: 
  × Failed to sync egg `ags`
  ├─▶ Failed to eval template file: eggs/ags/@girs/gdk-3.0.d.ts
  ├─▶ Failed to parse document `/home/iwuvu/.config/yolk/eggs/ags/@girs/gdk-3.0.d.ts`
  ╰─▶ Failed to parse yolk template file

Error: 
  × Failed to parse tag
       ╭─[file:1:1]
     1 │ ╭─▶ /// <reference path="./cairo-1.0.d.ts" />
     2 │ │   /// <reference path="./cairo.d.ts" />
     3 │ │   /// <reference path="./gobject-2.0.d.ts" />
     4 │ │   /// <reference path="./glib-2.0.d.ts" />
     5 │ │   /// <reference path="./pango-1.0.d.ts" />
     6 │ │   /// <reference path="./harfbuzz-0.0.d.ts" />
     7 │ │   /// <reference path="./freetype2-2.0.d.ts" />
     8 │ │   /// <reference path="./gio-2.0.d.ts" />
     9 │ │   /// <reference path="./gmodule-2.0.d.ts" />
    10 │ │   /// <reference path="./gdkpixbuf-2.0.d.ts" />
    11 │ │   
    12 │ │   /**
    13 │ │    * Type Definitions for Gjs (https://gjs.guide/)
    14 │ │    *
    15 │ │    * These type definitions are automatically generated, do not edit them by hand.
    16 │ │    * If you found a bug fix it in `ts-for-gir` or create a bug report on https://github.com/gjsify/ts-for-gir
    17 │ │    *
    18 │ │    * The based EJS template file is used for the generated .d.ts file of each GIR module like Gtk-4.0, GObject-2.0, ...
    19 │ │    */
    20 │ │   
    21 │ │   declare module 'gi://Gdk?version=3.0' {
    22 │ │       // Module dependencies
    23 │ │       import type cairo from 'cairo';
    24 │ │       import type GObject from 'gi://GObject?version=2.0';
    25 │ │       import type GLib from 'gi://GLib?version=2.0';
    26 │ │       import type Pango from 'gi://Pango?version=1.0';
    27 │ │       import type HarfBuzz from 'gi://HarfBuzz?version=0.0';
    28 │ │       import type freetype2 from 'gi://freetype2?version=2.0';
    29 │ │       import type Gio from 'gi://Gio?version=2.0';
    30 │ │       import type GModule from 'gi://GModule?version=2.0';
    31 │ │       import type GdkPixbuf from 'gi://GdkPixbuf?version=2.0';
    32 │ │   
    33 │ │       export namespace Gdk {
    34 │ │           /**
    35 │ │            * Gdk-3.0
    36 │ │            */
    37 │ │   
    38 │ │           /**
    39 │ │            * An enumeration describing the way in which a device
    40 │ │            * axis (valuator) maps onto the predefined valuator
    41 │ │            * types that GTK+ understands.
    42 │ │            *
    43 │ │            * Note that the X and Y axes are not really needed; pointer devices
    44 │ │            * report their location via the x/y members of events regardless. Whether
    45 │ │            * X and Y are present as axes depends on the GDK backend.
    46 │ │            */
    47 │ │   
    48 │ │           /**
    49 │ │            * An enumeration describing the way in which a device
    50 │ │            * axis (valuator) maps onto the predefined valuator
    51 │ │            * types that GTK+ understands.
    52 │ │            *
    53 │ │            * Note that the X and Y axes are not really needed; pointer devices
    54 │ │            * report their location via the x/y members of events regardless. Whether
    55 │ │            * X and Y are present as axes depends on the GDK backend.
    56 │ │            */
    57 │ │           export namespace AxisUse {
    58 │ │               export const $gtype: GObject.GType<AxisUse>;
    59 │ │           }
    60 │ │   
    61 │ │           enum AxisUse {
    62 │ │               /**
    63 │ │                * the axis is ignored.
    64 │ │                */
    65 │ │               IGNORE,
    66 │ │               /**
    67 │ │                * the axis is used as the x axis.
    68 │ │                */
    69 │ │               X,
    70 │ │               /**
    71 │ │                * the axis is used as the y axis.
    72 │ │                */
    73 │ │               Y,
    74 │ │               /**
    75 │ │                * the axis is used for pressure information.
    76 │ │                */
    77 │ │               PRESSURE,
    78 │ │               /**
    79 │ │                * the axis is used for x tilt information.
    80 │ │                */
    81 │ │               XTILT,
    82 │ │               /**
    83 │ │                * the axis is used for y tilt information.
    84 │ │                */
    85 │ │               YTILT,
    86 │ │               /**
    87 │ │                * the axis is used for wheel information.
    88 │ │                */
    89 │ │               WHEEL,
    90 │ │               /**
    91 │ │                * the axis is used for pen/tablet distance information. (Since: 3.22)
    92 │ │                */
    93 │ │               DISTANCE,
    94 │ │               /**
    95 │ │                * the axis is used for pen rotation information. (Since: 3.22)
    96 │ │                */
    97 │ │               ROTATION,
    98 │ │               /**
    99 │ │                * the axis is used for pen slider information. (Since: 3.22)
   100 │ │                */
   101 │ │               SLIDER,
   102 │ │               /**
   103 │ │                * a constant equal to the numerically highest axis value.
   104 │ │                */
   105 │ │               LAST,
   106 │ │           }
   107 │ │           /**
   108 │ │            * A set of values describing the possible byte-orders
   109 │ │            * for storing pixel values in memory.
   110 │ │            */
   111 │ │   
   112 │ │           /**
   113 │ │            * A set of values describing the possible byte-orders
   114 │ │            * for storing pixel values in memory.
   115 │ │            */
   116 │ │           export namespace ByteOrder {
   117 │ │               export const $gtype: GObject.GType<ByteOrder>;
   118 │ │           }
   119 │ │   
   120 │ │           enum ByteOrder {
   121 │ │               /**
   122 │ │                * The values are stored with the least-significant byte
   123 │ │                *   first. For instance, the 32-bit value 0xffeecc would be stored
   124 │ │                *   in memory as 0xcc, 0xee, 0xff, 0x00.
   125 │ │                */
   126 │ │               LSB_FIRST,
   127 │ │               /**
   128 │ │                * The values are stored with the most-significant byte
   129 │ │                *   first. For instance, the 32-bit value 0xffeecc would be stored
   130 │ │                *   in memory as 0x00, 0xff, 0xee, 0xcc.
   131 │ │                */
   132 │ │               MSB_FIRST,
   133 │ │           }
   134 │ │           /**
   135 │ │            * Specifies the crossing mode for #GdkEventCrossing.
   136 │ │            */
   137 │ │   
   138 │ │           /**
   139 │ │            * Specifies the crossing mode for #GdkEventCrossing.
   140 │ │            */
   141 │ │           export namespace CrossingMode {
   142 │ │               export const $gtype: GObject.GType<CrossingMode>;
   143 │ │           }
   144 │ │   
   145 │ │           enum CrossingMode {
   146 │ │               /**
   147 │ │                * crossing because of pointer motion.
   148 │ │                */
   149 │ │               NORMAL,
   150 │ │               /**
   151 │ │                * crossing because a grab is activated.
   152 │ │                */
   153 │ │               GRAB,
   154 │ │               /**
   155 │ │                * crossing because a grab is deactivated.
   156 │ │                */
   157 │ │               UNGRAB,
   158 │ │               /**
   159 │ │                * crossing because a GTK+ grab is activated.
   160 │ │                */
   161 │ │               GTK_GRAB,
   162 │ │               /**
   163 │ │                * crossing because a GTK+ grab is deactivated.
   164 │ │                */
   165 │ │               GTK_UNGRAB,
   166 │ │               /**
   167 │ │                * crossing because a GTK+ widget changed
   168 │ │                *   state (e.g. sensitivity).
   169 │ │                */
   170 │ │               STATE_CHANGED,
   171 │ │               /**
   172 │ │                * crossing because a touch sequence has begun,
   173 │ │                *   this event is synthetic as the pointer might have not left the window.
   174 │ │                */
   175 │ │               TOUCH_BEGIN,
   176 │ │               /**
   177 │ │                * crossing because a touch sequence has ended,
   178 │ │                *   this event is synthetic as the pointer might have not left the window.
   179 │ │                */
   180 │ │               TOUCH_END,
   181 │ │               /**
   182 │ │                * crossing because of a device switch (i.e.
   183 │ │                *   a mouse taking control of the pointer after a touch device), this event
   184 │ │                *   is synthetic as the pointer didn’t leave the window.
   185 │ │                */
   186 │ │               DEVICE_SWITCH,
   187 │ │           }
   188 │ │           /**
   189 │ │            * Predefined cursors.
   190 │ │            *
   191 │ │            * Note that these IDs are directly taken from the X cursor font, and many
   192 │ │            * of these cursors are either not useful, or are not available on other platforms.
   193 │ │            *
   194 │ │            * The recommended way to create cursors is to use gdk_cursor_new_from_name().
   195 │ │            */
   196 │ │   
   197 │ │           /**
   198 │ │            * Predefined cursors.
   199 │ │            *
   200 │ │            * Note that these IDs are directly taken from the X cursor font, and many
   201 │ │            * of these cursors are either not useful, or are not available on other platforms.
   202 │ │            *
   203 │ │            * The recommended way to create cursors is to use gdk_cursor_new_from_name().
   204 │ │            */
   205 │ │           export namespace CursorType {
   206 │ │               export const $gtype: GObject.GType<CursorType>;
   207 │ │           }
   208 │ │   
   209 │ │           enum CursorType {
   210 │ │               /**
   211 │ │                * ![](X_cursor.png)
   212 │ │                */
   213 │ │               X_CURSOR,
   214 │ │               /**
   215 │ │                * ![](arrow.png)
   216 │ │                */
   217 │ │               ARROW,
   218 │ │               /**
   219 │ │                * ![](based_arrow_down.png)
   220 │ │                */
   221 │ │               BASED_ARROW_DOWN,
   222 │ │               /**
   223 │ │                * ![](based_arrow_up.png)
   224 │ │                */
   225 │ │               BASED_ARROW_UP,
   226 │ │               /**
   227 │ │                * ![](boat.png)
   228 │ │                */
   229 │ │               BOAT,
   230 │ │               /**
   231 │ │                * ![](bogosity.png)
   232 │ │                */
   233 │ │               BOGOSITY,
   234 │ │               /**
   235 │ │                * ![](bottom_left_corner.png)
   236 │ │                */
   237 │ │               BOTTOM_LEFT_CORNER,
   238 │ │               /**
   239 │ │                * ![](bottom_right_corner.png)
   240 │ │                */
   241 │ │               BOTTOM_RIGHT_CORNER,
   242 │ │               /**
   243 │ │                * ![](bottom_side.png)
   244 │ │                */
   245 │ │               BOTTOM_SIDE,
   246 │ │               /**
   247 │ │                * ![](bottom_tee.png)
   248 │ │                */
   249 │ │               BOTTOM_TEE,
   250 │ │               /**
   251 │ │                * ![](box_spiral.png)
   252 │ │                */
   253 │ │               BOX_SPIRAL,
   254 │ │               /**
   255 │ │                * ![](center_ptr.png)
   256 │ │                */
   257 │ │               CENTER_PTR,
   258 │ │               /**
   259 │ │                * ![](circle.png)
   260 │ │                */
   261 │ │               CIRCLE,
   262 │ │               /**
   263 │ │                * ![](clock.png)
   264 │ │                */
   265 │ │               CLOCK,
   266 │ │               /**
   267 │ │                * ![](coffee_mug.png)
   268 │ │                */
   269 │ │               COFFEE_MUG,
   270 │ │               /**
   271 │ │                * ![](cross.png)
   272 │ │                */
   273 │ │               CROSS,
   274 │ │               /**
   275 │ │                * ![](cross_reverse.png)
   276 │ │                */
   277 │ │               CROSS_REVERSE,
   278 │ │               /**
   279 │ │                * ![](crosshair.png)
   280 │ │                */
   281 │ │               CROSSHAIR,
   282 │ │               /**
   283 │ │                * ![](diamond_cross.png)
   284 │ │                */
   285 │ │               DIAMOND_CROSS,
   286 │ │               /**
   287 │ │                * ![](dot.png)
   288 │ │                */
   289 │ │               DOT,
   290 │ │               /**
   291 │ │                * ![](dotbox.png)
   292 │ │                */
   293 │ │               DOTBOX,
   294 │ │               /**
   295 │ │                * ![](double_arrow.png)
   296 │ │                */
   297 │ │               DOUBLE_ARROW,
   298 │ │               /**
   299 │ │                * ![](draft_large.png)
   300 │ │                */
   301 │ │               DRAFT_LARGE,
   302 │ │               /**
   303 │ │                * ![](draft_small.png)
   304 │ │                */
   305 │ │               DRAFT_SMALL,
   306 │ │               /**
   307 │ │                * ![](draped_box.png)
   308 │ │                */
   309 │ │               DRAPED_BOX,
   310 │ │               /**
   311 │ │                * ![](exchange.png)
   312 │ │                */
   313 │ │               EXCHANGE,
   314 │ │               /**
   315 │ │                * ![](fleur.png)
   316 │ │                */
   317 │ │               FLEUR,
   318 │ │               /**
   319 │ │                * ![](gobbler.png)
   320 │ │                */
   321 │ │               GOBBLER,
   322 │ │               /**
   323 │ │                * ![](gumby.png)
   324 │ │                */
   325 │ │               GUMBY,
   326 │ │               /**
   327 │ │                * ![](hand1.png)
   328 │ │                */
   329 │ │               HAND1,
   330 │ │               /**
   331 │ │                * ![](hand2.png)
   332 │ │                */
   333 │ │               HAND2,
   334 │ │               /**
   335 │ │                * ![](heart.png)
   336 │ │                */
   337 │ │               HEART,
   338 │ │               /**
   339 │ │                * ![](icon.png)
   340 │ │                */
   341 │ │               ICON,
   342 │ │               /**
   343 │ │                * ![](iron_cross.png)
   344 │ │                */
   345 │ │               IRON_CROSS,
   346 │ │               /**
   347 │ │                * ![](left_ptr.png)
   348 │ │                */
   349 │ │               LEFT_PTR,
   350 │ │               /**
   351 │ │                * ![](left_side.png)
   352 │ │                */
   353 │ │               LEFT_SIDE,
   354 │ │               /**
   355 │ │                * ![](left_tee.png)
   356 │ │                */
   357 │ │               LEFT_TEE,
   358 │ │               /**
   359 │ │                * ![](leftbutton.png)
   360 │ │                */
   361 │ │               LEFTBUTTON,
   362 │ │               /**
   363 │ │                * ![](ll_angle.png)
   364 │ │                */
   365 │ │               LL_ANGLE,
   366 │ │               /**
   367 │ │                * ![](lr_angle.png)
   368 │ │                */
   369 │ │               LR_ANGLE,
   370 │ │               /**
   371 │ │                * ![](man.png)
   372 │ │                */
   373 │ │               MAN,
   374 │ │               /**
   375 │ │                * ![](middlebutton.png)
   376 │ │                */
   377 │ │               MIDDLEBUTTON,
   378 │ │               /**
   379 │ │                * ![](mouse.png)
   380 │ │                */
   381 │ │               MOUSE,
   382 │ │               /**
   383 │ │                * ![](pencil.png)
   384 │ │                */
   385 │ │               PENCIL,
   386 │ │               /**
   387 │ │                * ![](pirate.png)
   388 │ │                */
   389 │ │               PIRATE,
   390 │ │               /**
   391 │ │                * ![](plus.png)
   392 │ │                */
   393 │ │               PLUS,
   394 │ │               /**
   395 │ │                * ![](question_arrow.png)
   396 │ │                */
   397 │ │               QUESTION_ARROW,
   398 │ │               /**
   399 │ │                * ![](right_ptr.png)
   400 │ │                */
   401 │ │               RIGHT_PTR,
   402 │ │               /**
   403 │ │                * ![](right_side.png)
   404 │ │                */
   405 │ │               RIGHT_SIDE,
   406 │ │               /**
   407 │ │                * ![](right_tee.png)
   408 │ │                */
   409 │ │               RIGHT_TEE,
   410 │ │               /**
   411 │ │                * ![](rightbutton.png)
   412 │ │                */
   413 │ │               RIGHTBUTTON,
   414 │ │               /**
   415 │ │                * ![](rtl_logo.png)
   416 │ │                */
   417 │ │               RTL_LOGO,
   418 │ │               /**
   419 │ │                * ![](sailboat.png)
   420 │ │                */
   421 │ │               SAILBOAT,
   422 │ │               /**
   423 │ │                * ![](sb_down_arrow.png)
   424 │ │                */
   425 │ │               SB_DOWN_ARROW,
   426 │ │               /**
   427 │ │                * ![](sb_h_double_arrow.png)
   428 │ │                */
   429 │ │               SB_H_DOUBLE_ARROW,
   430 │ │               /**
   431 │ │                * ![](sb_left_arrow.png)
   432 │ │                */
   433 │ │               SB_LEFT_ARROW,
   434 │ │               /**
   435 │ │                * ![](sb_right_arrow.png)
   436 │ │                */
   437 │ │               SB_RIGHT_ARROW,
   438 │ │               /**
   439 │ │                * ![](sb_up_arrow.png)
   440 │ │                */
   441 │ │               SB_UP_ARROW,
   442 │ │               /**
   443 │ │                * ![](sb_v_double_arrow.png)
   444 │ │                */
   445 │ │               SB_V_DOUBLE_ARROW,
   446 │ │               /**
   447 │ │                * ![](shuttle.png)
   448 │ │                */
   449 │ │               SHUTTLE,
   450 │ │               /**
   451 │ │                * ![](sizing.png)
   452 │ │                */
   453 │ │               SIZING,
   454 │ │               /**
   455 │ │                * ![](spider.png)
   456 │ │                */
   457 │ │               SPIDER,
   458 │ │               /**
   459 │ │                * ![](spraycan.png)
   460 │ │                */
   461 │ │               SPRAYCAN,
   462 │ │               /**
   463 │ │                * ![](star.png)
   464 │ │                */
   465 │ │               STAR,
   466 │ │               /**
   467 │ │                * ![](target.png)
   468 │ │                */
   469 │ │               TARGET,
   470 │ │               /**
   471 │ │                * ![](tcross.png)
   472 │ │                */
   473 │ │               TCROSS,
   474 │ │               /**
   475 │ │                * ![](top_left_arrow.png)
   476 │ │                */
   477 │ │               TOP_LEFT_ARROW,
   478 │ │               /**
   479 │ │                * ![](top_left_corner.png)
   480 │ │                */
   481 │ │               TOP_LEFT_CORNER,
   482 │ │               /**
   483 │ │                * ![](top_right_corner.png)
   484 │ │                */
   485 │ │               TOP_RIGHT_CORNER,
   486 │ │               /**
   487 │ │                * ![](top_side.png)
   488 │ │                */
   489 │ │               TOP_SIDE,
   490 │ │               /**
   491 │ │                * ![](top_tee.png)
   492 │ │                */
   493 │ │               TOP_TEE,
   494 │ │               /**
   495 │ │                * ![](trek.png)
   496 │ │                */
   497 │ │               TREK,
   498 │ │               /**
   499 │ │                * ![](ul_angle.png)
   500 │ │                */
   501 │ │               UL_ANGLE,
   502 │ │               /**
   503 │ │                * ![](umbrella.png)
   504 │ │                */
   505 │ │               UMBRELLA,
   506 │ │               /**
   507 │ │                * ![](ur_angle.png)
   508 │ │                */
   509 │ │               UR_ANGLE,
   510 │ │               /**
   511 │ │                * ![](watch.png)
   512 │ │                */
   513 │ │               WATCH,
   514 │ │               /**
   515 │ │                * ![](xterm.png)
   516 │ │                */
   517 │ │               XTERM,
   518 │ │               /**
   519 │ │                * last cursor type
   520 │ │                */
   521 │ │               LAST_CURSOR,
   522 │ │               /**
   523 │ │                * Blank cursor. Since 2.16
   524 │ │                */
   525 │ │               BLANK_CURSOR,
   526 │ │               /**
   527 │ │                * type of cursors constructed with
   528 │ │                *   gdk_cursor_new_from_pixbuf()
   529 │ │                */
   530 │ │               CURSOR_IS_PIXMAP,
   531 │ │           }
   532 │ │           /**
   533 │ │            * A pad feature.
   534 │ │            */
   535 │ │   
   536 │ │           /**
   537 │ │            * A pad feature.
   538 │ │            */
   539 │ │           export namespace DevicePadFeature {
   540 │ │               export const $gtype: GObject.GType<DevicePadFeature>;
   541 │ │           }
   542 │ │   
   543 │ │           enum DevicePadFeature {
   544 │ │               /**
   545 │ │                * a button
   546 │ │                */
   547 │ │               BUTTON,
   548 │ │               /**
   549 │ │                * a ring-shaped interactive area
   550 │ │                */
   551 │ │               RING,
   552 │ │               /**
   553 │ │                * a straight interactive area
   554 │ │                */
   555 │ │               STRIP,
   556 │ │           }
   557 │ │           /**
   558 │ │            * Indicates the specific type of tool being used being a tablet. Such as an
   559 │ │            * airbrush, pencil, etc.
   560 │ │            */
   561 │ │   
   562 │ │           /**
   563 │ │            * Indicates the specific type of tool being used being a tablet. Such as an
   564 │ │            * airbrush, pencil, etc.
   565 │ │            */
   566 │ │           export namespace DeviceToolType {
   567 │ │               export const $gtype: GObject.GType<DeviceToolType>;
   568 │ │           }
   569 │ │   
   570 │ │           enum DeviceToolType {
   571 │ │               /**
   572 │ │                * Tool is of an unknown type.
   573 │ │                */
   574 │ │               UNKNOWN,
   575 │ │               /**
   576 │ │                * Tool is a standard tablet stylus.
   577 │ │                */
   578 │ │               PEN,
   579 │ │               /**
   580 │ │                * Tool is standard tablet eraser.
   581 │ │                */
   582 │ │               ERASER,
   583 │ │               /**
   584 │ │                * Tool is a brush stylus.
   585 │ │                */
   586 │ │               BRUSH,
   587 │ │               /**
   588 │ │                * Tool is a pencil stylus.
   589 │ │                */
   590 │ │               PENCIL,
   591 │ │               /**
   592 │ │                * Tool is an airbrush stylus.
   593 │ │                */
   594 │ │               AIRBRUSH,
   595 │ │               /**
   596 │ │                * Tool is a mouse.
   597 │ │                */
   598 │ │               MOUSE,
   599 │ │               /**
   600 │ │                * Tool is a lens cursor.
   601 │ │                */
   602 │ │               LENS,
   603 │ │           }
   604 │ │           /**
   605 │ │            * Indicates the device type. See [above][GdkDeviceManager.description]
   606 │ │            * for more information about the meaning of these device types.
   607 │ │            */
   608 │ │   
   609 │ │           /**
   610 │ │            * Indicates the device type. See [above][GdkDeviceManager.description]
   611 │ │            * for more information about the meaning of these device types.
   612 │ │            */
   613 │ │           export namespace DeviceType {
   614 │ │               export const $gtype: GObject.GType<DeviceType>;
   615 │ │           }
   616 │ │   
   617 │ │           enum DeviceType {
   618 │ │               /**
   619 │ │                * Device is a master (or virtual) device. There will
   620 │ │                *                          be an associated focus indicator on the screen.
   621 │ │                */
   622 │ │               MASTER,
   623 │ │               /**
   624 │ │                * Device is a slave (or physical) device.
   625 │ │                */
   626 │ │               SLAVE,
   627 │ │               /**
   628 │ │                * Device is a physical device, currently not attached to
   629 │ │                *                            any virtual device.
   630 │ │                */
   631 │ │               FLOATING,
   632 │ │           }
   633 │ │           /**
   634 │ │            * Used in #GdkDragContext to the reason of a cancelled DND operation.
   635 │ │            */
   636 │ │   
   637 │ │           /**
   638 │ │            * Used in #GdkDragContext to the reason of a cancelled DND operation.
   639 │ │            */
   640 │ │           export namespace DragCancelReason {
   641 │ │               export const $gtype: GObject.GType<DragCancelReason>;
   642 │ │           }
   643 │ │   
   644 │ │           enum DragCancelReason {
   645 │ │               /**
   646 │ │                * There is no suitable drop target.
   647 │ │                */
   648 │ │               NO_TARGET,
   649 │ │               /**
   650 │ │                * Drag cancelled by the user
   651 │ │                */
   652 │ │               USER_CANCELLED,
   653 │ │               /**
   654 │ │                * Unspecified error.
   655 │ │                */
   656 │ │               ERROR,
   657 │ │           }
   658 │ │           /**
   659 │ │            * Used in #GdkDragContext to indicate the protocol according to
   660 │ │            * which DND is done.
   661 │ │            */
   662 │ │   
   663 │ │           /**
   664 │ │            * Used in #GdkDragContext to indicate the protocol according to
   665 │ │            * which DND is done.
   666 │ │            */
   667 │ │           export namespace DragProtocol {
   668 │ │               export const $gtype: GObject.GType<DragProtocol>;
   669 │ │           }
   670 │ │   
   671 │ │           enum DragProtocol {
   672 │ │               /**
   673 │ │                * no protocol.
   674 │ │                */
   675 │ │               NONE,
   676 │ │               /**
   677 │ │                * The Motif DND protocol. No longer supported
   678 │ │                */
   679 │ │               MOTIF,
   680 │ │               /**
   681 │ │                * The Xdnd protocol.
   682 │ │                */
   683 │ │               XDND,
   684 │ │               /**
   685 │ │                * An extension to the Xdnd protocol for
   686 │ │                *  unclaimed root window drops.
   687 │ │                */
   688 │ │               ROOTWIN,
   689 │ │               /**
   690 │ │                * The simple WM_DROPFILES protocol.
   691 │ │                */
   692 │ │               WIN32_DROPFILES,
   693 │ │               /**
   694 │ │                * The complex OLE2 DND protocol (not implemented).
   695 │ │                */
   696 │ │               OLE2,
   697 │ │               /**
   698 │ │                * Intra-application DND.
   699 │ │                */
   700 │ │               LOCAL,
   701 │ │               /**
   702 │ │                * Wayland DND protocol.
   703 │ │                */
   704 │ │               WAYLAND,
   705 │ │           }
   706 │ │           /**
   707 │ │            * Specifies the type of the event.
   708 │ │            *
   709 │ │            * Do not confuse these events with the signals that GTK+ widgets emit.
   710 │ │            * Although many of these events result in corresponding signals being emitted,
   711 │ │            * the events are often transformed or filtered along the way.
   712 │ │            *
   713 │ │            * In some language bindings, the values %GDK_2BUTTON_PRESS and
   714 │ │            * %GDK_3BUTTON_PRESS would translate into something syntactically
   715 │ │            * invalid (eg `Gdk.EventType.2ButtonPress`, where a
   716 │ │            * symbol is not allowed to start with a number). In that case, the
   717 │ │            * aliases %GDK_DOUBLE_BUTTON_PRESS and %GDK_TRIPLE_BUTTON_PRESS can
   718 │ │            * be used instead.
   719 │ │            */
   720 │ │   
   721 │ │           /**
   722 │ │            * Specifies the type of the event.
   723 │ │            *
   724 │ │            * Do not confuse these events with the signals that GTK+ widgets emit.
   725 │ │            * Although many of these events result in corresponding signals being emitted,
   726 │ │            * the events are often transformed or filtered along the way.
   727 │ │            *
   728 │ │            * In some language bindings, the values %GDK_2BUTTON_PRESS and
   729 │ │            * %GDK_3BUTTON_PRESS would translate into something syntactically
   730 │ │            * invalid (eg `Gdk.EventType.2ButtonPress`, where a
   731 │ │            * symbol is not allowed to start with a number). In that case, the
   732 │ │            * aliases %GDK_DOUBLE_BUTTON_PRESS and %GDK_TRIPLE_BUTTON_PRESS can
   733 │ │            * be used instead.
   734 │ │            */
   735 │ │           export namespace EventType {
   736 │ │               export const $gtype: GObject.GType<EventType>;
   737 │ │           }
   738 │ │   
   739 │ │           enum EventType {
   740 │ │               /**
   741 │ │                * a special code to indicate a null event.
   742 │ │                */
   743 │ │               NOTHING,
   744 │ │               /**
   745 │ │                * the window manager has requested that the toplevel window be
   746 │ │                *   hidden or destroyed, usually when the user clicks on a special icon in the
   747 │ │                *   title bar.
   748 │ │                */
   749 │ │               DELETE,
   750 │ │               /**
   751 │ │                * the window has been destroyed.
   752 │ │                */
   753 │ │               DESTROY,
   754 │ │               /**
   755 │ │                * all or part of the window has become visible and needs to be
   756 │ │                *   redrawn.
   757 │ │                */
   758 │ │               EXPOSE,
   759 │ │               /**
   760 │ │                * the pointer (usually a mouse) has moved.
   761 │ │                */
   762 │ │               MOTION_NOTIFY,
   763 │ │               /**
   764 │ │                * a mouse button has been pressed.
   765 │ │                */
   766 │ │               BUTTON_PRESS,
   767 │ │               /**
   768 │ │                * a mouse button has been double-clicked (clicked twice
   769 │ │                *   within a short period of time). Note that each click also generates a
   770 │ │                *   %GDK_BUTTON_PRESS event.
   771 │ │                */
   772 │ │               '2BUTTON_PRESS',
   773 │ │               /**
   774 │ │                * alias for %GDK_2BUTTON_PRESS, added in 3.6.
   775 │ │                */
   776 │ │               DOUBLE_BUTTON_PRESS,
   777 │ │               /**
   778 │ │                * a mouse button has been clicked 3 times in a short period
   779 │ │                *   of time. Note that each click also generates a %GDK_BUTTON_PRESS event.
   780 │ │                */
   781 │ │               '3BUTTON_PRESS',
   782 │ │               /**
   783 │ │                * alias for %GDK_3BUTTON_PRESS, added in 3.6.
   784 │ │                */
   785 │ │               TRIPLE_BUTTON_PRESS,
   786 │ │               /**
   787 │ │                * a mouse button has been released.
   788 │ │                */
   789 │ │               BUTTON_RELEASE,
   790 │ │               /**
   791 │ │                * a key has been pressed.
   792 │ │                */
   793 │ │               KEY_PRESS,
   794 │ │               /**
   795 │ │                * a key has been released.
   796 │ │                */
   797 │ │               KEY_RELEASE,
   798 │ │               /**
   799 │ │                * the pointer has entered the window.
   800 │ │                */
   801 │ │               ENTER_NOTIFY,
   802 │ │               /**
   803 │ │                * the pointer has left the window.
   804 │ │                */
   805 │ │               LEAVE_NOTIFY,
   806 │ │               /**
   807 │ │                * the keyboard focus has entered or left the window.
   808 │ │                */
   809 │ │               FOCUS_CHANGE,
   810 │ │               /**
   811 │ │                * the size, position or stacking order of the window has changed.
   812 │ │                *   Note that GTK+ discards these events for %GDK_WINDOW_CHILD windows.
   813 │ │                */
   814 │ │               CONFIGURE,
   815 │ │               /**
   816 │ │                * the window has been mapped.
   817 │ │                */
   818 │ │               MAP,
   819 │ │               /**
   820 │ │                * the window has been unmapped.
   821 │ │                */
   822 │ │               UNMAP,
   823 │ │               /**
   824 │ │                * a property on the window has been changed or deleted.
   825 │ │                */
   826 │ │               PROPERTY_NOTIFY,
   827 │ │               /**
   828 │ │                * the application has lost ownership of a selection.
   829 │ │                */
   830 │ │               SELECTION_CLEAR,
   831 │ │               /**
   832 │ │                * another application has requested a selection.
   833 │ │                */
   834 │ │               SELECTION_REQUEST,
   835 │ │               /**
   836 │ │                * a selection has been received.
   837 │ │                */
   838 │ │               SELECTION_NOTIFY,
   839 │ │               /**
   840 │ │                * an input device has moved into contact with a sensing
   841 │ │                *   surface (e.g. a touchscreen or graphics tablet).
   842 │ │                */
   843 │ │               PROXIMITY_IN,
   844 │ │               /**
   845 │ │                * an input device has moved out of contact with a sensing
   846 │ │                *   surface.
   847 │ │                */
   848 │ │               PROXIMITY_OUT,
   849 │ │               /**
   850 │ │                * the mouse has entered the window while a drag is in progress.
   851 │ │                */
   852 │ │               DRAG_ENTER,
   853 │ │               /**
   854 │ │                * the mouse has left the window while a drag is in progress.
   855 │ │                */
   856 │ │               DRAG_LEAVE,
   857 │ │               /**
   858 │ │                * the mouse has moved in the window while a drag is in
   859 │ │                *   progress.
   860 │ │                */
   861 │ │               DRAG_MOTION,
   862 │ │               /**
   863 │ │                * the status of the drag operation initiated by the window
   864 │ │                *   has changed.
   865 │ │                */
   866 │ │               DRAG_STATUS,
   867 │ │               /**
   868 │ │                * a drop operation onto the window has started.
   869 │ │                */
   870 │ │               DROP_START,
   871 │ │               /**
   872 │ │                * the drop operation initiated by the window has completed.
   873 │ │                */
   874 │ │               DROP_FINISHED,
   875 │ │               /**
   876 │ │                * a message has been received from another application.
   877 │ │                */
   878 │ │               CLIENT_EVENT,
   879 │ │               /**
   880 │ │                * the window visibility status has changed.
   881 │ │                */
   882 │ │               VISIBILITY_NOTIFY,
   883 │ │               /**
   884 │ │                * the scroll wheel was turned
   885 │ │                */
   886 │ │               SCROLL,
   887 │ │               /**
   888 │ │                * the state of a window has changed. See #GdkWindowState
   889 │ │                *   for the possible window states
   890 │ │                */
   891 │ │               WINDOW_STATE,
   892 │ │               /**
   893 │ │                * a setting has been modified.
   894 │ │                */
   895 │ │               SETTING,
   896 │ │               /**
   897 │ │                * the owner of a selection has changed. This event type
   898 │ │                *   was added in 2.6
   899 │ │                */
   900 │ │               OWNER_CHANGE,
   901 │ │               /**
   902 │ │                * a pointer or keyboard grab was broken. This event type
   903 │ │                *   was added in 2.8.
   904 │ │                */
   905 │ │               GRAB_BROKEN,
   906 │ │               /**
   907 │ │                * the content of the window has been changed. This event type
   908 │ │                *   was added in 2.14.
   909 │ │                */
   910 │ │               DAMAGE,
   911 │ │               /**
   912 │ │                * A new touch event sequence has just started. This event
   913 │ │                *   type was added in 3.4.
   914 │ │                */
   915 │ │               TOUCH_BEGIN,
   916 │ │               /**
   917 │ │                * A touch event sequence has been updated. This event type
   918 │ │                *   was added in 3.4.
   919 │ │                */
   920 │ │               TOUCH_UPDATE,
   921 │ │               /**
   922 │ │                * A touch event sequence has finished. This event type
   923 │ │                *   was added in 3.4.
   924 │ │                */
   925 │ │               TOUCH_END,
   926 │ │               /**
   927 │ │                * A touch event sequence has been canceled. This event type
   928 │ │                *   was added in 3.4.
   929 │ │                */
   930 │ │               TOUCH_CANCEL,
   931 │ │               /**
   932 │ │                * A touchpad swipe gesture event, the current state
   933 │ │                *   is determined by its phase field. This event type was added in 3.18.
   934 │ │                */
   935 │ │               TOUCHPAD_SWIPE,
   936 │ │               /**
   937 │ │                * A touchpad pinch gesture event, the current state
   938 │ │                *   is determined by its phase field. This event type was added in 3.18.
   939 │ │                */
   940 │ │               TOUCHPAD_PINCH,
   941 │ │               /**
   942 │ │                * A tablet pad button press event. This event type
   943 │ │                *   was added in 3.22.
   944 │ │                */
   945 │ │               PAD_BUTTON_PRESS,
   946 │ │               /**
   947 │ │                * A tablet pad button release event. This event type
   948 │ │                *   was added in 3.22.
   949 │ │                */
   950 │ │               PAD_BUTTON_RELEASE,
   951 │ │               /**
   952 │ │                * A tablet pad axis event from a "ring". This event type was
   953 │ │                *   added in 3.22.
   954 │ │                */
   955 │ │               PAD_RING,
   956 │ │               /**
   957 │ │                * A tablet pad axis event from a "strip". This event type was
   958 │ │                *   added in 3.22.
   959 │ │                */
   960 │ │               PAD_STRIP,
   961 │ │               /**
   962 │ │                * A tablet pad group mode change. This event type was
   963 │ │                *   added in 3.22.
   964 │ │                */
   965 │ │               PAD_GROUP_MODE,
   966 │ │               /**
   967 │ │                * marks the end of the GdkEventType enumeration. Added in 2.18
   968 │ │                */
   969 │ │               EVENT_LAST,
   970 │ │           }
   971 │ │           /**
   972 │ │            * Specifies the result of applying a #GdkFilterFunc to a native event.
   973 │ │            */
   974 │ │   
   975 │ │           /**
   976 │ │            * Specifies the result of applying a #GdkFilterFunc to a native event.
   977 │ │            */
   978 │ │           export namespace FilterReturn {
   979 │ │               export const $gtype: GObject.GType<FilterReturn>;
   980 │ │           }
   981 │ │   
   982 │ │           enum FilterReturn {
   983 │ │               /**
   984 │ │                * event not handled, continue processing.
   985 │ │                */
   986 │ │               CONTINUE,
   987 │ │               /**
   988 │ │                * native event translated into a GDK event and stored
   989 │ │                *  in the `event` structure that was passed in.
   990 │ │                */
   991 │ │               TRANSLATE,
   992 │ │               /**
   993 │ │                * event handled, terminate processing.
   994 │ │                */
   995 │ │               REMOVE,
   996 │ │           }
   997 │ │           /**
   998 │ │            * Indicates which monitor (in a multi-head setup) a window should span over
   999 │ │            * when in fullscreen mode.
  1000 │ │            */
  1001 │ │   
  1002 │ │           /**
  1003 │ │            * Indicates which monitor (in a multi-head setup) a window should span over
  1004 │ │            * when in fullscreen mode.
  1005 │ │            */
  1006 │ │           export namespace FullscreenMode {
  1007 │ │               export const $gtype: GObject.GType<FullscreenMode>;
  1008 │ │           }
  1009 │ │   
  1010 │ │           enum FullscreenMode {
  1011 │ │               /**
  1012 │ │                * Fullscreen on current monitor only.
  1013 │ │                */
  1014 │ │               CURRENT_MONITOR,
  1015 │ │               /**
  1016 │ │                * Span across all monitors when fullscreen.
  1017 │ │                */
  1018 │ │               ALL_MONITORS,
  1019 │ │           }
  1020 │ │           /**
  1021 │ │            * Error enumeration for #GdkGLContext.
  1022 │ │            */
  1023 │ │           class GLError extends GLib.Error {
  1024 │ │               static $gtype: GObject.GType<GLError>;
  1025 │ │   
  1026 │ │               // Static fields
  1027 │ │   
  1028 │ │               /**
  1029 │ │                * OpenGL support is not available
  1030 │ │                */
  1031 │ │               static NOT_AVAILABLE: number;
  1032 │ │               /**
  1033 │ │                * The requested visual format is not supported
  1034 │ │                */
  1035 │ │               static UNSUPPORTED_FORMAT: number;
  1036 │ │               /**
  1037 │ │                * The requested profile is not supported
  1038 │ │                */
  1039 │ │               static UNSUPPORTED_PROFILE: number;
  1040 │ │   
  1041 │ │               // Constructors
  1042 │ │   
  1043 │ │               constructor(options: { message: string; code: number });
  1044 │ │               _init(...args: any[]): void;
  1045 │ │   
  1046 │ │               // Static methods
  1047 │ │   
  1048 │ │               static quark(): GLib.Quark;
  1049 │ │           }
  1050 │ │   
  1051 │ │           /**
  1052 │ │            * Defines how device grabs interact with other devices.
  1053 │ │            */
  1054 │ │   
  1055 │ │           /**
  1056 │ │            * Defines how device grabs interact with other devices.
  1057 │ │            */
  1058 │ │           export namespace GrabOwnership {
  1059 │ │               export const $gtype: GObject.GType<GrabOwnership>;
  1060 │ │           }
  1061 │ │   
  1062 │ │           enum GrabOwnership {
  1063 │ │               /**
  1064 │ │                * All other devices’ events are allowed.
  1065 │ │                */
  1066 │ │               NONE,
  1067 │ │               /**
  1068 │ │                * Other devices’ events are blocked for the grab window.
  1069 │ │                */
  1070 │ │               WINDOW,
  1071 │ │               /**
  1072 │ │                * Other devices’ events are blocked for the whole application.
  1073 │ │                */
  1074 │ │               APPLICATION,
  1075 │ │           }
  1076 │ │           /**
  1077 │ │            * Returned by gdk_device_grab(), gdk_pointer_grab() and gdk_keyboard_grab() to
  1078 │ │            * indicate success or the reason for the failure of the grab attempt.
  1079 │ │            */
  1080 │ │   
  1081 │ │           /**
  1082 │ │            * Returned by gdk_device_grab(), gdk_pointer_grab() and gdk_keyboard_grab() to
  1083 │ │            * indicate success or the reason for the failure of the grab attempt.
  1084 │ │            */
  1085 │ │           export namespace GrabStatus {
  1086 │ │               export const $gtype: GObject.GType<GrabStatus>;
  1087 │ │           }
  1088 │ │   
  1089 │ │           enum GrabStatus {
  1090 │ │               /**
  1091 │ │                * the resource was successfully grabbed.
  1092 │ │                */
  1093 │ │               SUCCESS,
  1094 │ │               /**
  1095 │ │                * the resource is actively grabbed by another client.
  1096 │ │                */
  1097 │ │               ALREADY_GRABBED,
  1098 │ │               /**
  1099 │ │                * the resource was grabbed more recently than the
  1100 │ │                *  specified time.
  1101 │ │                */
  1102 │ │               INVALID_TIME,
  1103 │ │               /**
  1104 │ │                * the grab window or the `confine_to` window are not
  1105 │ │                *  viewable.
  1106 │ │                */
  1107 │ │               NOT_VIEWABLE,
  1108 │ │               /**
  1109 │ │                * the resource is frozen by an active grab of another client.
  1110 │ │                */
  1111 │ │               FROZEN,
  1112 │ │               /**
  1113 │ │                * the grab failed for some other reason. Since 3.16
  1114 │ │                */
  1115 │ │               FAILED,
  1116 │ │           }
  1117 │ │           /**
  1118 │ │            * Defines the reference point of a window and the meaning of coordinates
  1119 │ │            * passed to gtk_window_move(). See gtk_window_move() and the "implementation
  1120 │ │            * notes" section of the
  1121 │ │            * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
  1122 │ │            * specification for more details.
  1123 │ │            */
  1124 │ │   
  1125 │ │           /**
  1126 │ │            * Defines the reference point of a window and the meaning of coordinates
  1127 │ │            * passed to gtk_window_move(). See gtk_window_move() and the "implementation
  1128 │ │            * notes" section of the
  1129 │ │            * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
  1130 │ │            * specification for more details.
  1131 │ │            */
  1132 │ │           export namespace Gravity {
  1133 │ │               export const $gtype: GObject.GType<Gravity>;
  1134 │ │           }
  1135 │ │   
  1136 │ │           enum Gravity {
  1137 │ │               /**
  1138 │ │                * the reference point is at the top left corner.
  1139 │ │                */
  1140 │ │               NORTH_WEST,
  1141 │ │               /**
  1142 │ │                * the reference point is in the middle of the top edge.
  1143 │ │                */
  1144 │ │               NORTH,
  1145 │ │               /**
  1146 │ │                * the reference point is at the top right corner.
  1147 │ │                */
  1148 │ │               NORTH_EAST,
  1149 │ │               /**
  1150 │ │                * the reference point is at the middle of the left edge.
  1151 │ │                */
  1152 │ │               WEST,
  1153 │ │               /**
  1154 │ │                * the reference point is at the center of the window.
  1155 │ │                */
  1156 │ │               CENTER,
  1157 │ │               /**
  1158 │ │                * the reference point is at the middle of the right edge.
  1159 │ │                */
  1160 │ │               EAST,
  1161 │ │               /**
  1162 │ │                * the reference point is at the lower left corner.
  1163 │ │                */
  1164 │ │               SOUTH_WEST,
  1165 │ │               /**
  1166 │ │                * the reference point is at the middle of the lower edge.
  1167 │ │                */
  1168 │ │               SOUTH,
  1169 │ │               /**
  1170 │ │                * the reference point is at the lower right corner.
  1171 │ │                */
  1172 │ │               SOUTH_EAST,
  1173 │ │               /**
  1174 │ │                * the reference point is at the top left corner of the
  1175 │ │                *  window itself, ignoring window manager decorations.
  1176 │ │                */
  1177 │ │               STATIC,
  1178 │ │           }
  1179 │ │           /**
  1180 │ │            * An enumeration that describes the mode of an input device.
  1181 │ │            */
  1182 │ │   
  1183 │ │           /**
  1184 │ │            * An enumeration that describes the mode of an input device.
  1185 │ │            */
  1186 │ │           export namespace InputMode {
  1187 │ │               export const $gtype: GObject.GType<InputMode>;
  1188 │ │           }
  1189 │ │   
  1190 │ │           enum InputMode {
  1191 │ │               /**
  1192 │ │                * the device is disabled and will not report any events.
  1193 │ │                */
  1194 │ │               DISABLED,
  1195 │ │               /**
  1196 │ │                * the device is enabled. The device’s coordinate space
  1197 │ │                *                   maps to the entire screen.
  1198 │ │                */
  1199 │ │               SCREEN,
  1200 │ │               /**
  1201 │ │                * the device is enabled. The device’s coordinate space
  1202 │ │                *                   is mapped to a single window. The manner in which this window
  1203 │ │                *                   is chosen is undefined, but it will typically be the same
  1204 │ │                *                   way in which the focus window for key events is determined.
  1205 │ │                */
  1206 │ │               WINDOW,
  1207 │ │           }
  1208 │ │           /**
  1209 │ │            * An enumeration describing the type of an input device in general terms.
  1210 │ │            */
  1211 │ │   
  1212 │ │           /**
  1213 │ │            * An enumeration describing the type of an input device in general terms.
  1214 │ │            */
  1215 │ │           export namespace InputSource {
  1216 │ │               export const $gtype: GObject.GType<InputSource>;
  1217 │ │           }
  1218 │ │   
  1219 │ │           enum InputSource {
  1220 │ │               /**
  1221 │ │                * the device is a mouse. (This will be reported for the core
  1222 │ │                *                    pointer, even if it is something else, such as a trackball.)
  1223 │ │                */
  1224 │ │               MOUSE,
  1225 │ │               /**
  1226 │ │                * the device is a stylus of a graphics tablet or similar device.
  1227 │ │                */
  1228 │ │               PEN,
  1229 │ │               /**
  1230 │ │                * the device is an eraser. Typically, this would be the other end
  1231 │ │                *                     of a stylus on a graphics tablet.
  1232 │ │                */
  1233 │ │               ERASER,
  1234 │ │               /**
  1235 │ │                * the device is a graphics tablet “puck” or similar device.
  1236 │ │                */
  1237 │ │               CURSOR,
  1238 │ │               /**
  1239 │ │                * the device is a keyboard.
  1240 │ │                */
  1241 │ │               KEYBOARD,
  1242 │ │               /**
  1243 │ │                * the device is a direct-input touch device, such
  1244 │ │                *     as a touchscreen or tablet. This device type has been added in 3.4.
  1245 │ │                */
  1246 │ │               TOUCHSCREEN,
  1247 │ │               /**
  1248 │ │                * the device is an indirect touch device, such
  1249 │ │                *     as a touchpad. This device type has been added in 3.4.
  1250 │ │                */
  1251 │ │               TOUCHPAD,
  1252 │ │               /**
  1253 │ │                * the device is a trackpoint. This device type has been
  1254 │ │                *     added in 3.22
  1255 │ │                */
  1256 │ │               TRACKPOINT,
  1257 │ │               /**
  1258 │ │                * the device is a "pad", a collection of buttons,
  1259 │ │                *     rings and strips found in drawing tablets. This device type has been
  1260 │ │                *     added in 3.22.
  1261 │ │                */
  1262 │ │               TABLET_PAD,
  1263 │ │           }
  1264 │ │           /**
  1265 │ │            * This enum is used with gdk_keymap_get_modifier_mask()
  1266 │ │            * in order to determine what modifiers the
  1267 │ │            * currently used windowing system backend uses for particular
  1268 │ │            * purposes. For example, on X11/Windows, the Control key is used for
  1269 │ │            * invoking menu shortcuts (accelerators), whereas on Apple computers
  1270 │ │            * it’s the Command key (which correspond to %GDK_CONTROL_MASK and
  1271 │ │            * %GDK_MOD2_MASK, respectively).
  1272 │ │            */
  1273 │ │   
  1274 │ │           /**
  1275 │ │            * This enum is used with gdk_keymap_get_modifier_mask()
  1276 │ │            * in order to determine what modifiers the
  1277 │ │            * currently used windowing system backend uses for particular
  1278 │ │            * purposes. For example, on X11/Windows, the Control key is used for
  1279 │ │            * invoking menu shortcuts (accelerators), whereas on Apple computers
  1280 │ │            * it’s the Command key (which correspond to %GDK_CONTROL_MASK and
  1281 │ │            * %GDK_MOD2_MASK, respectively).
  1282 │ │            */
  1283 │ │           export namespace ModifierIntent {
  1284 │ │               export const $gtype: GObject.GType<ModifierIntent>;
  1285 │ │           }
  1286 │ │   
  1287 │ │           enum ModifierIntent {
  1288 │ │               /**
  1289 │ │                * the primary modifier used to invoke
  1290 │ │                *  menu accelerators.
  1291 │ │                */
  1292 │ │               PRIMARY_ACCELERATOR,
  1293 │ │               /**
  1294 │ │                * the modifier used to invoke context menus.
  1295 │ │                *  Note that mouse button 3 always triggers context menus. When this modifier
  1296 │ │                *  is not 0, it additionally triggers context menus when used with mouse button 1.
  1297 │ │                */
  1298 │ │               CONTEXT_MENU,
  1299 │ │               /**
  1300 │ │                * the modifier used to extend selections
  1301 │ │                *  using `modifier`-click or `modifier`-cursor-key
  1302 │ │                */
  1303 │ │               EXTEND_SELECTION,
  1304 │ │               /**
  1305 │ │                * the modifier used to modify selections,
  1306 │ │                *  which in most cases means toggling the clicked item into or out of the selection.
  1307 │ │                */
  1308 │ │               MODIFY_SELECTION,
  1309 │ │               /**
  1310 │ │                * when any of these modifiers is pressed, the
  1311 │ │                *  key event cannot produce a symbol directly. This is meant to be used for
  1312 │ │                *  input methods, and for use cases like typeahead search.
  1313 │ │                */
  1314 │ │               NO_TEXT_INPUT,
  1315 │ │               /**
  1316 │ │                * the modifier that switches between keyboard
  1317 │ │                *  groups (AltGr on X11/Windows and Option/Alt on OS X).
  1318 │ │                */
  1319 │ │               SHIFT_GROUP,
  1320 │ │               /**
  1321 │ │                * The set of modifier masks accepted
  1322 │ │                * as modifiers in accelerators. Needed because Command is mapped to MOD2 on
  1323 │ │                * OSX, which is widely used, but on X11 MOD2 is NumLock and using that for a
  1324 │ │                * mod key is problematic at best.
  1325 │ │                * Ref: https://bugzilla.gnome.org/show_bug.cgi?id=736125.
  1326 │ │                */
  1327 │ │               DEFAULT_MOD_MASK,
  1328 │ │           }
  1329 │ │           /**
  1330 │ │            * Specifies the kind of crossing for #GdkEventCrossing.
  1331 │ │            *
  1332 │ │            * See the X11 protocol specification of LeaveNotify for
  1333 │ │            * full details of crossing event generation.
  1334 │ │            */
  1335 │ │   
  1336 │ │           /**
  1337 │ │            * Specifies the kind of crossing for #GdkEventCrossing.
  1338 │ │            *
  1339 │ │            * See the X11 protocol specification of LeaveNotify for
  1340 │ │            * full details of crossing event generation.
  1341 │ │            */
  1342 │ │           export namespace NotifyType {
  1343 │ │               export const $gtype: GObject.GType<NotifyType>;
  1344 │ │           }
  1345 │ │   
  1346 │ │           enum NotifyType {
  1347 │ │               /**
  1348 │ │                * the window is entered from an ancestor or
  1349 │ │                *   left towards an ancestor.
  1350 │ │                */
  1351 │ │               ANCESTOR,
  1352 │ │               /**
  1353 │ │                * the pointer moves between an ancestor and an
  1354 │ │                *   inferior of the window.
  1355 │ │                */
  1356 │ │               VIRTUAL,
  1357 │ │               /**
  1358 │ │                * the window is entered from an inferior or
  1359 │ │                *   left towards an inferior.
  1360 │ │                */
  1361 │ │               INFERIOR,
  1362 │ │               /**
  1363 │ │                * the window is entered from or left towards
  1364 │ │                *   a window which is neither an ancestor nor an inferior.
  1365 │ │                */
  1366 │ │               NONLINEAR,
  1367 │ │               /**
  1368 │ │                * the pointer moves between two windows
  1369 │ │                *   which are not ancestors of each other and the window is part of
  1370 │ │                *   the ancestor chain between one of these windows and their least
  1371 │ │                *   common ancestor.
  1372 │ │                */
  1373 │ │               NONLINEAR_VIRTUAL,
  1374 │ │               /**
  1375 │ │                * an unknown type of enter/leave event occurred.
  1376 │ │                */
  1377 │ │               UNKNOWN,
  1378 │ │           }
  1379 │ │           /**
  1380 │ │            * Specifies why a selection ownership was changed.
  1381 │ │            */
  1382 │ │   
  1383 │ │           /**
  1384 │ │            * Specifies why a selection ownership was changed.
  1385 │ │            */
  1386 │ │           export namespace OwnerChange {
  1387 │ │               export const $gtype: GObject.GType<OwnerChange>;
  1388 │ │           }
  1389 │ │   
  1390 │ │           enum OwnerChange {
  1391 │ │               /**
  1392 │ │                * some other app claimed the ownership
  1393 │ │                */
  1394 │ │               NEW_OWNER,
  1395 │ │               /**
  1396 │ │                * the window was destroyed
  1397 │ │                */
  1398 │ │               DESTROY,
  1399 │ │               /**
  1400 │ │                * the client was closed
  1401 │ │                */
  1402 │ │               CLOSE,
  1403 │ │           }
  1404 │ │           /**
  1405 │ │            * Describes how existing data is combined with new data when
  1406 │ │            * using gdk_property_change().
  1407 │ │            */
  1408 │ │   
  1409 │ │           /**
  1410 │ │            * Describes how existing data is combined with new data when
  1411 │ │            * using gdk_property_change().
  1412 │ │            */
  1413 │ │           export namespace PropMode {
  1414 │ │               export const $gtype: GObject.GType<PropMode>;
  1415 │ │           }
  1416 │ │   
  1417 │ │           enum PropMode {
  1418 │ │               /**
  1419 │ │                * the new data replaces the existing data.
  1420 │ │                */
  1421 │ │               REPLACE,
  1422 │ │               /**
  1423 │ │                * the new data is prepended to the existing data.
  1424 │ │                */
  1425 │ │               PREPEND,
  1426 │ │               /**
  1427 │ │                * the new data is appended to the existing data.
  1428 │ │                */
  1429 │ │               APPEND,
  1430 │ │           }
  1431 │ │           /**
  1432 │ │            * Specifies the type of a property change for a #GdkEventProperty.
  1433 │ │            */
  1434 │ │   
  1435 │ │           /**
  1436 │ │            * Specifies the type of a property change for a #GdkEventProperty.
  1437 │ │            */
  1438 │ │           export namespace PropertyState {
  1439 │ │               export const $gtype: GObject.GType<PropertyState>;
  1440 │ │           }
  1441 │ │   
  1442 │ │           enum PropertyState {
  1443 │ │               /**
  1444 │ │                * the property value was changed.
  1445 │ │                */
  1446 │ │               NEW_VALUE,
  1447 │ │               /**
  1448 │ │                * the property was deleted.
  1449 │ │                */
  1450 │ │               DELETE,
  1451 │ │           }
  1452 │ │           /**
  1453 │ │            * Specifies the direction for #GdkEventScroll.
  1454 │ │            */
  1455 │ │   
  1456 │ │           /**
  1457 │ │            * Specifies the direction for #GdkEventScroll.
  1458 │ │            */
  1459 │ │           export namespace ScrollDirection {
  1460 │ │               export const $gtype: GObject.GType<ScrollDirection>;
  1461 │ │           }
  1462 │ │   
  1463 │ │           enum ScrollDirection {
  1464 │ │               /**
  1465 │ │                * the window is scrolled up.
  1466 │ │                */
  1467 │ │               UP,
  1468 │ │               /**
  1469 │ │                * the window is scrolled down.
  1470 │ │                */
  1471 │ │               DOWN,
  1472 │ │               /**
  1473 │ │                * the window is scrolled to the left.
  1474 │ │                */
  1475 │ │               LEFT,
  1476 │ │               /**
  1477 │ │                * the window is scrolled to the right.
  1478 │ │                */
  1479 │ │               RIGHT,
  1480 │ │               /**
  1481 │ │                * the scrolling is determined by the delta values
  1482 │ │                *   in #GdkEventScroll. See gdk_event_get_scroll_deltas(). Since: 3.4
  1483 │ │                */
  1484 │ │               SMOOTH,
  1485 │ │           }
  1486 │ │           /**
  1487 │ │            * Specifies the kind of modification applied to a setting in a
  1488 │ │            * #GdkEventSetting.
  1489 │ │            */
  1490 │ │   
  1491 │ │           /**
  1492 │ │            * Specifies the kind of modification applied to a setting in a
  1493 │ │            * #GdkEventSetting.
  1494 │ │            */
  1495 │ │           export namespace SettingAction {
  1496 │ │               export const $gtype: GObject.GType<SettingAction>;
  1497 │ │           }
  1498 │ │   
  1499 │ │           enum SettingAction {
  1500 │ │               /**
  1501 │ │                * a setting was added.
  1502 │ │                */
  1503 │ │               NEW,
  1504 │ │               /**
  1505 │ │                * a setting was changed.
  1506 │ │                */
  1507 │ │               CHANGED,
  1508 │ │               /**
  1509 │ │                * a setting was deleted.
  1510 │ │                */
  1511 │ │               DELETED,
  1512 │ │           }
  1513 │ │   
  1514 │ │           export namespace Status {
  1515 │ │               export const $gtype: GObject.GType<Status>;
  1516 │ │           }
  1517 │ │   
  1518 │ │           enum Status {
  1519 │ │               OK,
  1520 │ │               ERROR,
  1521 │ │               ERROR_PARAM,
  1522 │ │               ERROR_FILE,
  1523 │ │               ERROR_MEM,
  1524 │ │           }
  1525 │ │           /**
  1526 │ │            * This enumeration describes how the red, green and blue components
  1527 │ │            * of physical pixels on an output device are laid out.
  1528 │ │            */
  1529 │ │   
  1530 │ │           /**
  1531 │ │            * This enumeration describes how the red, green and blue components
  1532 │ │            * of physical pixels on an output device are laid out.
  1533 │ │            */
  1534 │ │           export namespace SubpixelLayout {
  1535 │ │               export const $gtype: GObject.GType<SubpixelLayout>;
  1536 │ │           }
  1537 │ │   
  1538 │ │           enum SubpixelLayout {
  1539 │ │               /**
  1540 │ │                * The layout is not known
  1541 │ │                */
  1542 │ │               UNKNOWN,
  1543 │ │               /**
  1544 │ │                * Not organized in this way
  1545 │ │                */
  1546 │ │               NONE,
  1547 │ │               /**
  1548 │ │                * The layout is horizontal, the order is RGB
  1549 │ │                */
  1550 │ │               HORIZONTAL_RGB,
  1551 │ │               /**
  1552 │ │                * The layout is horizontal, the order is BGR
  1553 │ │                */
  1554 │ │               HORIZONTAL_BGR,
  1555 │ │               /**
  1556 │ │                * The layout is vertical, the order is RGB
  1557 │ │                */
  1558 │ │               VERTICAL_RGB,
  1559 │ │               /**
  1560 │ │                * The layout is vertical, the order is BGR
  1561 │ │                */
  1562 │ │               VERTICAL_BGR,
  1563 │ │           }
  1564 │ │           /**
  1565 │ │            * Specifies the current state of a touchpad gesture. All gestures are
  1566 │ │            * guaranteed to begin with an event with phase %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
  1567 │ │            * followed by 0 or several events with phase %GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.
  1568 │ │            *
  1569 │ │            * A finished gesture may have 2 possible outcomes, an event with phase
  1570 │ │            * %GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is
  1571 │ │            * considered successful, this should be used as the hint to perform any
  1572 │ │            * permanent changes.
  1573 │ │            *
  1574 │ │            * Cancelled gestures may be so for a variety of reasons, due to hardware
  1575 │ │            * or the compositor, or due to the gesture recognition layers hinting the
  1576 │ │            * gesture did not finish resolutely (eg. a 3rd finger being added during
  1577 │ │            * a pinch gesture). In these cases, the last event will report the phase
  1578 │ │            * %GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint
  1579 │ │            * to undo any visible/permanent changes that were done throughout the
  1580 │ │            * progress of the gesture.
  1581 │ │            *
  1582 │ │            * See also #GdkEventTouchpadSwipe and #GdkEventTouchpadPinch.
  1583 │ │            */
  1584 │ │   
  1585 │ │           /**
  1586 │ │            * Specifies the current state of a touchpad gesture. All gestures are
  1587 │ │            * guaranteed to begin with an event with phase %GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
  1588 │ │            * followed by 0 or several events with phase %GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.
  1589 │ │            *
  1590 │ │            * A finished gesture may have 2 possible outcomes, an event with phase
  1591 │ │            * %GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is
  1592 │ │            * considered successful, this should be used as the hint to perform any
  1593 │ │            * permanent changes.
  1594 │ │            *
  1595 │ │            * Cancelled gestures may be so for a variety of reasons, due to hardware
  1596 │ │            * or the compositor, or due to the gesture recognition layers hinting the
  1597 │ │            * gesture did not finish resolutely (eg. a 3rd finger being added during
  1598 │ │            * a pinch gesture). In these cases, the last event will report the phase
  1599 │ │            * %GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint
  1600 │ │            * to undo any visible/permanent changes that were done throughout the
  1601 │ │            * progress of the gesture.
  1602 │ │            *
  1603 │ │            * See also #GdkEventTouchpadSwipe and #GdkEventTouchpadPinch.
  1604 │ │            */
  1605 │ │           export namespace TouchpadGesturePhase {
  1606 │ │               export const $gtype: GObject.GType<TouchpadGesturePhase>;
  1607 │ │           }
  1608 │ │   
  1609 │ │           enum TouchpadGesturePhase {
  1610 │ │               /**
  1611 │ │                * The gesture has begun.
  1612 │ │                */
  1613 │ │               BEGIN,
  1614 │ │               /**
  1615 │ │                * The gesture has been updated.
  1616 │ │                */
  1617 │ │               UPDATE,
  1618 │ │               /**
  1619 │ │                * The gesture was finished, changes
  1620 │ │                *   should be permanently applied.
  1621 │ │                */
  1622 │ │               END,
  1623 │ │               /**
  1624 │ │                * The gesture was cancelled, all
  1625 │ │                *   changes should be undone.
  1626 │ │                */
  1627 │ │               CANCEL,
  1628 │ │           }
  1629 │ │           /**
  1630 │ │            * Specifies the visiblity status of a window for a #GdkEventVisibility.
  1631 │ │            */
  1632 │ │   
  1633 │ │           /**
  1634 │ │            * Specifies the visiblity status of a window for a #GdkEventVisibility.
  1635 │ │            */
  1636 │ │           export namespace VisibilityState {
  1637 │ │               export const $gtype: GObject.GType<VisibilityState>;
  1638 │ │           }
  1639 │ │   
  1640 │ │           enum VisibilityState {
  1641 │ │               /**
  1642 │ │                * the window is completely visible.
  1643 │ │                */
  1644 │ │               UNOBSCURED,
  1645 │ │               /**
  1646 │ │                * the window is partially visible.
  1647 │ │                */
  1648 │ │               PARTIAL,
  1649 │ │               /**
  1650 │ │                * the window is not visible at all.
  1651 │ │                */
  1652 │ │               FULLY_OBSCURED,
  1653 │ │           }
  1654 │ │           /**
  1655 │ │            * A set of values that describe the manner in which the pixel values
  1656 │ │            * for a visual are converted into RGB values for display.
  1657 │ │            */
  1658 │ │   
  1659 │ │           /**
  1660 │ │            * A set of values that describe the manner in which the pixel values
  1661 │ │            * for a visual are converted into RGB values for display.
  1662 │ │            */
  1663 │ │           export namespace VisualType {
  1664 │ │               export const $gtype: GObject.GType<VisualType>;
  1665 │ │           }
  1666 │ │   
  1667 │ │           enum VisualType {
  1668 │ │               /**
  1669 │ │                * Each pixel value indexes a grayscale value
  1670 │ │                *     directly.
  1671 │ │                */
  1672 │ │               STATIC_GRAY,
  1673 │ │               /**
  1674 │ │                * Each pixel is an index into a color map that
  1675 │ │                *     maps pixel values into grayscale values. The color map can be
  1676 │ │                *     changed by an application.
  1677 │ │                */
  1678 │ │               GRAYSCALE,
  1679 │ │               /**
  1680 │ │                * Each pixel value is an index into a predefined,
  1681 │ │                *     unmodifiable color map that maps pixel values into RGB values.
  1682 │ │                */
  1683 │ │               STATIC_COLOR,
  1684 │ │               /**
  1685 │ │                * Each pixel is an index into a color map that
  1686 │ │                *     maps pixel values into rgb values. The color map can be changed by
  1687 │ │                *     an application.
  1688 │ │                */
  1689 │ │               PSEUDO_COLOR,
  1690 │ │               /**
  1691 │ │                * Each pixel value directly contains red, green,
  1692 │ │                *     and blue components. Use gdk_visual_get_red_pixel_details(), etc,
  1693 │ │                *     to obtain information about how the components are assembled into
  1694 │ │                *     a pixel value.
  1695 │ │                */
  1696 │ │               TRUE_COLOR,
  1697 │ │               /**
  1698 │ │                * Each pixel value contains red, green, and blue
  1699 │ │                *     components as for %GDK_VISUAL_TRUE_COLOR, but the components are
  1700 │ │                *     mapped via a color table into the final output table instead of
  1701 │ │                *     being converted directly.
  1702 │ │                */
  1703 │ │               DIRECT_COLOR,
  1704 │ │           }
  1705 │ │           /**
  1706 │ │            * Determines a window edge or corner.
  1707 │ │            */
  1708 │ │   
  1709 │ │           /**
  1710 │ │            * Determines a window edge or corner.
  1711 │ │            */
  1712 │ │           export namespace WindowEdge {
  1713 │ │               export const $gtype: GObject.GType<WindowEdge>;
  1714 │ │           }
  1715 │ │   
  1716 │ │           enum WindowEdge {
  1717 │ │               /**
  1718 │ │                * the top left corner.
  1719 │ │                */
  1720 │ │               NORTH_WEST,
  1721 │ │               /**
  1722 │ │                * the top edge.
  1723 │ │                */
  1724 │ │               NORTH,
  1725 │ │               /**
  1726 │ │                * the top right corner.
  1727 │ │                */
  1728 │ │               NORTH_EAST,
  1729 │ │               /**
  1730 │ │                * the left edge.
  1731 │ │                */
  1732 │ │               WEST,
  1733 │ │               /**
  1734 │ │                * the right edge.
  1735 │ │                */
  1736 │ │               EAST,
  1737 │ │               /**
  1738 │ │                * the lower left corner.
  1739 │ │                */
  1740 │ │               SOUTH_WEST,
  1741 │ │               /**
  1742 │ │                * the lower edge.
  1743 │ │                */
  1744 │ │               SOUTH,
  1745 │ │               /**
  1746 │ │                * the lower right corner.
  1747 │ │                */
  1748 │ │               SOUTH_EAST,
  1749 │ │           }
  1750 │ │           /**
  1751 │ │            * Describes the kind of window.
  1752 │ │            */
  1753 │ │   
  1754 │ │           /**
  1755 │ │            * Describes the kind of window.
  1756 │ │            */
  1757 │ │           export namespace WindowType {
  1758 │ │               export const $gtype: GObject.GType<WindowType>;
  1759 │ │           }
  1760 │ │   
  1761 │ │           enum WindowType {
  1762 │ │               /**
  1763 │ │                * root window; this window has no parent, covers the entire
  1764 │ │                *  screen, and is created by the window system
  1765 │ │                */
  1766 │ │               ROOT,
  1767 │ │               /**
  1768 │ │                * toplevel window (used to implement #GtkWindow)
  1769 │ │                */
  1770 │ │               TOPLEVEL,
  1771 │ │               /**
  1772 │ │                * child window (used to implement e.g. #GtkEntry)
  1773 │ │                */
  1774 │ │               CHILD,
  1775 │ │               /**
  1776 │ │                * override redirect temporary window (used to implement
  1777 │ │                *  #GtkMenu)
  1778 │ │                */
  1779 │ │               TEMP,
  1780 │ │               /**
  1781 │ │                * foreign window (see gdk_window_foreign_new())
  1782 │ │                */
  1783 │ │               FOREIGN,
  1784 │ │               /**
  1785 │ │                * offscreen window (see
  1786 │ │                *  [Offscreen Windows][OFFSCREEN-WINDOWS]). Since 2.18
  1787 │ │                */
  1788 │ │               OFFSCREEN,
  1789 │ │               /**
  1790 │ │                * subsurface-based window; This window is visually
  1791 │ │                *  tied to a toplevel, and is moved/stacked with it. Currently this window
  1792 │ │                *  type is only implemented in Wayland. Since 3.14
  1793 │ │                */
  1794 │ │               SUBSURFACE,
  1795 │ │           }
  1796 │ │           /**
  1797 │ │            * These are hints for the window manager that indicate what type of function
  1798 │ │            * the window has. The window manager can use this when determining decoration
  1799 │ │            * and behaviour of the window. The hint must be set before mapping the window.
  1800 │ │            *
  1801 │ │            * See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
  1802 │ │            * specification for more details about window types.
  1803 │ │            */
  1804 │ │   
  1805 │ │           /**
  1806 │ │            * These are hints for the window manager that indicate what type of function
  1807 │ │            * the window has. The window manager can use this when determining decoration
  1808 │ │            * and behaviour of the window. The hint must be set before mapping the window.
  1809 │ │            *
  1810 │ │            * See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
  1811 │ │            * specification for more details about window types.
  1812 │ │            */
  1813 │ │           export namespace WindowTypeHint {
  1814 │ │               export const $gtype: GObject.GType<WindowTypeHint>;
  1815 │ │           }
  1816 │ │   
  1817 │ │           enum WindowTypeHint {
  1818 │ │               /**
  1819 │ │                * Normal toplevel window.
  1820 │ │                */
  1821 │ │               NORMAL,
  1822 │ │               /**
  1823 │ │                * Dialog window.
  1824 │ │                */
  1825 │ │               DIALOG,
  1826 │ │               /**
  1827 │ │                * Window used to implement a menu; GTK+ uses
  1828 │ │                *  this hint only for torn-off menus, see #GtkTearoffMenuItem.
  1829 │ │                */
  1830 │ │               MENU,
  1831 │ │               /**
  1832 │ │                * Window used to implement toolbars.
  1833 │ │                */
  1834 │ │               TOOLBAR,
  1835 │ │               /**
  1836 │ │                * Window used to display a splash
  1837 │ │                *  screen during application startup.
  1838 │ │                */
  1839 │ │               SPLASHSCREEN,
  1840 │ │               /**
  1841 │ │                * Utility windows which are not detached
  1842 │ │                *  toolbars or dialogs.
  1843 │ │                */
  1844 │ │               UTILITY,
  1845 │ │               /**
  1846 │ │                * Used for creating dock or panel windows.
  1847 │ │                */
  1848 │ │               DOCK,
  1849 │ │               /**
  1850 │ │                * Used for creating the desktop background
  1851 │ │                *  window.
  1852 │ │                */
  1853 │ │               DESKTOP,
  1854 │ │               /**
  1855 │ │                * A menu that belongs to a menubar.
  1856 │ │                */
  1857 │ │               DROPDOWN_MENU,
  1858 │ │               /**
  1859 │ │                * A menu that does not belong to a menubar,
  1860 │ │                *  e.g. a context menu.
  1861 │ │                */
  1862 │ │               POPUP_MENU,
  1863 │ │               /**
  1864 │ │                * A tooltip.
  1865 │ │                */
  1866 │ │               TOOLTIP,
  1867 │ │               /**
  1868 │ │                * A notification - typically a “bubble”
  1869 │ │                *  that belongs to a status icon.
  1870 │ │                */
  1871 │ │               NOTIFICATION,
  1872 │ │               /**
  1873 │ │                * A popup from a combo box.
  1874 │ │                */
  1875 │ │               COMBO,
  1876 │ │               /**
  1877 │ │                * A window that is used to implement a DND cursor.
  1878 │ │                */
  1879 │ │               DND,
  1880 │ │           }
  1881 │ │           /**
  1882 │ │            * `GDK_INPUT_OUTPUT` windows are the standard kind of window you might expect.
  1883 │ │            * Such windows receive events and are also displayed on screen.
  1884 │ │            * `GDK_INPUT_ONLY` windows are invisible; they are usually placed above other
  1885 │ │            * windows in order to trap or filter the events. You can’t draw on
  1886 │ │            * `GDK_INPUT_ONLY` windows.
  1887 │ │            */
  1888 │ │   
  1889 │ │           /**
  1890 │ │            * `GDK_INPUT_OUTPUT` windows are the standard kind of window you might expect.
  1891 │ │            * Such windows receive events and are also displayed on screen.
  1892 │ │            * `GDK_INPUT_ONLY` windows are invisible; they are usually placed above other
  1893 │ │            * windows in order to trap or filter the events. You can’t draw on
  1894 │ │            * `GDK_INPUT_ONLY` windows.
  1895 │ │            */
  1896 │ │           export namespace WindowWindowClass {
  1897 │ │               export const $gtype: GObject.GType<WindowWindowClass>;
  1898 │ │           }
  1899 │ │   
  1900 │ │           enum WindowWindowClass {
  1901 │ │               /**
  1902 │ │                * window for graphics and events
  1903 │ │                */
  1904 │ │               INPUT_OUTPUT,
  1905 │ │               /**
  1906 │ │                * window for events only
  1907 │ │                */
  1908 │ │               INPUT_ONLY,
  1909 │ │           }
  1910 │ │           /**
  1911 │ │            * The middle button.
  1912 │ │            */
  1913 │ │           const BUTTON_MIDDLE: number;
  1914 │ │           /**
  1915 │ │            * The primary button. This is typically the left mouse button, or the
  1916 │ │            * right button in a left-handed setup.
  1917 │ │            */
  1918 │ │           const BUTTON_PRIMARY: number;
  1919 │ │           /**
  1920 │ │            * The secondary button. This is typically the right mouse button, or the
  1921 │ │            * left button in a left-handed setup.
  1922 │ │            */
  1923 │ │           const BUTTON_SECONDARY: number;
  1924 │ │           /**
  1925 │ │            * Represents the current time, and can be used anywhere a time is expected.
  1926 │ │            */
  1927 │ │           const CURRENT_TIME: number;
  1928 │ │           /**
  1929 │ │            * Use this macro as the return value for continuing the propagation of
  1930 │ │            * an event handler.
  1931 │ │            */
  1932 │ │           const EVENT_PROPAGATE: boolean;
  1933 │ │           /**
  1934 │ │            * Use this macro as the return value for stopping the propagation of
  1935 │ │            * an event handler.
  1936 │ │            */
  1937 │ │           const EVENT_STOP: boolean;
  1938 │ │           const KEY_0: number;
  1939 │ │           const KEY_1: number;
  1940 │ │           const KEY_2: number;
  1941 │ │           const KEY_3: number;
  1942 │ │           const KEY_3270_AltCursor: number;
  1943 │ │           const KEY_3270_Attn: number;
  1944 │ │           const KEY_3270_BackTab: number;
  1945 │ │           const KEY_3270_ChangeScreen: number;
  1946 │ │           const KEY_3270_Copy: number;
  1947 │ │           const KEY_3270_CursorBlink: number;
  1948 │ │           const KEY_3270_CursorSelect: number;
  1949 │ │           const KEY_3270_DeleteWord: number;
  1950 │ │           const KEY_3270_Duplicate: number;
  1951 │ │           const KEY_3270_Enter: number;
  1952 │ │           const KEY_3270_EraseEOF: number;
  1953 │ │           const KEY_3270_EraseInput: number;
  1954 │ │           const KEY_3270_ExSelect: number;
  1955 │ │           const KEY_3270_FieldMark: number;
  1956 │ │           const KEY_3270_Ident: number;
  1957 │ │           const KEY_3270_Jump: number;
  1958 │ │           const KEY_3270_KeyClick: number;
  1959 │ │           const KEY_3270_Left2: number;
  1960 │ │           const KEY_3270_PA1: number;
  1961 │ │           const KEY_3270_PA2: number;
  1962 │ │           const KEY_3270_PA3: number;
  1963 │ │           const KEY_3270_Play: number;
  1964 │ │           const KEY_3270_PrintScreen: number;
  1965 │ │           const KEY_3270_Quit: number;
  1966 │ │           const KEY_3270_Record: number;
  1967 │ │           const KEY_3270_Reset: number;
  1968 │ │           const KEY_3270_Right2: number;
  1969 │ │           const KEY_3270_Rule: number;
  1970 │ │           const KEY_3270_Setup: number;
  1971 │ │           const KEY_3270_Test: number;
  1972 │ │           const KEY_4: number;
  1973 │ │           const KEY_5: number;
  1974 │ │           const KEY_6: number;
  1975 │ │           const KEY_7: number;
  1976 │ │           const KEY_8: number;
  1977 │ │           const KEY_9: number;
  1978 │ │           const KEY_A: number;
  1979 │ │           const KEY_AE: number;
  1980 │ │           const KEY_Aacute: number;
  1981 │ │           const KEY_Abelowdot: number;
  1982 │ │           const KEY_Abreve: number;
  1983 │ │           const KEY_Abreveacute: number;
  1984 │ │           const KEY_Abrevebelowdot: number;
  1985 │ │           const KEY_Abrevegrave: number;
  1986 │ │           const KEY_Abrevehook: number;
  1987 │ │           const KEY_Abrevetilde: number;
  1988 │ │           const KEY_AccessX_Enable: number;
  1989 │ │           const KEY_AccessX_Feedback_Enable: number;
  1990 │ │           const KEY_Acircumflex: number;
  1991 │ │           const KEY_Acircumflexacute: number;
  1992 │ │           const KEY_Acircumflexbelowdot: number;
  1993 │ │           const KEY_Acircumflexgrave: number;
  1994 │ │           const KEY_Acircumflexhook: number;
  1995 │ │           const KEY_Acircumflextilde: number;
  1996 │ │           const KEY_AddFavorite: number;
  1997 │ │           const KEY_Adiaeresis: number;
  1998 │ │           const KEY_Agrave: number;
  1999 │ │           const KEY_Ahook: number;
  2000 │ │           const KEY_Alt_L: number;
  2001 │ │           const KEY_Alt_R: number;
  2002 │ │           const KEY_Amacron: number;
  2003 │ │           const KEY_Aogonek: number;
  2004 │ │           const KEY_ApplicationLeft: number;
  2005 │ │           const KEY_ApplicationRight: number;
  2006 │ │           const KEY_Arabic_0: number;
  2007 │ │           const KEY_Arabic_1: number;
  2008 │ │           const KEY_Arabic_2: number;
  2009 │ │           const KEY_Arabic_3: number;
  2010 │ │           const KEY_Arabic_4: number;
  2011 │ │           const KEY_Arabic_5: number;
  2012 │ │           const KEY_Arabic_6: number;
  2013 │ │           const KEY_Arabic_7: number;
  2014 │ │           const KEY_Arabic_8: number;
  2015 │ │           const KEY_Arabic_9: number;
  2016 │ │           const KEY_Arabic_ain: number;
  2017 │ │           const KEY_Arabic_alef: number;
  2018 │ │           const KEY_Arabic_alefmaksura: number;
  2019 │ │           const KEY_Arabic_beh: number;
  2020 │ │           const KEY_Arabic_comma: number;
  2021 │ │           const KEY_Arabic_dad: number;
  2022 │ │           const KEY_Arabic_dal: number;
  2023 │ │           const KEY_Arabic_damma: number;
  2024 │ │           const KEY_Arabic_dammatan: number;
  2025 │ │           const KEY_Arabic_ddal: number;
  2026 │ │           const KEY_Arabic_farsi_yeh: number;
  2027 │ │           const KEY_Arabic_fatha: number;
  2028 │ │           const KEY_Arabic_fathatan: number;
  2029 │ │           const KEY_Arabic_feh: number;
  2030 │ │           const KEY_Arabic_fullstop: number;
  2031 │ │           const KEY_Arabic_gaf: number;
  2032 │ │           const KEY_Arabic_ghain: number;
  2033 │ │           const KEY_Arabic_ha: number;
  2034 │ │           const KEY_Arabic_hah: number;
  2035 │ │           const KEY_Arabic_hamza: number;
  2036 │ │           const KEY_Arabic_hamza_above: number;
  2037 │ │           const KEY_Arabic_hamza_below: number;
  2038 │ │           const KEY_Arabic_hamzaonalef: number;
  2039 │ │           const KEY_Arabic_hamzaonwaw: number;
  2040 │ │           const KEY_Arabic_hamzaonyeh: number;
  2041 │ │           const KEY_Arabic_hamzaunderalef: number;
  2042 │ │           const KEY_Arabic_heh: number;
  2043 │ │           const KEY_Arabic_heh_doachashmee: number;
  2044 │ │           const KEY_Arabic_heh_goal: number;
  2045 │ │           const KEY_Arabic_jeem: number;
  2046 │ │           const KEY_Arabic_jeh: number;
  2047 │ │           const KEY_Arabic_kaf: number;
  2048 │ │           const KEY_Arabic_kasra: number;
  2049 │ │           const KEY_Arabic_kasratan: number;
  2050 │ │           const KEY_Arabic_keheh: number;
  2051 │ │           const KEY_Arabic_khah: number;
  2052 │ │           const KEY_Arabic_lam: number;
  2053 │ │           const KEY_Arabic_madda_above: number;
  2054 │ │           const KEY_Arabic_maddaonalef: number;
  2055 │ │           const KEY_Arabic_meem: number;
  2056 │ │           const KEY_Arabic_noon: number;
  2057 │ │           const KEY_Arabic_noon_ghunna: number;
  2058 │ │           const KEY_Arabic_peh: number;
  2059 │ │           const KEY_Arabic_percent: number;
  2060 │ │           const KEY_Arabic_qaf: number;
  2061 │ │           const KEY_Arabic_question_mark: number;
  2062 │ │           const KEY_Arabic_ra: number;
  2063 │ │           const KEY_Arabic_rreh: number;
  2064 │ │           const KEY_Arabic_sad: number;
  2065 │ │           const KEY_Arabic_seen: number;
  2066 │ │           const KEY_Arabic_semicolon: number;
  2067 │ │           const KEY_Arabic_shadda: number;
  2068 │ │           const KEY_Arabic_sheen: number;
  2069 │ │           const KEY_Arabic_sukun: number;
  2070 │ │           const KEY_Arabic_superscript_alef: number;
  2071 │ │           const KEY_Arabic_switch: number;
  2072 │ │           const KEY_Arabic_tah: number;
  2073 │ │           const KEY_Arabic_tatweel: number;
  2074 │ │           const KEY_Arabic_tcheh: number;
  2075 │ │           const KEY_Arabic_teh: number;
  2076 │ │           const KEY_Arabic_tehmarbuta: number;
  2077 │ │           const KEY_Arabic_thal: number;
  2078 │ │           const KEY_Arabic_theh: number;
  2079 │ │           const KEY_Arabic_tteh: number;
  2080 │ │           const KEY_Arabic_veh: number;
  2081 │ │           const KEY_Arabic_waw: number;
  2082 │ │           const KEY_Arabic_yeh: number;
  2083 │ │           const KEY_Arabic_yeh_baree: number;
  2084 │ │           const KEY_Arabic_zah: number;
  2085 │ │           const KEY_Arabic_zain: number;
  2086 │ │           const KEY_Aring: number;
  2087 │ │           const KEY_Armenian_AT: number;
  2088 │ │           const KEY_Armenian_AYB: number;
  2089 │ │           const KEY_Armenian_BEN: number;
  2090 │ │           const KEY_Armenian_CHA: number;
  2091 │ │           const KEY_Armenian_DA: number;
  2092 │ │           const KEY_Armenian_DZA: number;
  2093 │ │           const KEY_Armenian_E: number;
  2094 │ │           const KEY_Armenian_FE: number;
  2095 │ │           const KEY_Armenian_GHAT: number;
  2096 │ │           const KEY_Armenian_GIM: number;
  2097 │ │           const KEY_Armenian_HI: number;
  2098 │ │           const KEY_Armenian_HO: number;
  2099 │ │           const KEY_Armenian_INI: number;
  2100 │ │           const KEY_Armenian_JE: number;
  2101 │ │           const KEY_Armenian_KE: number;
  2102 │ │           const KEY_Armenian_KEN: number;
  2103 │ │           const KEY_Armenian_KHE: number;
  2104 │ │           const KEY_Armenian_LYUN: number;
  2105 │ │           const KEY_Armenian_MEN: number;
  2106 │ │           const KEY_Armenian_NU: number;
  2107 │ │           const KEY_Armenian_O: number;
  2108 │ │           const KEY_Armenian_PE: number;
  2109 │ │           const KEY_Armenian_PYUR: number;
  2110 │ │           const KEY_Armenian_RA: number;
  2111 │ │           const KEY_Armenian_RE: number;
  2112 │ │           const KEY_Armenian_SE: number;
  2113 │ │           const KEY_Armenian_SHA: number;
  2114 │ │           const KEY_Armenian_TCHE: number;
  2115 │ │           const KEY_Armenian_TO: number;
  2116 │ │           const KEY_Armenian_TSA: number;
  2117 │ │           const KEY_Armenian_TSO: number;
  2118 │ │           const KEY_Armenian_TYUN: number;
  2119 │ │           const KEY_Armenian_VEV: number;
  2120 │ │           const KEY_Armenian_VO: number;
  2121 │ │           const KEY_Armenian_VYUN: number;
  2122 │ │           const KEY_Armenian_YECH: number;
  2123 │ │           const KEY_Armenian_ZA: number;
  2124 │ │           const KEY_Armenian_ZHE: number;
  2125 │ │           const KEY_Armenian_accent: number;
  2126 │ │           const KEY_Armenian_amanak: number;
  2127 │ │           const KEY_Armenian_apostrophe: number;
  2128 │ │           const KEY_Armenian_at: number;
  2129 │ │           const KEY_Armenian_ayb: number;
  2130 │ │           const KEY_Armenian_ben: number;
  2131 │ │           const KEY_Armenian_but: number;
  2132 │ │           const KEY_Armenian_cha: number;
  2133 │ │           const KEY_Armenian_da: number;
  2134 │ │           const KEY_Armenian_dza: number;
  2135 │ │           const KEY_Armenian_e: number;
  2136 │ │           const KEY_Armenian_exclam: number;
  2137 │ │           const KEY_Armenian_fe: number;
  2138 │ │           const KEY_Armenian_full_stop: number;
  2139 │ │           const KEY_Armenian_ghat: number;
  2140 │ │           const KEY_Armenian_gim: number;
  2141 │ │           const KEY_Armenian_hi: number;
  2142 │ │           const KEY_Armenian_ho: number;
  2143 │ │           const KEY_Armenian_hyphen: number;
  2144 │ │           const KEY_Armenian_ini: number;
  2145 │ │           const KEY_Armenian_je: number;
  2146 │ │           const KEY_Armenian_ke: number;
  2147 │ │           const KEY_Armenian_ken: number;
  2148 │ │           const KEY_Armenian_khe: number;
  2149 │ │           const KEY_Armenian_ligature_ew: number;
  2150 │ │           const KEY_Armenian_lyun: number;
  2151 │ │           const KEY_Armenian_men: number;
  2152 │ │           const KEY_Armenian_nu: number;
  2153 │ │           const KEY_Armenian_o: number;
  2154 │ │           const KEY_Armenian_paruyk: number;
  2155 │ │           const KEY_Armenian_pe: number;
  2156 │ │           const KEY_Armenian_pyur: number;
  2157 │ │           const KEY_Armenian_question: number;
  2158 │ │           const KEY_Armenian_ra: number;
  2159 │ │           const KEY_Armenian_re: number;
  2160 │ │           const KEY_Armenian_se: number;
  2161 │ │           const KEY_Armenian_separation_mark: number;
  2162 │ │           const KEY_Armenian_sha: number;
  2163 │ │           const KEY_Armenian_shesht: number;
  2164 │ │           const KEY_Armenian_tche: number;
  2165 │ │           const KEY_Armenian_to: number;
  2166 │ │           const KEY_Armenian_tsa: number;
  2167 │ │           const KEY_Armenian_tso: number;
  2168 │ │           const KEY_Armenian_tyun: number;
  2169 │ │           const KEY_Armenian_verjaket: number;
  2170 │ │           const KEY_Armenian_vev: number;
  2171 │ │           const KEY_Armenian_vo: number;
  2172 │ │           const KEY_Armenian_vyun: number;
  2173 │ │           const KEY_Armenian_yech: number;
  2174 │ │           const KEY_Armenian_yentamna: number;
  2175 │ │           const KEY_Armenian_za: number;
  2176 │ │           const KEY_Armenian_zhe: number;
  2177 │ │           const KEY_Atilde: number;
  2178 │ │           const KEY_AudibleBell_Enable: number;
  2179 │ │           const KEY_AudioCycleTrack: number;
  2180 │ │           const KEY_AudioForward: number;
  2181 │ │           const KEY_AudioLowerVolume: number;
  2182 │ │           const KEY_AudioMedia: number;
  2183 │ │           const KEY_AudioMicMute: number;
  2184 │ │           const KEY_AudioMute: number;
  2185 │ │           const KEY_AudioNext: number;
  2186 │ │           const KEY_AudioPause: number;
  2187 │ │           const KEY_AudioPlay: number;
  2188 │ │           const KEY_AudioPreset: number;
  2189 │ │           const KEY_AudioPrev: number;
  2190 │ │           const KEY_AudioRaiseVolume: number;
  2191 │ │           const KEY_AudioRandomPlay: number;
  2192 │ │           const KEY_AudioRecord: number;
  2193 │ │           const KEY_AudioRepeat: number;
  2194 │ │           const KEY_AudioRewind: number;
  2195 │ │           const KEY_AudioStop: number;
  2196 │ │           const KEY_Away: number;
  2197 │ │           const KEY_B: number;
  2198 │ │           const KEY_Babovedot: number;
  2199 │ │           const KEY_Back: number;
  2200 │ │           const KEY_BackForward: number;
  2201 │ │           const KEY_BackSpace: number;
  2202 │ │           const KEY_Battery: number;
  2203 │ │           const KEY_Begin: number;
  2204 │ │           const KEY_Blue: number;
  2205 │ │           const KEY_Bluetooth: number;
  2206 │ │           const KEY_Book: number;
  2207 │ │           const KEY_BounceKeys_Enable: number;
  2208 │ │           const KEY_Break: number;
  2209 │ │           const KEY_BrightnessAdjust: number;
  2210 │ │           const KEY_Byelorussian_SHORTU: number;
  2211 │ │           const KEY_Byelorussian_shortu: number;
  2212 │ │           const KEY_C: number;
  2213 │ │           const KEY_CD: number;
  2214 │ │           const KEY_CH: number;
  2215 │ │           const KEY_C_H: number;
  2216 │ │           const KEY_C_h: number;
  2217 │ │           const KEY_Cabovedot: number;
  2218 │ │           const KEY_Cacute: number;
  2219 │ │           const KEY_Calculator: number;
  2220 │ │           const KEY_Calendar: number;
  2221 │ │           const KEY_Cancel: number;
  2222 │ │           const KEY_Caps_Lock: number;
  2223 │ │           const KEY_Ccaron: number;
  2224 │ │           const KEY_Ccedilla: number;
  2225 │ │           const KEY_Ccircumflex: number;
  2226 │ │           const KEY_Ch: number;
  2227 │ │           const KEY_Clear: number;
  2228 │ │           const KEY_ClearGrab: number;
  2229 │ │           const KEY_Close: number;
  2230 │ │           const KEY_Codeinput: number;
  2231 │ │           const KEY_ColonSign: number;
  2232 │ │           const KEY_Community: number;
  2233 │ │           const KEY_ContrastAdjust: number;
  2234 │ │           const KEY_Control_L: number;
  2235 │ │           const KEY_Control_R: number;
  2236 │ │           const KEY_Copy: number;
  2237 │ │           const KEY_CruzeiroSign: number;
  2238 │ │           const KEY_Cut: number;
  2239 │ │           const KEY_CycleAngle: number;
  2240 │ │           const KEY_Cyrillic_A: number;
  2241 │ │           const KEY_Cyrillic_BE: number;
  2242 │ │           const KEY_Cyrillic_CHE: number;
  2243 │ │           const KEY_Cyrillic_CHE_descender: number;
  2244 │ │           const KEY_Cyrillic_CHE_vertstroke: number;
  2245 │ │           const KEY_Cyrillic_DE: number;
  2246 │ │           const KEY_Cyrillic_DZHE: number;
  2247 │ │           const KEY_Cyrillic_E: number;
  2248 │ │           const KEY_Cyrillic_EF: number;
  2249 │ │           const KEY_Cyrillic_EL: number;
  2250 │ │           const KEY_Cyrillic_EM: number;
  2251 │ │           const KEY_Cyrillic_EN: number;
  2252 │ │           const KEY_Cyrillic_EN_descender: number;
  2253 │ │           const KEY_Cyrillic_ER: number;
  2254 │ │           const KEY_Cyrillic_ES: number;
  2255 │ │           const KEY_Cyrillic_GHE: number;
  2256 │ │           const KEY_Cyrillic_GHE_bar: number;
  2257 │ │           const KEY_Cyrillic_HA: number;
  2258 │ │           const KEY_Cyrillic_HARDSIGN: number;
  2259 │ │           const KEY_Cyrillic_HA_descender: number;
  2260 │ │           const KEY_Cyrillic_I: number;
  2261 │ │           const KEY_Cyrillic_IE: number;
  2262 │ │           const KEY_Cyrillic_IO: number;
  2263 │ │           const KEY_Cyrillic_I_macron: number;
  2264 │ │           const KEY_Cyrillic_JE: number;
  2265 │ │           const KEY_Cyrillic_KA: number;
  2266 │ │           const KEY_Cyrillic_KA_descender: number;
  2267 │ │           const KEY_Cyrillic_KA_vertstroke: number;
  2268 │ │           const KEY_Cyrillic_LJE: number;
  2269 │ │           const KEY_Cyrillic_NJE: number;
  2270 │ │           const KEY_Cyrillic_O: number;
  2271 │ │           const KEY_Cyrillic_O_bar: number;
  2272 │ │           const KEY_Cyrillic_PE: number;
  2273 │ │           const KEY_Cyrillic_SCHWA: number;
  2274 │ │           const KEY_Cyrillic_SHA: number;
  2275 │ │           const KEY_Cyrillic_SHCHA: number;
  2276 │ │           const KEY_Cyrillic_SHHA: number;
  2277 │ │           const KEY_Cyrillic_SHORTI: number;
  2278 │ │           const KEY_Cyrillic_SOFTSIGN: number;
  2279 │ │           const KEY_Cyrillic_TE: number;
  2280 │ │           const KEY_Cyrillic_TSE: number;
  2281 │ │           const KEY_Cyrillic_U: number;
  2282 │ │           const KEY_Cyrillic_U_macron: number;
  2283 │ │           const KEY_Cyrillic_U_straight: number;
  2284 │ │           const KEY_Cyrillic_U_straight_bar: number;
  2285 │ │           const KEY_Cyrillic_VE: number;
  2286 │ │           const KEY_Cyrillic_YA: number;
  2287 │ │           const KEY_Cyrillic_YERU: number;
  2288 │ │           const KEY_Cyrillic_YU: number;
  2289 │ │           const KEY_Cyrillic_ZE: number;
  2290 │ │           const KEY_Cyrillic_ZHE: number;
  2291 │ │           const KEY_Cyrillic_ZHE_descender: number;
  2292 │ │           const KEY_Cyrillic_a: number;
  2293 │ │           const KEY_Cyrillic_be: number;
  2294 │ │           const KEY_Cyrillic_che: number;
  2295 │ │           const KEY_Cyrillic_che_descender: number;
  2296 │ │           const KEY_Cyrillic_che_vertstroke: number;
  2297 │ │           const KEY_Cyrillic_de: number;
  2298 │ │           const KEY_Cyrillic_dzhe: number;
  2299 │ │           const KEY_Cyrillic_e: number;
  2300 │ │           const KEY_Cyrillic_ef: number;
  2301 │ │           const KEY_Cyrillic_el: number;
  2302 │ │           const KEY_Cyrillic_em: number;
  2303 │ │           const KEY_Cyrillic_en: number;
  2304 │ │           const KEY_Cyrillic_en_descender: number;
  2305 │ │           const KEY_Cyrillic_er: number;
  2306 │ │           const KEY_Cyrillic_es: number;
  2307 │ │           const KEY_Cyrillic_ghe: number;
  2308 │ │           const KEY_Cyrillic_ghe_bar: number;
  2309 │ │           const KEY_Cyrillic_ha: number;
  2310 │ │           const KEY_Cyrillic_ha_descender: number;
  2311 │ │           const KEY_Cyrillic_hardsign: number;
  2312 │ │           const KEY_Cyrillic_i: number;
  2313 │ │           const KEY_Cyrillic_i_macron: number;
  2314 │ │           const KEY_Cyrillic_ie: number;
  2315 │ │           const KEY_Cyrillic_io: number;
  2316 │ │           const KEY_Cyrillic_je: number;
  2317 │ │           const KEY_Cyrillic_ka: number;
  2318 │ │           const KEY_Cyrillic_ka_descender: number;
  2319 │ │           const KEY_Cyrillic_ka_vertstroke: number;
  2320 │ │           const KEY_Cyrillic_lje: number;
  2321 │ │           const KEY_Cyrillic_nje: number;
  2322 │ │           const KEY_Cyrillic_o: number;
  2323 │ │           const KEY_Cyrillic_o_bar: number;
  2324 │ │           const KEY_Cyrillic_pe: number;
  2325 │ │           const KEY_Cyrillic_schwa: number;
  2326 │ │           const KEY_Cyrillic_sha: number;
  2327 │ │           const KEY_Cyrillic_shcha: number;
  2328 │ │           const KEY_Cyrillic_shha: number;
  2329 │ │           const KEY_Cyrillic_shorti: number;
  2330 │ │           const KEY_Cyrillic_softsign: number;
  2331 │ │           const KEY_Cyrillic_te: number;
  2332 │ │           const KEY_Cyrillic_tse: number;
  2333 │ │           const KEY_Cyrillic_u: number;
  2334 │ │           const KEY_Cyrillic_u_macron: number;
  2335 │ │           const KEY_Cyrillic_u_straight: number;
  2336 │ │           const KEY_Cyrillic_u_straight_bar: number;
  2337 │ │           const KEY_Cyrillic_ve: number;
  2338 │ │           const KEY_Cyrillic_ya: number;
  2339 │ │           const KEY_Cyrillic_yeru: number;
  2340 │ │           const KEY_Cyrillic_yu: number;
  2341 │ │           const KEY_Cyrillic_ze: number;
  2342 │ │           const KEY_Cyrillic_zhe: number;
  2343 │ │           const KEY_Cyrillic_zhe_descender: number;
  2344 │ │           const KEY_D: number;
  2345 │ │           const KEY_DOS: number;
  2346 │ │           const KEY_Dabovedot: number;
  2347 │ │           const KEY_Dcaron: number;
  2348 │ │           const KEY_Delete: number;
  2349 │ │           const KEY_Display: number;
  2350 │ │           const KEY_Documents: number;
  2351 │ │           const KEY_DongSign: number;
  2352 │ │           const KEY_Down: number;
  2353 │ │           const KEY_Dstroke: number;
  2354 │ │           const KEY_E: number;
  2355 │ │           const KEY_ENG: number;
  2356 │ │           const KEY_ETH: number;
  2357 │ │           const KEY_EZH: number;
  2358 │ │           const KEY_Eabovedot: number;
  2359 │ │           const KEY_Eacute: number;
  2360 │ │           const KEY_Ebelowdot: number;
  2361 │ │           const KEY_Ecaron: number;
  2362 │ │           const KEY_Ecircumflex: number;
  2363 │ │           const KEY_Ecircumflexacute: number;
  2364 │ │           const KEY_Ecircumflexbelowdot: number;
  2365 │ │           const KEY_Ecircumflexgrave: number;
  2366 │ │           const KEY_Ecircumflexhook: number;
  2367 │ │           const KEY_Ecircumflextilde: number;
  2368 │ │           const KEY_EcuSign: number;
  2369 │ │           const KEY_Ediaeresis: number;
  2370 │ │           const KEY_Egrave: number;
  2371 │ │           const KEY_Ehook: number;
  2372 │ │           const KEY_Eisu_Shift: number;
  2373 │ │           const KEY_Eisu_toggle: number;
  2374 │ │           const KEY_Eject: number;
  2375 │ │           const KEY_Emacron: number;
  2376 │ │           const KEY_End: number;
  2377 │ │           const KEY_Eogonek: number;
  2378 │ │           const KEY_Escape: number;
  2379 │ │           const KEY_Eth: number;
  2380 │ │           const KEY_Etilde: number;
  2381 │ │           const KEY_EuroSign: number;
  2382 │ │           const KEY_Excel: number;
  2383 │ │           const KEY_Execute: number;
  2384 │ │           const KEY_Explorer: number;
  2385 │ │           const KEY_F: number;
  2386 │ │           const KEY_F1: number;
  2387 │ │           const KEY_F10: number;
  2388 │ │           const KEY_F11: number;
  2389 │ │           const KEY_F12: number;
  2390 │ │           const KEY_F13: number;
  2391 │ │           const KEY_F14: number;
  2392 │ │           const KEY_F15: number;
  2393 │ │           const KEY_F16: number;
  2394 │ │           const KEY_F17: number;
  2395 │ │           const KEY_F18: number;
  2396 │ │           const KEY_F19: number;
  2397 │ │           const KEY_F2: number;
  2398 │ │           const KEY_F20: number;
  2399 │ │           const KEY_F21: number;
  2400 │ │           const KEY_F22: number;
  2401 │ │           const KEY_F23: number;
  2402 │ │           const KEY_F24: number;
  2403 │ │           const KEY_F25: number;
  2404 │ │           const KEY_F26: number;
  2405 │ │           const KEY_F27: number;
  2406 │ │           const KEY_F28: number;
  2407 │ │           const KEY_F29: number;
  2408 │ │           const KEY_F3: number;
  2409 │ │           const KEY_F30: number;
  2410 │ │           const KEY_F31: number;
  2411 │ │           const KEY_F32: number;
  2412 │ │           const KEY_F33: number;
  2413 │ │           const KEY_F34: number;
  2414 │ │           const KEY_F35: number;
  2415 │ │           const KEY_F4: number;
  2416 │ │           const KEY_F5: number;
  2417 │ │           const KEY_F6: number;
  2418 │ │           const KEY_F7: number;
  2419 │ │           const KEY_F8: number;
  2420 │ │           const KEY_F9: number;
  2421 │ │           const KEY_FFrancSign: number;
  2422 │ │           const KEY_Fabovedot: number;
  2423 │ │           const KEY_Farsi_0: number;
  2424 │ │           const KEY_Farsi_1: number;
  2425 │ │           const KEY_Farsi_2: number;
  2426 │ │           const KEY_Farsi_3: number;
  2427 │ │           const KEY_Farsi_4: number;
  2428 │ │           const KEY_Farsi_5: number;
  2429 │ │           const KEY_Farsi_6: number;
  2430 │ │           const KEY_Farsi_7: number;
  2431 │ │           const KEY_Farsi_8: number;
  2432 │ │           const KEY_Farsi_9: number;
  2433 │ │           const KEY_Farsi_yeh: number;
  2434 │ │           const KEY_Favorites: number;
  2435 │ │           const KEY_Finance: number;
  2436 │ │           const KEY_Find: number;
  2437 │ │           const KEY_First_Virtual_Screen: number;
  2438 │ │           const KEY_Forward: number;
  2439 │ │           const KEY_FrameBack: number;
  2440 │ │           const KEY_FrameForward: number;
  2441 │ │           const KEY_G: number;
  2442 │ │           const KEY_Gabovedot: number;
  2443 │ │           const KEY_Game: number;
  2444 │ │           const KEY_Gbreve: number;
  2445 │ │           const KEY_Gcaron: number;
  2446 │ │           const KEY_Gcedilla: number;
  2447 │ │           const KEY_Gcircumflex: number;
  2448 │ │           const KEY_Georgian_an: number;
  2449 │ │           const KEY_Georgian_ban: number;
  2450 │ │           const KEY_Georgian_can: number;
  2451 │ │           const KEY_Georgian_char: number;
  2452 │ │           const KEY_Georgian_chin: number;
  2453 │ │           const KEY_Georgian_cil: number;
  2454 │ │           const KEY_Georgian_don: number;
  2455 │ │           const KEY_Georgian_en: number;
  2456 │ │           const KEY_Georgian_fi: number;
  2457 │ │           const KEY_Georgian_gan: number;
  2458 │ │           const KEY_Georgian_ghan: number;
  2459 │ │           const KEY_Georgian_hae: number;
  2460 │ │           const KEY_Georgian_har: number;
  2461 │ │           const KEY_Georgian_he: number;
  2462 │ │           const KEY_Georgian_hie: number;
  2463 │ │           const KEY_Georgian_hoe: number;
  2464 │ │           const KEY_Georgian_in: number;
  2465 │ │           const KEY_Georgian_jhan: number;
  2466 │ │           const KEY_Georgian_jil: number;
  2467 │ │           const KEY_Georgian_kan: number;
  2468 │ │           const KEY_Georgian_khar: number;
  2469 │ │           const KEY_Georgian_las: number;
  2470 │ │           const KEY_Georgian_man: number;
  2471 │ │           const KEY_Georgian_nar: number;
  2472 │ │           const KEY_Georgian_on: number;
  2473 │ │           const KEY_Georgian_par: number;
  2474 │ │           const KEY_Georgian_phar: number;
  2475 │ │           const KEY_Georgian_qar: number;
  2476 │ │           const KEY_Georgian_rae: number;
  2477 │ │           const KEY_Georgian_san: number;
  2478 │ │           const KEY_Georgian_shin: number;
  2479 │ │           const KEY_Georgian_tan: number;
  2480 │ │           const KEY_Georgian_tar: number;
  2481 │ │           const KEY_Georgian_un: number;
  2482 │ │           const KEY_Georgian_vin: number;
  2483 │ │           const KEY_Georgian_we: number;
  2484 │ │           const KEY_Georgian_xan: number;
  2485 │ │           const KEY_Georgian_zen: number;
  2486 │ │           const KEY_Georgian_zhar: number;
  2487 │ │           const KEY_Go: number;
  2488 │ │           const KEY_Greek_ALPHA: number;
  2489 │ │           const KEY_Greek_ALPHAaccent: number;
  2490 │ │           const KEY_Greek_BETA: number;
  2491 │ │           const KEY_Greek_CHI: number;
  2492 │ │           const KEY_Greek_DELTA: number;
  2493 │ │           const KEY_Greek_EPSILON: number;
  2494 │ │           const KEY_Greek_EPSILONaccent: number;
  2495 │ │           const KEY_Greek_ETA: number;
  2496 │ │           const KEY_Greek_ETAaccent: number;
  2497 │ │           const KEY_Greek_GAMMA: number;
  2498 │ │           const KEY_Greek_IOTA: number;
  2499 │ │           const KEY_Greek_IOTAaccent: number;
  2500 │ │           const KEY_Greek_IOTAdiaeresis: number;
  2501 │ │           const KEY_Greek_IOTAdieresis: number;
  2502 │ │           const KEY_Greek_KAPPA: number;
  2503 │ │           const KEY_Greek_LAMBDA: number;
  2504 │ │           const KEY_Greek_LAMDA: number;
  2505 │ │           const KEY_Greek_MU: number;
  2506 │ │           const KEY_Greek_NU: number;
  2507 │ │           const KEY_Greek_OMEGA: number;
  2508 │ │           const KEY_Greek_OMEGAaccent: number;
  2509 │ │           const KEY_Greek_OMICRON: number;
  2510 │ │           const KEY_Greek_OMICRONaccent: number;
  2511 │ │           const KEY_Greek_PHI: number;
  2512 │ │           const KEY_Greek_PI: number;
  2513 │ │           const KEY_Greek_PSI: number;
  2514 │ │           const KEY_Greek_RHO: number;
  2515 │ │           const KEY_Greek_SIGMA: number;
  2516 │ │           const KEY_Greek_TAU: number;
  2517 │ │           const KEY_Greek_THETA: number;
  2518 │ │           const KEY_Greek_UPSILON: number;
  2519 │ │           const KEY_Greek_UPSILONaccent: number;
  2520 │ │           const KEY_Greek_UPSILONdieresis: number;
  2521 │ │           const KEY_Greek_XI: number;
  2522 │ │           const KEY_Greek_ZETA: number;
  2523 │ │           const KEY_Greek_accentdieresis: number;
  2524 │ │           const KEY_Greek_alpha: number;
  2525 │ │           const KEY_Greek_alphaaccent: number;
  2526 │ │           const KEY_Greek_beta: number;
  2527 │ │           const KEY_Greek_chi: number;
  2528 │ │           const KEY_Greek_delta: number;
  2529 │ │           const KEY_Greek_epsilon: number;
  2530 │ │           const KEY_Greek_epsilonaccent: number;
  2531 │ │           const KEY_Greek_eta: number;
  2532 │ │           const KEY_Greek_etaaccent: number;
  2533 │ │           const KEY_Greek_finalsmallsigma: number;
  2534 │ │           const KEY_Greek_gamma: number;
  2535 │ │           const KEY_Greek_horizbar: number;
  2536 │ │           const KEY_Greek_iota: number;
  2537 │ │           const KEY_Greek_iotaaccent: number;
  2538 │ │           const KEY_Greek_iotaaccentdieresis: number;
  2539 │ │           const KEY_Greek_iotadieresis: number;
  2540 │ │           const KEY_Greek_kappa: number;
  2541 │ │           const KEY_Greek_lambda: number;
  2542 │ │           const KEY_Greek_lamda: number;
  2543 │ │           const KEY_Greek_mu: number;
  2544 │ │           const KEY_Greek_nu: number;
  2545 │ │           const KEY_Greek_omega: number;
  2546 │ │           const KEY_Greek_omegaaccent: number;
  2547 │ │           const KEY_Greek_omicron: number;
  2548 │ │           const KEY_Greek_omicronaccent: number;
  2549 │ │           const KEY_Greek_phi: number;
  2550 │ │           const KEY_Greek_pi: number;
  2551 │ │           const KEY_Greek_psi: number;
  2552 │ │           const KEY_Greek_rho: number;
  2553 │ │           const KEY_Greek_sigma: number;
  2554 │ │           const KEY_Greek_switch: number;
  2555 │ │           const KEY_Greek_tau: number;
  2556 │ │           const KEY_Greek_theta: number;
  2557 │ │           const KEY_Greek_upsilon: number;
  2558 │ │           const KEY_Greek_upsilonaccent: number;
  2559 │ │           const KEY_Greek_upsilonaccentdieresis: number;
  2560 │ │           const KEY_Greek_upsilondieresis: number;
  2561 │ │           const KEY_Greek_xi: number;
  2562 │ │           const KEY_Greek_zeta: number;
  2563 │ │           const KEY_Green: number;
  2564 │ │           const KEY_H: number;
  2565 │ │           const KEY_Hangul: number;
  2566 │ │           const KEY_Hangul_A: number;
  2567 │ │           const KEY_Hangul_AE: number;
  2568 │ │           const KEY_Hangul_AraeA: number;
  2569 │ │           const KEY_Hangul_AraeAE: number;
  2570 │ │           const KEY_Hangul_Banja: number;
  2571 │ │           const KEY_Hangul_Cieuc: number;
  2572 │ │           const KEY_Hangul_Codeinput: number;
  2573 │ │           const KEY_Hangul_Dikeud: number;
  2574 │ │           const KEY_Hangul_E: number;
  2575 │ │           const KEY_Hangul_EO: number;
  2576 │ │           const KEY_Hangul_EU: number;
  2577 │ │           const KEY_Hangul_End: number;
  2578 │ │           const KEY_Hangul_Hanja: number;
  2579 │ │           const KEY_Hangul_Hieuh: number;
  2580 │ │           const KEY_Hangul_I: number;
  2581 │ │           const KEY_Hangul_Ieung: number;
  2582 │ │           const KEY_Hangul_J_Cieuc: number;
  2583 │ │           const KEY_Hangul_J_Dikeud: number;
  2584 │ │           const KEY_Hangul_J_Hieuh: number;
  2585 │ │           const KEY_Hangul_J_Ieung: number;
  2586 │ │           const KEY_Hangul_J_Jieuj: number;
  2587 │ │           const KEY_Hangul_J_Khieuq: number;
  2588 │ │           const KEY_Hangul_J_Kiyeog: number;
  2589 │ │           const KEY_Hangul_J_KiyeogSios: number;
  2590 │ │           const KEY_Hangul_J_KkogjiDalrinIeung: number;
  2591 │ │           const KEY_Hangul_J_Mieum: number;
  2592 │ │           const KEY_Hangul_J_Nieun: number;
  2593 │ │           const KEY_Hangul_J_NieunHieuh: number;
  2594 │ │           const KEY_Hangul_J_NieunJieuj: number;
  2595 │ │           const KEY_Hangul_J_PanSios: number;
  2596 │ │           const KEY_Hangul_J_Phieuf: number;
  2597 │ │           const KEY_Hangul_J_Pieub: number;
  2598 │ │           const KEY_Hangul_J_PieubSios: number;
  2599 │ │           const KEY_Hangul_J_Rieul: number;
  2600 │ │           const KEY_Hangul_J_RieulHieuh: number;
  2601 │ │           const KEY_Hangul_J_RieulKiyeog: number;
  2602 │ │           const KEY_Hangul_J_RieulMieum: number;
  2603 │ │           const KEY_Hangul_J_RieulPhieuf: number;
  2604 │ │           const KEY_Hangul_J_RieulPieub: number;
  2605 │ │           const KEY_Hangul_J_RieulSios: number;
  2606 │ │           const KEY_Hangul_J_RieulTieut: number;
  2607 │ │           const KEY_Hangul_J_Sios: number;
  2608 │ │           const KEY_Hangul_J_SsangKiyeog: number;
  2609 │ │           const KEY_Hangul_J_SsangSios: number;
  2610 │ │           const KEY_Hangul_J_Tieut: number;
  2611 │ │           const KEY_Hangul_J_YeorinHieuh: number;
  2612 │ │           const KEY_Hangul_Jamo: number;
  2613 │ │           const KEY_Hangul_Jeonja: number;
  2614 │ │           const KEY_Hangul_Jieuj: number;
  2615 │ │           const KEY_Hangul_Khieuq: number;
  2616 │ │           const KEY_Hangul_Kiyeog: number;
  2617 │ │           const KEY_Hangul_KiyeogSios: number;
  2618 │ │           const KEY_Hangul_KkogjiDalrinIeung: number;
  2619 │ │           const KEY_Hangul_Mieum: number;
  2620 │ │           const KEY_Hangul_MultipleCandidate: number;
  2621 │ │           const KEY_Hangul_Nieun: number;
  2622 │ │           const KEY_Hangul_NieunHieuh: number;
  2623 │ │           const KEY_Hangul_NieunJieuj: number;
  2624 │ │           const KEY_Hangul_O: number;
  2625 │ │           const KEY_Hangul_OE: number;
  2626 │ │           const KEY_Hangul_PanSios: number;
  2627 │ │           const KEY_Hangul_Phieuf: number;
  2628 │ │           const KEY_Hangul_Pieub: number;
  2629 │ │           const KEY_Hangul_PieubSios: number;
  2630 │ │           const KEY_Hangul_PostHanja: number;
  2631 │ │           const KEY_Hangul_PreHanja: number;
  2632 │ │           const KEY_Hangul_PreviousCandidate: number;
  2633 │ │           const KEY_Hangul_Rieul: number;
  2634 │ │           const KEY_Hangul_RieulHieuh: number;
  2635 │ │           const KEY_Hangul_RieulKiyeog: number;
  2636 │ │           const KEY_Hangul_RieulMieum: number;
  2637 │ │           const KEY_Hangul_RieulPhieuf: number;
  2638 │ │           const KEY_Hangul_RieulPieub: number;
  2639 │ │           const KEY_Hangul_RieulSios: number;
  2640 │ │           const KEY_Hangul_RieulTieut: number;
  2641 │ │           const KEY_Hangul_RieulYeorinHieuh: number;
  2642 │ │           const KEY_Hangul_Romaja: number;
  2643 │ │           const KEY_Hangul_SingleCandidate: number;
  2644 │ │           const KEY_Hangul_Sios: number;
  2645 │ │           const KEY_Hangul_Special: number;
  2646 │ │           const KEY_Hangul_SsangDikeud: number;
  2647 │ │           const KEY_Hangul_SsangJieuj: number;
  2648 │ │           const KEY_Hangul_SsangKiyeog: number;
  2649 │ │           const KEY_Hangul_SsangPieub: number;
  2650 │ │           const KEY_Hangul_SsangSios: number;
  2651 │ │           const KEY_Hangul_Start: number;
  2652 │ │           const KEY_Hangul_SunkyeongeumMieum: number;
  2653 │ │           const KEY_Hangul_SunkyeongeumPhieuf: number;
  2654 │ │           const KEY_Hangul_SunkyeongeumPieub: number;
  2655 │ │           const KEY_Hangul_Tieut: number;
  2656 │ │           const KEY_Hangul_U: number;
  2657 │ │           const KEY_Hangul_WA: number;
  2658 │ │           const KEY_Hangul_WAE: number;
  2659 │ │           const KEY_Hangul_WE: number;
  2660 │ │           const KEY_Hangul_WEO: number;
  2661 │ │           const KEY_Hangul_WI: number;
  2662 │ │           const KEY_Hangul_YA: number;
  2663 │ │           const KEY_Hangul_YAE: number;
  2664 │ │           const KEY_Hangul_YE: number;
  2665 │ │           const KEY_Hangul_YEO: number;
  2666 │ │           const KEY_Hangul_YI: number;
  2667 │ │           const KEY_Hangul_YO: number;
  2668 │ │           const KEY_Hangul_YU: number;
  2669 │ │           const KEY_Hangul_YeorinHieuh: number;
  2670 │ │           const KEY_Hangul_switch: number;
  2671 │ │           const KEY_Hankaku: number;
  2672 │ │           const KEY_Hcircumflex: number;
  2673 │ │           const KEY_Hebrew_switch: number;
  2674 │ │           const KEY_Help: number;
  2675 │ │           const KEY_Henkan: number;
  2676 │ │           const KEY_Henkan_Mode: number;
  2677 │ │           const KEY_Hibernate: number;
  2678 │ │           const KEY_Hiragana: number;
  2679 │ │           const KEY_Hiragana_Katakana: number;
  2680 │ │           const KEY_History: number;
  2681 │ │           const KEY_Home: number;
  2682 │ │           const KEY_HomePage: number;
  2683 │ │           const KEY_HotLinks: number;
  2684 │ │           const KEY_Hstroke: number;
  2685 │ │           const KEY_Hyper_L: number;
  2686 │ │           const KEY_Hyper_R: number;
  2687 │ │           const KEY_I: number;
  2688 │ │           const KEY_ISO_Center_Object: number;
  2689 │ │           const KEY_ISO_Continuous_Underline: number;
  2690 │ │           const KEY_ISO_Discontinuous_Underline: number;
  2691 │ │           const KEY_ISO_Emphasize: number;
  2692 │ │           const KEY_ISO_Enter: number;
  2693 │ │           const KEY_ISO_Fast_Cursor_Down: number;
  2694 │ │           const KEY_ISO_Fast_Cursor_Left: number;
  2695 │ │           const KEY_ISO_Fast_Cursor_Right: number;
  2696 │ │           const KEY_ISO_Fast_Cursor_Up: number;
  2697 │ │           const KEY_ISO_First_Group: number;
  2698 │ │           const KEY_ISO_First_Group_Lock: number;
  2699 │ │           const KEY_ISO_Group_Latch: number;
  2700 │ │           const KEY_ISO_Group_Lock: number;
  2701 │ │           const KEY_ISO_Group_Shift: number;
  2702 │ │           const KEY_ISO_Last_Group: number;
  2703 │ │           const KEY_ISO_Last_Group_Lock: number;
  2704 │ │           const KEY_ISO_Left_Tab: number;
  2705 │ │           const KEY_ISO_Level2_Latch: number;
  2706 │ │           const KEY_ISO_Level3_Latch: number;
  2707 │ │           const KEY_ISO_Level3_Lock: number;
  2708 │ │           const KEY_ISO_Level3_Shift: number;
  2709 │ │           const KEY_ISO_Level5_Latch: number;
  2710 │ │           const KEY_ISO_Level5_Lock: number;
  2711 │ │           const KEY_ISO_Level5_Shift: number;
  2712 │ │           const KEY_ISO_Lock: number;
  2713 │ │           const KEY_ISO_Move_Line_Down: number;
  2714 │ │           const KEY_ISO_Move_Line_Up: number;
  2715 │ │           const KEY_ISO_Next_Group: number;
  2716 │ │           const KEY_ISO_Next_Group_Lock: number;
  2717 │ │           const KEY_ISO_Partial_Line_Down: number;
  2718 │ │           const KEY_ISO_Partial_Line_Up: number;
  2719 │ │           const KEY_ISO_Partial_Space_Left: number;
  2720 │ │           const KEY_ISO_Partial_Space_Right: number;
  2721 │ │           const KEY_ISO_Prev_Group: number;
  2722 │ │           const KEY_ISO_Prev_Group_Lock: number;
  2723 │ │           const KEY_ISO_Release_Both_Margins: number;
  2724 │ │           const KEY_ISO_Release_Margin_Left: number;
  2725 │ │           const KEY_ISO_Release_Margin_Right: number;
  2726 │ │           const KEY_ISO_Set_Margin_Left: number;
  2727 │ │           const KEY_ISO_Set_Margin_Right: number;
  2728 │ │           const KEY_Iabovedot: number;
  2729 │ │           const KEY_Iacute: number;
  2730 │ │           const KEY_Ibelowdot: number;
  2731 │ │           const KEY_Ibreve: number;
  2732 │ │           const KEY_Icircumflex: number;
  2733 │ │           const KEY_Idiaeresis: number;
  2734 │ │           const KEY_Igrave: number;
  2735 │ │           const KEY_Ihook: number;
  2736 │ │           const KEY_Imacron: number;
  2737 │ │           const KEY_Insert: number;
  2738 │ │           const KEY_Iogonek: number;
  2739 │ │           const KEY_Itilde: number;
  2740 │ │           const KEY_J: number;
  2741 │ │           const KEY_Jcircumflex: number;
  2742 │ │           const KEY_K: number;
  2743 │ │           const KEY_KP_0: number;
  2744 │ │           const KEY_KP_1: number;
  2745 │ │           const KEY_KP_2: number;
  2746 │ │           const KEY_KP_3: number;
  2747 │ │           const KEY_KP_4: number;
  2748 │ │           const KEY_KP_5: number;
  2749 │ │           const KEY_KP_6: number;
  2750 │ │           const KEY_KP_7: number;
  2751 │ │           const KEY_KP_8: number;
  2752 │ │           const KEY_KP_9: number;
  2753 │ │           const KEY_KP_Add: number;
  2754 │ │           const KEY_KP_Begin: number;
  2755 │ │           const KEY_KP_Decimal: number;
  2756 │ │           const KEY_KP_Delete: number;
  2757 │ │           const KEY_KP_Divide: number;
  2758 │ │           const KEY_KP_Down: number;
  2759 │ │           const KEY_KP_End: number;
  2760 │ │           const KEY_KP_Enter: number;
  2761 │ │           const KEY_KP_Equal: number;
  2762 │ │           const KEY_KP_F1: number;
  2763 │ │           const KEY_KP_F2: number;
  2764 │ │           const KEY_KP_F3: number;
  2765 │ │           const KEY_KP_F4: number;
  2766 │ │           const KEY_KP_Home: number;
  2767 │ │           const KEY_KP_Insert: number;
  2768 │ │           const KEY_KP_Left: number;
  2769 │ │           const KEY_KP_Multiply: number;
  2770 │ │           const KEY_KP_Next: number;
  2771 │ │           const KEY_KP_Page_Down: number;
  2772 │ │           const KEY_KP_Page_Up: number;
  2773 │ │           const KEY_KP_Prior: number;
  2774 │ │           const KEY_KP_Right: number;
  2775 │ │           const KEY_KP_Separator: number;
  2776 │ │           const KEY_KP_Space: number;
  2777 │ │           const KEY_KP_Subtract: number;
  2778 │ │           const KEY_KP_Tab: number;
  2779 │ │           const KEY_KP_Up: number;
  2780 │ │           const KEY_Kana_Lock: number;
  2781 │ │           const KEY_Kana_Shift: number;
  2782 │ │           const KEY_Kanji: number;
  2783 │ │           const KEY_Kanji_Bangou: number;
  2784 │ │           const KEY_Katakana: number;
  2785 │ │           const KEY_KbdBrightnessDown: number;
  2786 │ │           const KEY_KbdBrightnessUp: number;
  2787 │ │           const KEY_KbdLightOnOff: number;
  2788 │ │           const KEY_Kcedilla: number;
  2789 │ │           const KEY_Keyboard: number;
  2790 │ │           const KEY_Korean_Won: number;
  2791 │ │           const KEY_L: number;
  2792 │ │           const KEY_L1: number;
  2793 │ │           const KEY_L10: number;
  2794 │ │           const KEY_L2: number;
  2795 │ │           const KEY_L3: number;
  2796 │ │           const KEY_L4: number;
  2797 │ │           const KEY_L5: number;
  2798 │ │           const KEY_L6: number;
  2799 │ │           const KEY_L7: number;
  2800 │ │           const KEY_L8: number;
  2801 │ │           const KEY_L9: number;
  2802 │ │           const KEY_Lacute: number;
  2803 │ │           const KEY_Last_Virtual_Screen: number;
  2804 │ │           const KEY_Launch0: number;
  2805 │ │           const KEY_Launch1: number;
  2806 │ │           const KEY_Launch2: number;
  2807 │ │           const KEY_Launch3: number;
  2808 │ │           const KEY_Launch4: number;
  2809 │ │           const KEY_Launch5: number;
  2810 │ │           const KEY_Launch6: number;
  2811 │ │           const KEY_Launch7: number;
  2812 │ │           const KEY_Launch8: number;
  2813 │ │           const KEY_Launch9: number;
  2814 │ │           const KEY_LaunchA: number;
  2815 │ │           const KEY_LaunchB: number;
  2816 │ │           const KEY_LaunchC: number;
  2817 │ │           const KEY_LaunchD: number;
  2818 │ │           const KEY_LaunchE: number;
  2819 │ │           const KEY_LaunchF: number;
  2820 │ │           const KEY_Lbelowdot: number;
  2821 │ │           const KEY_Lcaron: number;
  2822 │ │           const KEY_Lcedilla: number;
  2823 │ │           const KEY_Left: number;
  2824 │ │           const KEY_LightBulb: number;
  2825 │ │           const KEY_Linefeed: number;
  2826 │ │           const KEY_LiraSign: number;
  2827 │ │           const KEY_LogGrabInfo: number;
  2828 │ │           const KEY_LogOff: number;
  2829 │ │           const KEY_LogWindowTree: number;
  2830 │ │           const KEY_Lstroke: number;
  2831 │ │           const KEY_M: number;
  2832 │ │           const KEY_Mabovedot: number;
  2833 │ │           const KEY_Macedonia_DSE: number;
  2834 │ │           const KEY_Macedonia_GJE: number;
  2835 │ │           const KEY_Macedonia_KJE: number;
  2836 │ │           const KEY_Macedonia_dse: number;
  2837 │ │           const KEY_Macedonia_gje: number;
  2838 │ │           const KEY_Macedonia_kje: number;
  2839 │ │           const KEY_Mae_Koho: number;
  2840 │ │           const KEY_Mail: number;
  2841 │ │           const KEY_MailForward: number;
  2842 │ │           const KEY_Market: number;
  2843 │ │           const KEY_Massyo: number;
  2844 │ │           const KEY_Meeting: number;
  2845 │ │           const KEY_Memo: number;
  2846 │ │           const KEY_Menu: number;
  2847 │ │           const KEY_MenuKB: number;
  2848 │ │           const KEY_MenuPB: number;
  2849 │ │           const KEY_Messenger: number;
  2850 │ │           const KEY_Meta_L: number;
  2851 │ │           const KEY_Meta_R: number;
  2852 │ │           const KEY_MillSign: number;
  2853 │ │           const KEY_ModeLock: number;
  2854 │ │           const KEY_Mode_switch: number;
  2855 │ │           const KEY_MonBrightnessDown: number;
  2856 │ │           const KEY_MonBrightnessUp: number;
  2857 │ │           const KEY_MouseKeys_Accel_Enable: number;
  2858 │ │           const KEY_MouseKeys_Enable: number;
  2859 │ │           const KEY_Muhenkan: number;
  2860 │ │           const KEY_Multi_key: number;
  2861 │ │           const KEY_MultipleCandidate: number;
  2862 │ │           const KEY_Music: number;
  2863 │ │           const KEY_MyComputer: number;
  2864 │ │           const KEY_MySites: number;
  2865 │ │           const KEY_N: number;
  2866 │ │           const KEY_Nacute: number;
  2867 │ │           const KEY_NairaSign: number;
  2868 │ │           const KEY_Ncaron: number;
  2869 │ │           const KEY_Ncedilla: number;
  2870 │ │           const KEY_New: number;
  2871 │ │           const KEY_NewSheqelSign: number;
  2872 │ │           const KEY_News: number;
  2873 │ │           const KEY_Next: number;
  2874 │ │           const KEY_Next_VMode: number;
  2875 │ │           const KEY_Next_Virtual_Screen: number;
  2876 │ │           const KEY_Ntilde: number;
  2877 │ │           const KEY_Num_Lock: number;
  2878 │ │           const KEY_O: number;
  2879 │ │           const KEY_OE: number;
  2880 │ │           const KEY_Oacute: number;
  2881 │ │           const KEY_Obarred: number;
  2882 │ │           const KEY_Obelowdot: number;
  2883 │ │           const KEY_Ocaron: number;
  2884 │ │           const KEY_Ocircumflex: number;
  2885 │ │           const KEY_Ocircumflexacute: number;
  2886 │ │           const KEY_Ocircumflexbelowdot: number;
  2887 │ │           const KEY_Ocircumflexgrave: number;
  2888 │ │           const KEY_Ocircumflexhook: number;
  2889 │ │           const KEY_Ocircumflextilde: number;
  2890 │ │           const KEY_Odiaeresis: number;
  2891 │ │           const KEY_Odoubleacute: number;
  2892 │ │           const KEY_OfficeHome: number;
  2893 │ │           const KEY_Ograve: number;
  2894 │ │           const KEY_Ohook: number;
  2895 │ │           const KEY_Ohorn: number;
  2896 │ │           const KEY_Ohornacute: number;
  2897 │ │           const KEY_Ohornbelowdot: number;
  2898 │ │           const KEY_Ohorngrave: number;
  2899 │ │           const KEY_Ohornhook: number;
  2900 │ │           const KEY_Ohorntilde: number;
  2901 │ │           const KEY_Omacron: number;
  2902 │ │           const KEY_Ooblique: number;
  2903 │ │           const KEY_Open: number;
  2904 │ │           const KEY_OpenURL: number;
  2905 │ │           const KEY_Option: number;
  2906 │ │           const KEY_Oslash: number;
  2907 │ │           const KEY_Otilde: number;
  2908 │ │           const KEY_Overlay1_Enable: number;
  2909 │ │           const KEY_Overlay2_Enable: number;
  2910 │ │           const KEY_P: number;
  2911 │ │           const KEY_Pabovedot: number;
  2912 │ │           const KEY_Page_Down: number;
  2913 │ │           const KEY_Page_Up: number;
  2914 │ │           const KEY_Paste: number;
  2915 │ │           const KEY_Pause: number;
  2916 │ │           const KEY_PesetaSign: number;
  2917 │ │           const KEY_Phone: number;
  2918 │ │           const KEY_Pictures: number;
  2919 │ │           const KEY_Pointer_Accelerate: number;
  2920 │ │           const KEY_Pointer_Button1: number;
  2921 │ │           const KEY_Pointer_Button2: number;
  2922 │ │           const KEY_Pointer_Button3: number;
  2923 │ │           const KEY_Pointer_Button4: number;
  2924 │ │           const KEY_Pointer_Button5: number;
  2925 │ │           const KEY_Pointer_Button_Dflt: number;
  2926 │ │           const KEY_Pointer_DblClick1: number;
  2927 │ │           const KEY_Pointer_DblClick2: number;
  2928 │ │           const KEY_Pointer_DblClick3: number;
  2929 │ │           const KEY_Pointer_DblClick4: number;
  2930 │ │           const KEY_Pointer_DblClick5: number;
  2931 │ │           const KEY_Pointer_DblClick_Dflt: number;
  2932 │ │           const KEY_Pointer_DfltBtnNext: number;
  2933 │ │           const KEY_Pointer_DfltBtnPrev: number;
  2934 │ │           const KEY_Pointer_Down: number;
  2935 │ │           const KEY_Pointer_DownLeft: number;
  2936 │ │           const KEY_Pointer_DownRight: number;
  2937 │ │           const KEY_Pointer_Drag1: number;
  2938 │ │           const KEY_Pointer_Drag2: number;
  2939 │ │           const KEY_Pointer_Drag3: number;
  2940 │ │           const KEY_Pointer_Drag4: number;
  2941 │ │           const KEY_Pointer_Drag5: number;
  2942 │ │           const KEY_Pointer_Drag_Dflt: number;
  2943 │ │           const KEY_Pointer_EnableKeys: number;
  2944 │ │           const KEY_Pointer_Left: number;
  2945 │ │           const KEY_Pointer_Right: number;
  2946 │ │           const KEY_Pointer_Up: number;
  2947 │ │           const KEY_Pointer_UpLeft: number;
  2948 │ │           const KEY_Pointer_UpRight: number;
  2949 │ │           const KEY_PowerDown: number;
  2950 │ │           const KEY_PowerOff: number;
  2951 │ │           const KEY_Prev_VMode: number;
  2952 │ │           const KEY_Prev_Virtual_Screen: number;
  2953 │ │           const KEY_PreviousCandidate: number;
  2954 │ │           const KEY_Print: number;
  2955 │ │           const KEY_Prior: number;
  2956 │ │           const KEY_Q: number;
  2957 │ │           const KEY_R: number;
  2958 │ │           const KEY_R1: number;
  2959 │ │           const KEY_R10: number;
  2960 │ │           const KEY_R11: number;
  2961 │ │           const KEY_R12: number;
  2962 │ │           const KEY_R13: number;
  2963 │ │           const KEY_R14: number;
  2964 │ │           const KEY_R15: number;
  2965 │ │           const KEY_R2: number;
  2966 │ │           const KEY_R3: number;
  2967 │ │           const KEY_R4: number;
  2968 │ │           const KEY_R5: number;
  2969 │ │           const KEY_R6: number;
  2970 │ │           const KEY_R7: number;
  2971 │ │           const KEY_R8: number;
  2972 │ │           const KEY_R9: number;
  2973 │ │           const KEY_RFKill: number;
  2974 │ │           const KEY_Racute: number;
  2975 │ │           const KEY_Rcaron: number;
  2976 │ │           const KEY_Rcedilla: number;
  2977 │ │           const KEY_Red: number;
  2978 │ │           const KEY_Redo: number;
  2979 │ │           const KEY_Refresh: number;
  2980 │ │           const KEY_Reload: number;
  2981 │ │           const KEY_RepeatKeys_Enable: number;
  2982 │ │           const KEY_Reply: number;
  2983 │ │           const KEY_Return: number;
  2984 │ │           const KEY_Right: number;
  2985 │ │           const KEY_RockerDown: number;
  2986 │ │           const KEY_RockerEnter: number;
  2987 │ │           const KEY_RockerUp: number;
  2988 │ │           const KEY_Romaji: number;
  2989 │ │           const KEY_RotateWindows: number;
  2990 │ │           const KEY_RotationKB: number;
  2991 │ │           const KEY_RotationPB: number;
  2992 │ │           const KEY_RupeeSign: number;
  2993 │ │           const KEY_S: number;
  2994 │ │           const KEY_SCHWA: number;
  2995 │ │           const KEY_Sabovedot: number;
  2996 │ │           const KEY_Sacute: number;
  2997 │ │           const KEY_Save: number;
  2998 │ │           const KEY_Scaron: number;
  2999 │ │           const KEY_Scedilla: number;
  3000 │ │           const KEY_Scircumflex: number;
  3001 │ │           const KEY_ScreenSaver: number;
  3002 │ │           const KEY_ScrollClick: number;
  3003 │ │           const KEY_ScrollDown: number;
  3004 │ │           const KEY_ScrollUp: number;
  3005 │ │           const KEY_Scroll_Lock: number;
  3006 │ │           const KEY_Search: number;
  3007 │ │           const KEY_Select: number;
  3008 │ │           const KEY_SelectButton: number;
  3009 │ │           const KEY_Send: number;
  3010 │ │           const KEY_Serbian_DJE: number;
  3011 │ │           const KEY_Serbian_DZE: number;
  3012 │ │           const KEY_Serbian_JE: number;
  3013 │ │           const KEY_Serbian_LJE: number;
  3014 │ │           const KEY_Serbian_NJE: number;
  3015 │ │           const KEY_Serbian_TSHE: number;
  3016 │ │           const KEY_Serbian_dje: number;
  3017 │ │           const KEY_Serbian_dze: number;
  3018 │ │           const KEY_Serbian_je: number;
  3019 │ │           const KEY_Serbian_lje: number;
  3020 │ │           const KEY_Serbian_nje: number;
  3021 │ │           const KEY_Serbian_tshe: number;
  3022 │ │           const KEY_Shift_L: number;
  3023 │ │           const KEY_Shift_Lock: number;
  3024 │ │           const KEY_Shift_R: number;
  3025 │ │           const KEY_Shop: number;
  3026 │ │           const KEY_SingleCandidate: number;
  3027 │ │           const KEY_Sinh_a: number;
  3028 │ │           const KEY_Sinh_aa: number;
  3029 │ │           const KEY_Sinh_aa2: number;
  3030 │ │           const KEY_Sinh_ae: number;
  3031 │ │           const KEY_Sinh_ae2: number;
  3032 │ │           const KEY_Sinh_aee: number;
  3033 │ │           const KEY_Sinh_aee2: number;
  3034 │ │           const KEY_Sinh_ai: number;
  3035 │ │           const KEY_Sinh_ai2: number;
  3036 │ │           const KEY_Sinh_al: number;
  3037 │ │           const KEY_Sinh_au: number;
  3038 │ │           const KEY_Sinh_au2: number;
  3039 │ │           const KEY_Sinh_ba: number;
  3040 │ │           const KEY_Sinh_bha: number;
  3041 │ │           const KEY_Sinh_ca: number;
  3042 │ │           const KEY_Sinh_cha: number;
  3043 │ │           const KEY_Sinh_dda: number;
  3044 │ │           const KEY_Sinh_ddha: number;
  3045 │ │           const KEY_Sinh_dha: number;
  3046 │ │           const KEY_Sinh_dhha: number;
  3047 │ │           const KEY_Sinh_e: number;
  3048 │ │           const KEY_Sinh_e2: number;
  3049 │ │           const KEY_Sinh_ee: number;
  3050 │ │           const KEY_Sinh_ee2: number;
  3051 │ │           const KEY_Sinh_fa: number;
  3052 │ │           const KEY_Sinh_ga: number;
  3053 │ │           const KEY_Sinh_gha: number;
  3054 │ │           const KEY_Sinh_h2: number;
  3055 │ │           const KEY_Sinh_ha: number;
  3056 │ │           const KEY_Sinh_i: number;
  3057 │ │           const KEY_Sinh_i2: number;
  3058 │ │           const KEY_Sinh_ii: number;
  3059 │ │           const KEY_Sinh_ii2: number;
  3060 │ │           const KEY_Sinh_ja: number;
  3061 │ │           const KEY_Sinh_jha: number;
  3062 │ │           const KEY_Sinh_jnya: number;
  3063 │ │           const KEY_Sinh_ka: number;
  3064 │ │           const KEY_Sinh_kha: number;
  3065 │ │           const KEY_Sinh_kunddaliya: number;
  3066 │ │           const KEY_Sinh_la: number;
  3067 │ │           const KEY_Sinh_lla: number;
  3068 │ │           const KEY_Sinh_lu: number;
  3069 │ │           const KEY_Sinh_lu2: number;
  3070 │ │           const KEY_Sinh_luu: number;
  3071 │ │           const KEY_Sinh_luu2: number;
  3072 │ │           const KEY_Sinh_ma: number;
  3073 │ │           const KEY_Sinh_mba: number;
  3074 │ │           const KEY_Sinh_na: number;
  3075 │ │           const KEY_Sinh_ndda: number;
  3076 │ │           const KEY_Sinh_ndha: number;
  3077 │ │           const KEY_Sinh_ng: number;
  3078 │ │           const KEY_Sinh_ng2: number;
  3079 │ │           const KEY_Sinh_nga: number;
  3080 │ │           const KEY_Sinh_nja: number;
  3081 │ │           const KEY_Sinh_nna: number;
  3082 │ │           const KEY_Sinh_nya: number;
  3083 │ │           const KEY_Sinh_o: number;
  3084 │ │           const KEY_Sinh_o2: number;
  3085 │ │           const KEY_Sinh_oo: number;
  3086 │ │           const KEY_Sinh_oo2: number;
  3087 │ │           const KEY_Sinh_pa: number;
  3088 │ │           const KEY_Sinh_pha: number;
  3089 │ │           const KEY_Sinh_ra: number;
  3090 │ │           const KEY_Sinh_ri: number;
  3091 │ │           const KEY_Sinh_rii: number;
  3092 │ │           const KEY_Sinh_ru2: number;
  3093 │ │           const KEY_Sinh_ruu2: number;
  3094 │ │           const KEY_Sinh_sa: number;
  3095 │ │           const KEY_Sinh_sha: number;
  3096 │ │           const KEY_Sinh_ssha: number;
  3097 │ │           const KEY_Sinh_tha: number;
  3098 │ │           const KEY_Sinh_thha: number;
  3099 │ │           const KEY_Sinh_tta: number;
  3100 │ │           const KEY_Sinh_ttha: number;
  3101 │ │           const KEY_Sinh_u: number;
  3102 │ │           const KEY_Sinh_u2: number;
  3103 │ │           const KEY_Sinh_uu: number;
  3104 │ │           const KEY_Sinh_uu2: number;
  3105 │ │           const KEY_Sinh_va: number;
  3106 │ │           const KEY_Sinh_ya: number;
  3107 │ │           const KEY_Sleep: number;
  3108 │ │           const KEY_SlowKeys_Enable: number;
  3109 │ │           const KEY_Spell: number;
  3110 │ │           const KEY_SplitScreen: number;
  3111 │ │           const KEY_Standby: number;
  3112 │ │           const KEY_Start: number;
  3113 │ │           const KEY_StickyKeys_Enable: number;
  3114 │ │           const KEY_Stop: number;
  3115 │ │           const KEY_Subtitle: number;
  3116 │ │           const KEY_Super_L: number;
  3117 │ │           const KEY_Super_R: number;
  3118 │ │           const KEY_Support: number;
  3119 │ │           const KEY_Suspend: number;
  3120 │ │           const KEY_Switch_VT_1: number;
  3121 │ │           const KEY_Switch_VT_10: number;
  3122 │ │           const KEY_Switch_VT_11: number;
  3123 │ │           const KEY_Switch_VT_12: number;
  3124 │ │           const KEY_Switch_VT_2: number;
  3125 │ │           const KEY_Switch_VT_3: number;
  3126 │ │           const KEY_Switch_VT_4: number;
  3127 │ │           const KEY_Switch_VT_5: number;
  3128 │ │           const KEY_Switch_VT_6: number;
  3129 │ │           const KEY_Switch_VT_7: number;
  3130 │ │           const KEY_Switch_VT_8: number;
  3131 │ │           const KEY_Switch_VT_9: number;
  3132 │ │           const KEY_Sys_Req: number;
  3133 │ │           const KEY_T: number;
  3134 │ │           const KEY_THORN: number;
  3135 │ │           const KEY_Tab: number;
  3136 │ │           const KEY_Tabovedot: number;
  3137 │ │           const KEY_TaskPane: number;
  3138 │ │           const KEY_Tcaron: number;
  3139 │ │           const KEY_Tcedilla: number;
  3140 │ │           const KEY_Terminal: number;
  3141 │ │           const KEY_Terminate_Server: number;
  3142 │ │           const KEY_Thai_baht: number;
  3143 │ │           const KEY_Thai_bobaimai: number;
  3144 │ │           const KEY_Thai_chochan: number;
  3145 │ │           const KEY_Thai_chochang: number;
  3146 │ │           const KEY_Thai_choching: number;
  3147 │ │           const KEY_Thai_chochoe: number;
  3148 │ │           const KEY_Thai_dochada: number;
  3149 │ │           const KEY_Thai_dodek: number;
  3150 │ │           const KEY_Thai_fofa: number;
  3151 │ │           const KEY_Thai_fofan: number;
  3152 │ │           const KEY_Thai_hohip: number;
  3153 │ │           const KEY_Thai_honokhuk: number;
  3154 │ │           const KEY_Thai_khokhai: number;
  3155 │ │           const KEY_Thai_khokhon: number;
  3156 │ │           const KEY_Thai_khokhuat: number;
  3157 │ │           const KEY_Thai_khokhwai: number;
  3158 │ │           const KEY_Thai_khorakhang: number;
  3159 │ │           const KEY_Thai_kokai: number;
  3160 │ │           const KEY_Thai_lakkhangyao: number;
  3161 │ │           const KEY_Thai_lekchet: number;
  3162 │ │           const KEY_Thai_lekha: number;
  3163 │ │           const KEY_Thai_lekhok: number;
  3164 │ │           const KEY_Thai_lekkao: number;
  3165 │ │           const KEY_Thai_leknung: number;
  3166 │ │           const KEY_Thai_lekpaet: number;
  3167 │ │           const KEY_Thai_leksam: number;
  3168 │ │           const KEY_Thai_leksi: number;
  3169 │ │           const KEY_Thai_leksong: number;
  3170 │ │           const KEY_Thai_leksun: number;
  3171 │ │           const KEY_Thai_lochula: number;
  3172 │ │           const KEY_Thai_loling: number;
  3173 │ │           const KEY_Thai_lu: number;
  3174 │ │           const KEY_Thai_maichattawa: number;
  3175 │ │           const KEY_Thai_maiek: number;
  3176 │ │           const KEY_Thai_maihanakat: number;
  3177 │ │           const KEY_Thai_maihanakat_maitho: number;
  3178 │ │           const KEY_Thai_maitaikhu: number;
  3179 │ │           const KEY_Thai_maitho: number;
  3180 │ │           const KEY_Thai_maitri: number;
  3181 │ │           const KEY_Thai_maiyamok: number;
  3182 │ │           const KEY_Thai_moma: number;
  3183 │ │           const KEY_Thai_ngongu: number;
  3184 │ │           const KEY_Thai_nikhahit: number;
  3185 │ │           const KEY_Thai_nonen: number;
  3186 │ │           const KEY_Thai_nonu: number;
  3187 │ │           const KEY_Thai_oang: number;
  3188 │ │           const KEY_Thai_paiyannoi: number;
  3189 │ │           const KEY_Thai_phinthu: number;
  3190 │ │           const KEY_Thai_phophan: number;
  3191 │ │           const KEY_Thai_phophung: number;
  3192 │ │           const KEY_Thai_phosamphao: number;
  3193 │ │           const KEY_Thai_popla: number;
  3194 │ │           const KEY_Thai_rorua: number;
  3195 │ │           const KEY_Thai_ru: number;
  3196 │ │           const KEY_Thai_saraa: number;
  3197 │ │           const KEY_Thai_saraaa: number;
  3198 │ │           const KEY_Thai_saraae: number;
  3199 │ │           const KEY_Thai_saraaimaimalai: number;
  3200 │ │           const KEY_Thai_saraaimaimuan: number;
  3201 │ │           const KEY_Thai_saraam: number;
  3202 │ │           const KEY_Thai_sarae: number;
  3203 │ │           const KEY_Thai_sarai: number;
  3204 │ │           const KEY_Thai_saraii: number;
  3205 │ │           const KEY_Thai_sarao: number;
  3206 │ │           const KEY_Thai_sarau: number;
  3207 │ │           const KEY_Thai_saraue: number;
  3208 │ │           const KEY_Thai_sarauee: number;
  3209 │ │           const KEY_Thai_sarauu: number;
  3210 │ │           const KEY_Thai_sorusi: number;
  3211 │ │           const KEY_Thai_sosala: number;
  3212 │ │           const KEY_Thai_soso: number;
  3213 │ │           const KEY_Thai_sosua: number;
  3214 │ │           const KEY_Thai_thanthakhat: number;
  3215 │ │           const KEY_Thai_thonangmontho: number;
  3216 │ │           const KEY_Thai_thophuthao: number;
  3217 │ │           const KEY_Thai_thothahan: number;
  3218 │ │           const KEY_Thai_thothan: number;
  3219 │ │           const KEY_Thai_thothong: number;
  3220 │ │           const KEY_Thai_thothung: number;
  3221 │ │           const KEY_Thai_topatak: number;
  3222 │ │           const KEY_Thai_totao: number;
  3223 │ │           const KEY_Thai_wowaen: number;
  3224 │ │           const KEY_Thai_yoyak: number;
  3225 │ │           const KEY_Thai_yoying: number;
  3226 │ │           const KEY_Thorn: number;
  3227 │ │           const KEY_Time: number;
  3228 │ │           const KEY_ToDoList: number;
  3229 │ │           const KEY_Tools: number;
  3230 │ │           const KEY_TopMenu: number;
  3231 │ │           const KEY_TouchpadOff: number;
  3232 │ │           const KEY_TouchpadOn: number;
  3233 │ │           const KEY_TouchpadToggle: number;
  3234 │ │           const KEY_Touroku: number;
  3235 │ │           const KEY_Travel: number;
  3236 │ │           const KEY_Tslash: number;
  3237 │ │           const KEY_U: number;
  3238 │ │           const KEY_UWB: number;
  3239 │ │           const KEY_Uacute: number;
  3240 │ │           const KEY_Ubelowdot: number;
  3241 │ │           const KEY_Ubreve: number;
  3242 │ │           const KEY_Ucircumflex: number;
  3243 │ │           const KEY_Udiaeresis: number;
  3244 │ │           const KEY_Udoubleacute: number;
  3245 │ │           const KEY_Ugrave: number;
  3246 │ │           const KEY_Uhook: number;
  3247 │ │           const KEY_Uhorn: number;
  3248 │ │           const KEY_Uhornacute: number;
  3249 │ │           const KEY_Uhornbelowdot: number;
  3250 │ │           const KEY_Uhorngrave: number;
  3251 │ │           const KEY_Uhornhook: number;
  3252 │ │           const KEY_Uhorntilde: number;
  3253 │ │           const KEY_Ukrainian_GHE_WITH_UPTURN: number;
  3254 │ │           const KEY_Ukrainian_I: number;
  3255 │ │           const KEY_Ukrainian_IE: number;
  3256 │ │           const KEY_Ukrainian_YI: number;
  3257 │ │           const KEY_Ukrainian_ghe_with_upturn: number;
  3258 │ │           const KEY_Ukrainian_i: number;
  3259 │ │           const KEY_Ukrainian_ie: number;
  3260 │ │           const KEY_Ukrainian_yi: number;
  3261 │ │           const KEY_Ukranian_I: number;
  3262 │ │           const KEY_Ukranian_JE: number;
  3263 │ │           const KEY_Ukranian_YI: number;
  3264 │ │           const KEY_Ukranian_i: number;
  3265 │ │           const KEY_Ukranian_je: number;
  3266 │ │           const KEY_Ukranian_yi: number;
  3267 │ │           const KEY_Umacron: number;
  3268 │ │           const KEY_Undo: number;
  3269 │ │           const KEY_Ungrab: number;
  3270 │ │           const KEY_Uogonek: number;
  3271 │ │           const KEY_Up: number;
  3272 │ │           const KEY_Uring: number;
  3273 │ │           const KEY_User1KB: number;
  3274 │ │           const KEY_User2KB: number;
  3275 │ │           const KEY_UserPB: number;
  3276 │ │           const KEY_Utilde: number;
  3277 │ │           const KEY_V: number;
  3278 │ │           const KEY_VendorHome: number;
  3279 │ │           const KEY_Video: number;
  3280 │ │           const KEY_View: number;
  3281 │ │           const KEY_VoidSymbol: number;
  3282 │ │           const KEY_W: number;
  3283 │ │           const KEY_WLAN: number;
  3284 │ │           const KEY_WWAN: number;
  3285 │ │           const KEY_WWW: number;
  3286 │ │           const KEY_Wacute: number;
  3287 │ │           const KEY_WakeUp: number;
  3288 │ │           const KEY_Wcircumflex: number;
  3289 │ │           const KEY_Wdiaeresis: number;
  3290 │ │           const KEY_WebCam: number;
  3291 │ │           const KEY_Wgrave: number;
  3292 │ │           const KEY_WheelButton: number;
  3293 │ │           const KEY_WindowClear: number;
  3294 │ │           const KEY_WonSign: number;
  3295 │ │           const KEY_Word: number;
  3296 │ │           const KEY_X: number;
  3297 │ │           const KEY_Xabovedot: number;
  3298 │ │           const KEY_Xfer: number;
  3299 │ │           const KEY_Y: number;
  3300 │ │           const KEY_Yacute: number;
  3301 │ │           const KEY_Ybelowdot: number;
  3302 │ │           const KEY_Ycircumflex: number;
  3303 │ │           const KEY_Ydiaeresis: number;
  3304 │ │           const KEY_Yellow: number;
  3305 │ │           const KEY_Ygrave: number;
  3306 │ │           const KEY_Yhook: number;
  3307 │ │           const KEY_Ytilde: number;
  3308 │ │           const KEY_Z: number;
  3309 │ │           const KEY_Zabovedot: number;
  3310 │ │           const KEY_Zacute: number;
  3311 │ │           const KEY_Zcaron: number;
  3312 │ │           const KEY_Zen_Koho: number;
  3313 │ │           const KEY_Zenkaku: number;
  3314 │ │           const KEY_Zenkaku_Hankaku: number;
  3315 │ │           const KEY_ZoomIn: number;
  3316 │ │           const KEY_ZoomOut: number;
  3317 │ │           const KEY_Zstroke: number;
  3318 │ │           const KEY_a: number;
  3319 │ │           const KEY_aacute: number;
  3320 │ │           const KEY_abelowdot: number;
  3321 │ │           const KEY_abovedot: number;
  3322 │ │           const KEY_abreve: number;
  3323 │ │           const KEY_abreveacute: number;
  3324 │ │           const KEY_abrevebelowdot: number;
  3325 │ │           const KEY_abrevegrave: number;
  3326 │ │           const KEY_abrevehook: number;
  3327 │ │           const KEY_abrevetilde: number;
  3328 │ │           const KEY_acircumflex: number;
  3329 │ │           const KEY_acircumflexacute: number;
  3330 │ │           const KEY_acircumflexbelowdot: number;
  3331 │ │           const KEY_acircumflexgrave: number;
  3332 │ │           const KEY_acircumflexhook: number;
  3333 │ │           const KEY_acircumflextilde: number;
  3334 │ │           const KEY_acute: number;
  3335 │ │           const KEY_adiaeresis: number;
  3336 │ │           const KEY_ae: number;
  3337 │ │           const KEY_agrave: number;
  3338 │ │           const KEY_ahook: number;
  3339 │ │           const KEY_amacron: number;
  3340 │ │           const KEY_ampersand: number;
  3341 │ │           const KEY_aogonek: number;
  3342 │ │           const KEY_apostrophe: number;
  3343 │ │           const KEY_approxeq: number;
  3344 │ │           const KEY_approximate: number;
  3345 │ │           const KEY_aring: number;
  3346 │ │           const KEY_asciicircum: number;
  3347 │ │           const KEY_asciitilde: number;
  3348 │ │           const KEY_asterisk: number;
  3349 │ │           const KEY_at: number;
  3350 │ │           const KEY_atilde: number;
  3351 │ │           const KEY_b: number;
  3352 │ │           const KEY_babovedot: number;
  3353 │ │           const KEY_backslash: number;
  3354 │ │           const KEY_ballotcross: number;
  3355 │ │           const KEY_bar: number;
  3356 │ │           const KEY_because: number;
  3357 │ │           const KEY_blank: number;
  3358 │ │           const KEY_botintegral: number;
  3359 │ │           const KEY_botleftparens: number;
  3360 │ │           const KEY_botleftsqbracket: number;
  3361 │ │           const KEY_botleftsummation: number;
  3362 │ │           const KEY_botrightparens: number;
  3363 │ │           const KEY_botrightsqbracket: number;
  3364 │ │           const KEY_botrightsummation: number;
  3365 │ │           const KEY_bott: number;
  3366 │ │           const KEY_botvertsummationconnector: number;
  3367 │ │           const KEY_braceleft: number;
  3368 │ │           const KEY_braceright: number;
  3369 │ │           const KEY_bracketleft: number;
  3370 │ │           const KEY_bracketright: number;
  3371 │ │           const KEY_braille_blank: number;
  3372 │ │           const KEY_braille_dot_1: number;
  3373 │ │           const KEY_braille_dot_10: number;
  3374 │ │           const KEY_braille_dot_2: number;
  3375 │ │           const KEY_braille_dot_3: number;
  3376 │ │           const KEY_braille_dot_4: number;
  3377 │ │           const KEY_braille_dot_5: number;
  3378 │ │           const KEY_braille_dot_6: number;
  3379 │ │           const KEY_braille_dot_7: number;
  3380 │ │           const KEY_braille_dot_8: number;
  3381 │ │           const KEY_braille_dot_9: number;
  3382 │ │           const KEY_braille_dots_1: number;
  3383 │ │           const KEY_braille_dots_12: number;
  3384 │ │           const KEY_braille_dots_123: number;
  3385 │ │           const KEY_braille_dots_1234: number;
  3386 │ │           const KEY_braille_dots_12345: number;
  3387 │ │           const KEY_braille_dots_123456: number;
  3388 │ │           const KEY_braille_dots_1234567: number;
  3389 │ │           const KEY_braille_dots_12345678: number;
  3390 │ │           const KEY_braille_dots_1234568: number;
  3391 │ │           const KEY_braille_dots_123457: number;
  3392 │ │           const KEY_braille_dots_1234578: number;
  3393 │ │           const KEY_braille_dots_123458: number;
  3394 │ │           const KEY_braille_dots_12346: number;
  3395 │ │           const KEY_braille_dots_123467: number;
  3396 │ │           const KEY_braille_dots_1234678: number;
  3397 │ │           const KEY_braille_dots_123468: number;
  3398 │ │           const KEY_braille_dots_12347: number;
  3399 │ │           const KEY_braille_dots_123478: number;
  3400 │ │           const KEY_braille_dots_12348: number;
  3401 │ │           const KEY_braille_dots_1235: number;
  3402 │ │           const KEY_braille_dots_12356: number;
  3403 │ │           const KEY_braille_dots_123567: number;
  3404 │ │           const KEY_braille_dots_1235678: number;
  3405 │ │           const KEY_braille_dots_123568: number;
  3406 │ │           const KEY_braille_dots_12357: number;
  3407 │ │           const KEY_braille_dots_123578: number;
  3408 │ │           const KEY_braille_dots_12358: number;
  3409 │ │           const KEY_braille_dots_1236: number;
  3410 │ │           const KEY_braille_dots_12367: number;
  3411 │ │           const KEY_braille_dots_123678: number;
  3412 │ │           const KEY_braille_dots_12368: number;
  3413 │ │           const KEY_braille_dots_1237: number;
  3414 │ │           const KEY_braille_dots_12378: number;
  3415 │ │           const KEY_braille_dots_1238: number;
  3416 │ │           const KEY_braille_dots_124: number;
  3417 │ │           const KEY_braille_dots_1245: number;
  3418 │ │           const KEY_braille_dots_12456: number;
  3419 │ │           const KEY_braille_dots_124567: number;
  3420 │ │           const KEY_braille_dots_1245678: number;
  3421 │ │           const KEY_braille_dots_124568: number;
  3422 │ │           const KEY_braille_dots_12457: number;
  3423 │ │           const KEY_braille_dots_124578: number;
  3424 │ │           const KEY_braille_dots_12458: number;
  3425 │ │           const KEY_braille_dots_1246: number;
  3426 │ │           const KEY_braille_dots_12467: number;
  3427 │ │           const KEY_braille_dots_124678: number;
  3428 │ │           const KEY_braille_dots_12468: number;
  3429 │ │           const KEY_braille_dots_1247: number;
  3430 │ │           const KEY_braille_dots_12478: number;
  3431 │ │           const KEY_braille_dots_1248: number;
  3432 │ │           const KEY_braille_dots_125: number;
  3433 │ │           const KEY_braille_dots_1256: number;
  3434 │ │           const KEY_braille_dots_12567: number;
  3435 │ │           const KEY_braille_dots_125678: number;
  3436 │ │           const KEY_braille_dots_12568: number;
  3437 │ │           const KEY_braille_dots_1257: number;
  3438 │ │           const KEY_braille_dots_12578: number;
  3439 │ │           const KEY_braille_dots_1258: number;
  3440 │ │           const KEY_braille_dots_126: number;
  3441 │ │           const KEY_braille_dots_1267: number;
  3442 │ │           const KEY_braille_dots_12678: number;
  3443 │ │           const KEY_braille_dots_1268: number;
  3444 │ │           const KEY_braille_dots_127: number;
  3445 │ │           const KEY_braille_dots_1278: number;
  3446 │ │           const KEY_braille_dots_128: number;
  3447 │ │           const KEY_braille_dots_13: number;
  3448 │ │           const KEY_braille_dots_134: number;
  3449 │ │           const KEY_braille_dots_1345: number;
  3450 │ │           const KEY_braille_dots_13456: number;
  3451 │ │           const KEY_braille_dots_134567: number;
  3452 │ │           const KEY_braille_dots_1345678: number;
  3453 │ │           const KEY_braille_dots_134568: number;
  3454 │ │           const KEY_braille_dots_13457: number;
  3455 │ │           const KEY_braille_dots_134578: number;
  3456 │ │           const KEY_braille_dots_13458: number;
  3457 │ │           const KEY_braille_dots_1346: number;
  3458 │ │           const KEY_braille_dots_13467: number;
  3459 │ │           const KEY_braille_dots_134678: number;
  3460 │ │           const KEY_braille_dots_13468: number;
  3461 │ │           const KEY_braille_dots_1347: number;
  3462 │ │           const KEY_braille_dots_13478: number;
  3463 │ │           const KEY_braille_dots_1348: number;
  3464 │ │           const KEY_braille_dots_135: number;
  3465 │ │           const KEY_braille_dots_1356: number;
  3466 │ │           const KEY_braille_dots_13567: number;
  3467 │ │           const KEY_braille_dots_135678: number;
  3468 │ │           const KEY_braille_dots_13568: number;
  3469 │ │           const KEY_braille_dots_1357: number;
  3470 │ │           const KEY_braille_dots_13578: number;
  3471 │ │           const KEY_braille_dots_1358: number;
  3472 │ │           const KEY_braille_dots_136: number;
  3473 │ │           const KEY_braille_dots_1367: number;
  3474 │ │           const KEY_braille_dots_13678: number;
  3475 │ │           const KEY_braille_dots_1368: number;
  3476 │ │           const KEY_braille_dots_137: number;
  3477 │ │           const KEY_braille_dots_1378: number;
  3478 │ │           const KEY_braille_dots_138: number;
  3479 │ │           const KEY_braille_dots_14: number;
  3480 │ │           const KEY_braille_dots_145: number;
  3481 │ │           const KEY_braille_dots_1456: number;
  3482 │ │           const KEY_braille_dots_14567: number;
  3483 │ │           const KEY_braille_dots_145678: number;
  3484 │ │           const KEY_braille_dots_14568: number;
  3485 │ │           const KEY_braille_dots_1457: number;
  3486 │ │           const KEY_braille_dots_14578: number;
  3487 │ │           const KEY_braille_dots_1458: number;
  3488 │ │           const KEY_braille_dots_146: number;
  3489 │ │           const KEY_braille_dots_1467: number;
  3490 │ │           const KEY_braille_dots_14678: number;
  3491 │ │           const KEY_braille_dots_1468: number;
  3492 │ │           const KEY_braille_dots_147: number;
  3493 │ │           const KEY_braille_dots_1478: number;
  3494 │ │           const KEY_braille_dots_148: number;
  3495 │ │           const KEY_braille_dots_15: number;
  3496 │ │           const KEY_braille_dots_156: number;
  3497 │ │           const KEY_braille_dots_1567: number;
  3498 │ │           const KEY_braille_dots_15678: number;
  3499 │ │           const KEY_braille_dots_1568: number;
  3500 │ │           const KEY_braille_dots_157: number;
  3501 │ │           const KEY_braille_dots_1578: number;
  3502 │ │           const KEY_braille_dots_158: number;
  3503 │ │           const KEY_braille_dots_16: number;
  3504 │ │           const KEY_braille_dots_167: number;
  3505 │ │           const KEY_braille_dots_1678: number;
  3506 │ │           const KEY_braille_dots_168: number;
  3507 │ │           const KEY_braille_dots_17: number;
  3508 │ │           const KEY_braille_dots_178: number;
  3509 │ │           const KEY_braille_dots_18: number;
  3510 │ │           const KEY_braille_dots_2: number;
  3511 │ │           const KEY_braille_dots_23: number;
  3512 │ │           const KEY_braille_dots_234: number;
  3513 │ │           const KEY_braille_dots_2345: number;
  3514 │ │           const KEY_braille_dots_23456: number;
  3515 │ │           const KEY_braille_dots_234567: number;
  3516 │ │           const KEY_braille_dots_2345678: number;
  3517 │ │           const KEY_braille_dots_234568: number;
  3518 │ │           const KEY_braille_dots_23457: number;
  3519 │ │           const KEY_braille_dots_234578: number;
  3520 │ │           const KEY_braille_dots_23458: number;
  3521 │ │           const KEY_braille_dots_2346: number;
  3522 │ │           const KEY_braille_dots_23467: number;
  3523 │ │           const KEY_braille_dots_234678: number;
  3524 │ │           const KEY_braille_dots_23468: number;
  3525 │ │           const KEY_braille_dots_2347: number;
  3526 │ │           const KEY_braille_dots_23478: number;
  3527 │ │           const KEY_braille_dots_2348: number;
  3528 │ │           const KEY_braille_dots_235: number;
  3529 │ │           const KEY_braille_dots_2356: number;
  3530 │ │           const KEY_braille_dots_23567: number;
  3531 │ │           const KEY_braille_dots_235678: number;
  3532 │ │           const KEY_braille_dots_23568: number;
  3533 │ │           const KEY_braille_dots_2357: number;
  3534 │ │           const KEY_braille_dots_23578: number;
  3535 │ │           const KEY_braille_dots_2358: number;
  3536 │ │           const KEY_braille_dots_236: number;
  3537 │ │           const KEY_braille_dots_2367: number;
  3538 │ │           const KEY_braille_dots_23678: number;
  3539 │ │           const KEY_braille_dots_2368: number;
  3540 │ │           const KEY_braille_dots_237: number;
  3541 │ │           const KEY_braille_dots_2378: number;
  3542 │ │           const KEY_braille_dots_238: number;
  3543 │ │           const KEY_braille_dots_24: number;
  3544 │ │           const KEY_braille_dots_245: number;
  3545 │ │           const KEY_braille_dots_2456: number;
  3546 │ │           const KEY_braille_dots_24567: number;
  3547 │ │           const KEY_braille_dots_245678: number;
  3548 │ │           const KEY_braille_dots_24568: number;
  3549 │ │           const KEY_braille_dots_2457: number;
  3550 │ │           const KEY_braille_dots_24578: number;
  3551 │ │           const KEY_braille_dots_2458: number;
  3552 │ │           const KEY_braille_dots_246: number;
  3553 │ │           const KEY_braille_dots_2467: number;
  3554 │ │           const KEY_braille_dots_24678: number;
  3555 │ │           const KEY_braille_dots_2468: number;
  3556 │ │           const KEY_braille_dots_247: number;
  3557 │ │           const KEY_braille_dots_2478: number;
  3558 │ │           const KEY_braille_dots_248: number;
  3559 │ │           const KEY_braille_dots_25: number;
  3560 │ │           const KEY_braille_dots_256: number;
  3561 │ │           const KEY_braille_dots_2567: number;
  3562 │ │           const KEY_braille_dots_25678: number;
  3563 │ │           const KEY_braille_dots_2568: number;
  3564 │ │           const KEY_braille_dots_257: number;
  3565 │ │           const KEY_braille_dots_2578: number;
  3566 │ │           const KEY_braille_dots_258: number;
  3567 │ │           const KEY_braille_dots_26: number;
  3568 │ │           const KEY_braille_dots_267: number;
  3569 │ │           const KEY_braille_dots_2678: number;
  3570 │ │           const KEY_braille_dots_268: number;
  3571 │ │           const KEY_braille_dots_27: number;
  3572 │ │           const KEY_braille_dots_278: number;
  3573 │ │           const KEY_braille_dots_28: number;
  3574 │ │           const KEY_braille_dots_3: number;
  3575 │ │           const KEY_braille_dots_34: number;
  3576 │ │           const KEY_braille_dots_345: number;
  3577 │ │           const KEY_braille_dots_3456: number;
  3578 │ │           const KEY_braille_dots_34567: number;
  3579 │ │           const KEY_braille_dots_345678: number;
  3580 │ │           const KEY_braille_dots_34568: number;
  3581 │ │           const KEY_braille_dots_3457: number;
  3582 │ │           const KEY_braille_dots_34578: number;
  3583 │ │           const KEY_braille_dots_3458: number;
  3584 │ │           const KEY_braille_dots_346: number;
  3585 │ │           const KEY_braille_dots_3467: number;
  3586 │ │           const KEY_braille_dots_34678: number;
  3587 │ │           const KEY_braille_dots_3468: number;
  3588 │ │           const KEY_braille_dots_347: number;
  3589 │ │           const KEY_braille_dots_3478: number;
  3590 │ │           const KEY_braille_dots_348: number;
  3591 │ │           const KEY_braille_dots_35: number;
  3592 │ │           const KEY_braille_dots_356: number;
  3593 │ │           const KEY_braille_dots_3567: number;
  3594 │ │           const KEY_braille_dots_35678: number;
  3595 │ │           const KEY_braille_dots_3568: number;
  3596 │ │           const KEY_braille_dots_357: number;
  3597 │ │           const KEY_braille_dots_3578: number;
  3598 │ │           const KEY_braille_dots_358: number;
  3599 │ │           const KEY_braille_dots_36: number;
  3600 │ │           const KEY_braille_dots_367: number;
  3601 │ │           const KEY_braille_dots_3678: number;
  3602 │ │           const KEY_braille_dots_368: number;
  3603 │ │           const KEY_braille_dots_37: number;
  3604 │ │           const KEY_braille_dots_378: number;
  3605 │ │           const KEY_braille_dots_38: number;
  3606 │ │           const KEY_braille_dots_4: number;
  3607 │ │           const KEY_braille_dots_45: number;
  3608 │ │           const KEY_braille_dots_456: number;
  3609 │ │           const KEY_braille_dots_4567: number;
  3610 │ │           const KEY_braille_dots_45678: number;
  3611 │ │           const KEY_braille_dots_4568: number;
  3612 │ │           const KEY_braille_dots_457: number;
  3613 │ │           const KEY_braille_dots_4578: number;
  3614 │ │           const KEY_braille_dots_458: number;
  3615 │ │           const KEY_braille_dots_46: number;
  3616 │ │           const KEY_braille_dots_467: number;
  3617 │ │           const KEY_braille_dots_4678: number;
  3618 │ │           const KEY_braille_dots_468: number;
  3619 │ │           const KEY_braille_dots_47: number;
  3620 │ │           const KEY_braille_dots_478: number;
  3621 │ │           const KEY_braille_dots_48: number;
  3622 │ │           const KEY_braille_dots_5: number;
  3623 │ │           const KEY_braille_dots_56: number;
  3624 │ │           const KEY_braille_dots_567: number;
  3625 │ │           const KEY_braille_dots_5678: number;
  3626 │ │           const KEY_braille_dots_568: number;
  3627 │ │           const KEY_braille_dots_57: number;
  3628 │ │           const KEY_braille_dots_578: number;
  3629 │ │           const KEY_braille_dots_58: number;
  3630 │ │           const KEY_braille_dots_6: number;
  3631 │ │           const KEY_braille_dots_67: number;
  3632 │ │           const KEY_braille_dots_678: number;
  3633 │ │           const KEY_braille_dots_68: number;
  3634 │ │           const KEY_braille_dots_7: number;
  3635 │ │           const KEY_braille_dots_78: number;
  3636 │ │           const KEY_braille_dots_8: number;
  3637 │ │           const KEY_breve: number;
  3638 │ │           const KEY_brokenbar: number;
  3639 │ │           const KEY_c: number;
  3640 │ │           const KEY_c_h: number;
  3641 │ │           const KEY_cabovedot: number;
  3642 │ │           const KEY_cacute: number;
  3643 │ │           const KEY_careof: number;
  3644 │ │           const KEY_caret: number;
  3645 │ │           const KEY_caron: number;
  3646 │ │           const KEY_ccaron: number;
  3647 │ │           const KEY_ccedilla: number;
  3648 │ │           const KEY_ccircumflex: number;
  3649 │ │           const KEY_cedilla: number;
  3650 │ │           const KEY_cent: number;
  3651 │ │           const KEY_ch: number;
  3652 │ │           const KEY_checkerboard: number;
  3653 │ │           const KEY_checkmark: number;
  3654 │ │           const KEY_circle: number;
  3655 │ │           const KEY_club: number;
  3656 │ │           const KEY_colon: number;
  3657 │ │           const KEY_comma: number;
  3658 │ │           const KEY_containsas: number;
  3659 │ │           const KEY_copyright: number;
  3660 │ │           const KEY_cr: number;
  3661 │ │           const KEY_crossinglines: number;
  3662 │ │           const KEY_cuberoot: number;
  3663 │ │           const KEY_currency: number;
  3664 │ │           const KEY_cursor: number;
  3665 │ │           const KEY_d: number;
  3666 │ │           const KEY_dabovedot: number;
  3667 │ │           const KEY_dagger: number;
  3668 │ │           const KEY_dcaron: number;
  3669 │ │           const KEY_dead_A: number;
  3670 │ │           const KEY_dead_E: number;
  3671 │ │           const KEY_dead_I: number;
  3672 │ │           const KEY_dead_O: number;
  3673 │ │           const KEY_dead_U: number;
  3674 │ │           const KEY_dead_a: number;
  3675 │ │           const KEY_dead_abovecomma: number;
  3676 │ │           const KEY_dead_abovedot: number;
  3677 │ │           const KEY_dead_abovereversedcomma: number;
  3678 │ │           const KEY_dead_abovering: number;
  3679 │ │           const KEY_dead_aboveverticalline: number;
  3680 │ │           const KEY_dead_acute: number;
  3681 │ │           const KEY_dead_belowbreve: number;
  3682 │ │           const KEY_dead_belowcircumflex: number;
  3683 │ │           const KEY_dead_belowcomma: number;
  3684 │ │           const KEY_dead_belowdiaeresis: number;
  3685 │ │           const KEY_dead_belowdot: number;
  3686 │ │           const KEY_dead_belowmacron: number;
  3687 │ │           const KEY_dead_belowring: number;
  3688 │ │           const KEY_dead_belowtilde: number;
  3689 │ │           const KEY_dead_belowverticalline: number;
  3690 │ │           const KEY_dead_breve: number;
  3691 │ │           const KEY_dead_capital_schwa: number;
  3692 │ │           const KEY_dead_caron: number;
  3693 │ │           const KEY_dead_cedilla: number;
  3694 │ │           const KEY_dead_circumflex: number;
  3695 │ │           const KEY_dead_currency: number;
  3696 │ │           const KEY_dead_dasia: number;
  3697 │ │           const KEY_dead_diaeresis: number;
  3698 │ │           const KEY_dead_doubleacute: number;
  3699 │ │           const KEY_dead_doublegrave: number;
  3700 │ │           const KEY_dead_e: number;
  3701 │ │           const KEY_dead_grave: number;
  3702 │ │           const KEY_dead_greek: number;
  3703 │ │           const KEY_dead_hook: number;
  3704 │ │           const KEY_dead_horn: number;
  3705 │ │           const KEY_dead_i: number;
  3706 │ │           const KEY_dead_invertedbreve: number;
  3707 │ │           const KEY_dead_iota: number;
  3708 │ │           const KEY_dead_longsolidusoverlay: number;
  3709 │ │           const KEY_dead_lowline: number;
  3710 │ │           const KEY_dead_macron: number;
  3711 │ │           const KEY_dead_o: number;
  3712 │ │           const KEY_dead_ogonek: number;
  3713 │ │           const KEY_dead_perispomeni: number;
  3714 │ │           const KEY_dead_psili: number;
  3715 │ │           const KEY_dead_semivoiced_sound: number;
  3716 │ │           const KEY_dead_small_schwa: number;
  3717 │ │           const KEY_dead_stroke: number;
  3718 │ │           const KEY_dead_tilde: number;
  3719 │ │           const KEY_dead_u: number;
  3720 │ │           const KEY_dead_voiced_sound: number;
  3721 │ │           const KEY_decimalpoint: number;
  3722 │ │           const KEY_degree: number;
  3723 │ │           const KEY_diaeresis: number;
  3724 │ │           const KEY_diamond: number;
  3725 │ │           const KEY_digitspace: number;
  3726 │ │           const KEY_dintegral: number;
  3727 │ │           const KEY_division: number;
  3728 │ │           const KEY_dollar: number;
  3729 │ │           const KEY_doubbaselinedot: number;
  3730 │ │           const KEY_doubleacute: number;
  3731 │ │           const KEY_doubledagger: number;
  3732 │ │           const KEY_doublelowquotemark: number;
  3733 │ │           const KEY_downarrow: number;
  3734 │ │           const KEY_downcaret: number;
  3735 │ │           const KEY_downshoe: number;
  3736 │ │           const KEY_downstile: number;
  3737 │ │           const KEY_downtack: number;
  3738 │ │           const KEY_dstroke: number;
  3739 │ │           const KEY_e: number;
  3740 │ │           const KEY_eabovedot: number;
  3741 │ │           const KEY_eacute: number;
  3742 │ │           const KEY_ebelowdot: number;
  3743 │ │           const KEY_ecaron: number;
  3744 │ │           const KEY_ecircumflex: number;
  3745 │ │           const KEY_ecircumflexacute: number;
  3746 │ │           const KEY_ecircumflexbelowdot: number;
  3747 │ │           const KEY_ecircumflexgrave: number;
  3748 │ │           const KEY_ecircumflexhook: number;
  3749 │ │           const KEY_ecircumflextilde: number;
  3750 │ │           const KEY_ediaeresis: number;
  3751 │ │           const KEY_egrave: number;
  3752 │ │           const KEY_ehook: number;
  3753 │ │           const KEY_eightsubscript: number;
  3754 │ │           const KEY_eightsuperior: number;
  3755 │ │           const KEY_elementof: number;
  3756 │ │           const KEY_ellipsis: number;
  3757 │ │           const KEY_em3space: number;
  3758 │ │           const KEY_em4space: number;
  3759 │ │           const KEY_emacron: number;
  3760 │ │           const KEY_emdash: number;
  3761 │ │           const KEY_emfilledcircle: number;
  3762 │ │           const KEY_emfilledrect: number;
  3763 │ │           const KEY_emopencircle: number;
  3764 │ │           const KEY_emopenrectangle: number;
  3765 │ │           const KEY_emptyset: number;
  3766 │ │           const KEY_emspace: number;
  3767 │ │           const KEY_endash: number;
  3768 │ │           const KEY_enfilledcircbullet: number;
  3769 │ │           const KEY_enfilledsqbullet: number;
  3770 │ │           const KEY_eng: number;
  3771 │ │           const KEY_enopencircbullet: number;
  3772 │ │           const KEY_enopensquarebullet: number;
  3773 │ │           const KEY_enspace: number;
  3774 │ │           const KEY_eogonek: number;
  3775 │ │           const KEY_equal: number;
  3776 │ │           const KEY_eth: number;
  3777 │ │           const KEY_etilde: number;
  3778 │ │           const KEY_exclam: number;
  3779 │ │           const KEY_exclamdown: number;
  3780 │ │           const KEY_ezh: number;
  3781 │ │           const KEY_f: number;
  3782 │ │           const KEY_fabovedot: number;
  3783 │ │           const KEY_femalesymbol: number;
  3784 │ │           const KEY_ff: number;
  3785 │ │           const KEY_figdash: number;
  3786 │ │           const KEY_filledlefttribullet: number;
  3787 │ │           const KEY_filledrectbullet: number;
  3788 │ │           const KEY_filledrighttribullet: number;
  3789 │ │           const KEY_filledtribulletdown: number;
  3790 │ │           const KEY_filledtribulletup: number;
  3791 │ │           const KEY_fiveeighths: number;
  3792 │ │           const KEY_fivesixths: number;
  3793 │ │           const KEY_fivesubscript: number;
  3794 │ │           const KEY_fivesuperior: number;
  3795 │ │           const KEY_fourfifths: number;
  3796 │ │           const KEY_foursubscript: number;
  3797 │ │           const KEY_foursuperior: number;
  3798 │ │           const KEY_fourthroot: number;
  3799 │ │           const KEY_function: number;
  3800 │ │           const KEY_g: number;
  3801 │ │           const KEY_gabovedot: number;
  3802 │ │           const KEY_gbreve: number;
  3803 │ │           const KEY_gcaron: number;
  3804 │ │           const KEY_gcedilla: number;
  3805 │ │           const KEY_gcircumflex: number;
  3806 │ │           const KEY_grave: number;
  3807 │ │           const KEY_greater: number;
  3808 │ │           const KEY_greaterthanequal: number;
  3809 │ │           const KEY_guillemotleft: number;
  3810 │ │           const KEY_guillemotright: number;
  3811 │ │           const KEY_h: number;
  3812 │ │           const KEY_hairspace: number;
  3813 │ │           const KEY_hcircumflex: number;
  3814 │ │           const KEY_heart: number;
  3815 │ │           const KEY_hebrew_aleph: number;
  3816 │ │           const KEY_hebrew_ayin: number;
  3817 │ │           const KEY_hebrew_bet: number;
  3818 │ │           const KEY_hebrew_beth: number;
  3819 │ │           const KEY_hebrew_chet: number;
  3820 │ │           const KEY_hebrew_dalet: number;
  3821 │ │           const KEY_hebrew_daleth: number;
  3822 │ │           const KEY_hebrew_doublelowline: number;
  3823 │ │           const KEY_hebrew_finalkaph: number;
  3824 │ │           const KEY_hebrew_finalmem: number;
  3825 │ │           const KEY_hebrew_finalnun: number;
  3826 │ │           const KEY_hebrew_finalpe: number;
  3827 │ │           const KEY_hebrew_finalzade: number;
  3828 │ │           const KEY_hebrew_finalzadi: number;
  3829 │ │           const KEY_hebrew_gimel: number;
  3830 │ │           const KEY_hebrew_gimmel: number;
  3831 │ │           const KEY_hebrew_he: number;
  3832 │ │           const KEY_hebrew_het: number;
  3833 │ │           const KEY_hebrew_kaph: number;
  3834 │ │           const KEY_hebrew_kuf: number;
  3835 │ │           const KEY_hebrew_lamed: number;
  3836 │ │           const KEY_hebrew_mem: number;
  3837 │ │           const KEY_hebrew_nun: number;
  3838 │ │           const KEY_hebrew_pe: number;
  3839 │ │           const KEY_hebrew_qoph: number;
  3840 │ │           const KEY_hebrew_resh: number;
  3841 │ │           const KEY_hebrew_samech: number;
  3842 │ │           const KEY_hebrew_samekh: number;
  3843 │ │           const KEY_hebrew_shin: number;
  3844 │ │           const KEY_hebrew_taf: number;
  3845 │ │           const KEY_hebrew_taw: number;
  3846 │ │           const KEY_hebrew_tet: number;
  3847 │ │           const KEY_hebrew_teth: number;
  3848 │ │           const KEY_hebrew_waw: number;
  3849 │ │           const KEY_hebrew_yod: number;
  3850 │ │           const KEY_hebrew_zade: number;
  3851 │ │           const KEY_hebrew_zadi: number;
  3852 │ │           const KEY_hebrew_zain: number;
  3853 │ │           const KEY_hebrew_zayin: number;
  3854 │ │           const KEY_hexagram: number;
  3855 │ │           const KEY_horizconnector: number;
  3856 │ │           const KEY_horizlinescan1: number;
  3857 │ │           const KEY_horizlinescan3: number;
  3858 │ │           const KEY_horizlinescan5: number;
  3859 │ │           const KEY_horizlinescan7: number;
  3860 │ │           const KEY_horizlinescan9: number;
  3861 │ │           const KEY_hstroke: number;
  3862 │ │           const KEY_ht: number;
  3863 │ │           const KEY_hyphen: number;
  3864 │ │           const KEY_i: number;
  3865 │ │           const KEY_iTouch: number;
  3866 │ │           const KEY_iacute: number;
  3867 │ │           const KEY_ibelowdot: number;
  3868 │ │           const KEY_ibreve: number;
  3869 │ │           const KEY_icircumflex: number;
  3870 │ │           const KEY_identical: number;
  3871 │ │           const KEY_idiaeresis: number;
  3872 │ │           const KEY_idotless: number;
  3873 │ │           const KEY_ifonlyif: number;
  3874 │ │           const KEY_igrave: number;
  3875 │ │           const KEY_ihook: number;
  3876 │ │           const KEY_imacron: number;
  3877 │ │           const KEY_implies: number;
  3878 │ │           const KEY_includedin: number;
  3879 │ │           const KEY_includes: number;
  3880 │ │           const KEY_infinity: number;
  3881 │ │           const KEY_integral: number;
  3882 │ │           const KEY_intersection: number;
  3883 │ │           const KEY_iogonek: number;
  3884 │ │           const KEY_itilde: number;
  3885 │ │           const KEY_j: number;
  3886 │ │           const KEY_jcircumflex: number;
  3887 │ │           const KEY_jot: number;
  3888 │ │           const KEY_k: number;
  3889 │ │           const KEY_kana_A: number;
  3890 │ │           const KEY_kana_CHI: number;
  3891 │ │           const KEY_kana_E: number;
  3892 │ │           const KEY_kana_FU: number;
  3893 │ │           const KEY_kana_HA: number;
  3894 │ │           const KEY_kana_HE: number;
  3895 │ │           const KEY_kana_HI: number;
  3896 │ │           const KEY_kana_HO: number;
  3897 │ │           const KEY_kana_HU: number;
  3898 │ │           const KEY_kana_I: number;
  3899 │ │           const KEY_kana_KA: number;
  3900 │ │           const KEY_kana_KE: number;
  3901 │ │           const KEY_kana_KI: number;
  3902 │ │           const KEY_kana_KO: number;
  3903 │ │           const KEY_kana_KU: number;
  3904 │ │           const KEY_kana_MA: number;
  3905 │ │           const KEY_kana_ME: number;
  3906 │ │           const KEY_kana_MI: number;
  3907 │ │           const KEY_kana_MO: number;
  3908 │ │           const KEY_kana_MU: number;
  3909 │ │           const KEY_kana_N: number;
  3910 │ │           const KEY_kana_NA: number;
  3911 │ │           const KEY_kana_NE: number;
  3912 │ │           const KEY_kana_NI: number;
  3913 │ │           const KEY_kana_NO: number;
  3914 │ │           const KEY_kana_NU: number;
  3915 │ │           const KEY_kana_O: number;
  3916 │ │           const KEY_kana_RA: number;
  3917 │ │           const KEY_kana_RE: number;
  3918 │ │           const KEY_kana_RI: number;
  3919 │ │           const KEY_kana_RO: number;
  3920 │ │           const KEY_kana_RU: number;
  3921 │ │           const KEY_kana_SA: number;
  3922 │ │           const KEY_kana_SE: number;
  3923 │ │           const KEY_kana_SHI: number;
  3924 │ │           const KEY_kana_SO: number;
  3925 │ │           const KEY_kana_SU: number;
  3926 │ │           const KEY_kana_TA: number;
  3927 │ │           const KEY_kana_TE: number;
  3928 │ │           const KEY_kana_TI: number;
  3929 │ │           const KEY_kana_TO: number;
  3930 │ │           const KEY_kana_TSU: number;
  3931 │ │           const KEY_kana_TU: number;
  3932 │ │           const KEY_kana_U: number;
  3933 │ │           const KEY_kana_WA: number;
  3934 │ │           const KEY_kana_WO: number;
  3935 │ │           const KEY_kana_YA: number;
  3936 │ │           const KEY_kana_YO: number;
  3937 │ │           const KEY_kana_YU: number;
  3938 │ │           const KEY_kana_a: number;
  3939 │ │           const KEY_kana_closingbracket: number;
  3940 │ │           const KEY_kana_comma: number;
  3941 │ │           const KEY_kana_conjunctive: number;
  3942 │ │           const KEY_kana_e: number;
  3943 │ │           const KEY_kana_fullstop: number;
  3944 │ │           const KEY_kana_i: number;
  3945 │ │           const KEY_kana_middledot: number;
  3946 │ │           const KEY_kana_o: number;
  3947 │ │           const KEY_kana_openingbracket: number;
  3948 │ │           const KEY_kana_switch: number;
  3949 │ │           const KEY_kana_tsu: number;
  3950 │ │           const KEY_kana_tu: number;
  3951 │ │           const KEY_kana_u: number;
  3952 │ │           const KEY_kana_ya: number;
  3953 │ │           const KEY_kana_yo: number;
  3954 │ │           const KEY_kana_yu: number;
  3955 │ │           const KEY_kappa: number;
  3956 │ │           const KEY_kcedilla: number;
  3957 │ │           const KEY_kra: number;
  3958 │ │           const KEY_l: number;
  3959 │ │           const KEY_lacute: number;
  3960 │ │           const KEY_latincross: number;
  3961 │ │           const KEY_lbelowdot: number;
  3962 │ │           const KEY_lcaron: number;
  3963 │ │           const KEY_lcedilla: number;
  3964 │ │           const KEY_leftanglebracket: number;
  3965 │ │           const KEY_leftarrow: number;
  3966 │ │           const KEY_leftcaret: number;
  3967 │ │           const KEY_leftdoublequotemark: number;
  3968 │ │           const KEY_leftmiddlecurlybrace: number;
  3969 │ │           const KEY_leftopentriangle: number;
  3970 │ │           const KEY_leftpointer: number;
  3971 │ │           const KEY_leftradical: number;
  3972 │ │           const KEY_leftshoe: number;
  3973 │ │           const KEY_leftsinglequotemark: number;
  3974 │ │           const KEY_leftt: number;
  3975 │ │           const KEY_lefttack: number;
  3976 │ │           const KEY_less: number;
  3977 │ │           const KEY_lessthanequal: number;
  3978 │ │           const KEY_lf: number;
  3979 │ │           const KEY_logicaland: number;
  3980 │ │           const KEY_logicalor: number;
  3981 │ │           const KEY_lowleftcorner: number;
  3982 │ │           const KEY_lowrightcorner: number;
  3983 │ │           const KEY_lstroke: number;
  3984 │ │           const KEY_m: number;
  3985 │ │           const KEY_mabovedot: number;
  3986 │ │           const KEY_macron: number;
  3987 │ │           const KEY_malesymbol: number;
  3988 │ │           const KEY_maltesecross: number;
  3989 │ │           const KEY_marker: number;
  3990 │ │           const KEY_masculine: number;
  3991 │ │           const KEY_minus: number;
  3992 │ │           const KEY_minutes: number;
  3993 │ │           const KEY_mu: number;
  3994 │ │           const KEY_multiply: number;
  3995 │ │           const KEY_musicalflat: number;
  3996 │ │           const KEY_musicalsharp: number;
  3997 │ │           const KEY_n: number;
  3998 │ │           const KEY_nabla: number;
  3999 │ │           const KEY_nacute: number;
  4000 │ │           const KEY_ncaron: number;
  4001 │ │           const KEY_ncedilla: number;
  4002 │ │           const KEY_ninesubscript: number;
  4003 │ │           const KEY_ninesuperior: number;
  4004 │ │           const KEY_nl: number;
  4005 │ │           const KEY_nobreakspace: number;
  4006 │ │           const KEY_notapproxeq: number;
  4007 │ │           const KEY_notelementof: number;
  4008 │ │           const KEY_notequal: number;
  4009 │ │           const KEY_notidentical: number;
  4010 │ │           const KEY_notsign: number;
  4011 │ │           const KEY_ntilde: number;
  4012 │ │           const KEY_numbersign: number;
  4013 │ │           const KEY_numerosign: number;
  4014 │ │           const KEY_o: number;
  4015 │ │           const KEY_oacute: number;
  4016 │ │           const KEY_obarred: number;
  4017 │ │           const KEY_obelowdot: number;
  4018 │ │           const KEY_ocaron: number;
  4019 │ │           const KEY_ocircumflex: number;
  4020 │ │           const KEY_ocircumflexacute: number;
  4021 │ │           const KEY_ocircumflexbelowdot: number;
  4022 │ │           const KEY_ocircumflexgrave: number;
  4023 │ │           const KEY_ocircumflexhook: number;
  4024 │ │           const KEY_ocircumflextilde: number;
  4025 │ │           const KEY_odiaeresis: number;
  4026 │ │           const KEY_odoubleacute: number;
  4027 │ │           const KEY_oe: number;
  4028 │ │           const KEY_ogonek: number;
  4029 │ │           const KEY_ograve: number;
  4030 │ │           const KEY_ohook: number;
  4031 │ │           const KEY_ohorn: number;
  4032 │ │           const KEY_ohornacute: number;
  4033 │ │           const KEY_ohornbelowdot: number;
  4034 │ │           const KEY_ohorngrave: number;
  4035 │ │           const KEY_ohornhook: number;
  4036 │ │           const KEY_ohorntilde: number;
  4037 │ │           const KEY_omacron: number;
  4038 │ │           const KEY_oneeighth: number;
  4039 │ │           const KEY_onefifth: number;
  4040 │ │           const KEY_onehalf: number;
  4041 │ │           const KEY_onequarter: number;
  4042 │ │           const KEY_onesixth: number;
  4043 │ │           const KEY_onesubscript: number;
  4044 │ │           const KEY_onesuperior: number;
  4045 │ │           const KEY_onethird: number;
  4046 │ │           const KEY_ooblique: number;
  4047 │ │           const KEY_openrectbullet: number;
  4048 │ │           const KEY_openstar: number;
  4049 │ │           const KEY_opentribulletdown: number;
  4050 │ │           const KEY_opentribulletup: number;
  4051 │ │           const KEY_ordfeminine: number;
  4052 │ │           const KEY_oslash: number;
  4053 │ │           const KEY_otilde: number;
  4054 │ │           const KEY_overbar: number;
  4055 │ │           const KEY_overline: number;
  4056 │ │           const KEY_p: number;
  4057 │ │           const KEY_pabovedot: number;
  4058 │ │           const KEY_paragraph: number;
  4059 │ │           const KEY_parenleft: number;
  4060 │ │           const KEY_parenright: number;
  4061 │ │           const KEY_partdifferential: number;
  4062 │ │           const KEY_partialderivative: number;
  4063 │ │           const KEY_percent: number;
  4064 │ │           const KEY_period: number;
  4065 │ │           const KEY_periodcentered: number;
  4066 │ │           const KEY_permille: number;
  4067 │ │           const KEY_phonographcopyright: number;
  4068 │ │           const KEY_plus: number;
  4069 │ │           const KEY_plusminus: number;
  4070 │ │           const KEY_prescription: number;
  4071 │ │           const KEY_prolongedsound: number;
  4072 │ │           const KEY_punctspace: number;
  4073 │ │           const KEY_q: number;
  4074 │ │           const KEY_quad: number;
  4075 │ │           const KEY_question: number;
  4076 │ │           const KEY_questiondown: number;
  4077 │ │           const KEY_quotedbl: number;
  4078 │ │           const KEY_quoteleft: number;
  4079 │ │           const KEY_quoteright: number;
  4080 │ │           const KEY_r: number;
  4081 │ │           const KEY_racute: number;
  4082 │ │           const KEY_radical: number;
  4083 │ │           const KEY_rcaron: number;
  4084 │ │           const KEY_rcedilla: number;
  4085 │ │           const KEY_registered: number;
  4086 │ │           const KEY_rightanglebracket: number;
  4087 │ │           const KEY_rightarrow: number;
  4088 │ │           const KEY_rightcaret: number;
  4089 │ │           const KEY_rightdoublequotemark: number;
  4090 │ │           const KEY_rightmiddlecurlybrace: number;
  4091 │ │           const KEY_rightmiddlesummation: number;
  4092 │ │           const KEY_rightopentriangle: number;
  4093 │ │           const KEY_rightpointer: number;
  4094 │ │           const KEY_rightshoe: number;
  4095 │ │           const KEY_rightsinglequotemark: number;
  4096 │ │           const KEY_rightt: number;
  4097 │ │           const KEY_righttack: number;
  4098 │ │           const KEY_s: number;
  4099 │ │           const KEY_sabovedot: number;
  4100 │ │           const KEY_sacute: number;
  4101 │ │           const KEY_scaron: number;
  4102 │ │           const KEY_scedilla: number;
  4103 │ │           const KEY_schwa: number;
  4104 │ │           const KEY_scircumflex: number;
  4105 │ │           const KEY_script_switch: number;
  4106 │ │           const KEY_seconds: number;
  4107 │ │           const KEY_section: number;
  4108 │ │           const KEY_semicolon: number;
  4109 │ │           const KEY_semivoicedsound: number;
  4110 │ │           const KEY_seveneighths: number;
  4111 │ │           const KEY_sevensubscript: number;
  4112 │ │           const KEY_sevensuperior: number;
  4113 │ │           const KEY_signaturemark: number;
  4114 │ │           const KEY_signifblank: number;
  4115 │ │           const KEY_similarequal: number;
  4116 │ │           const KEY_singlelowquotemark: number;
  4117 │ │           const KEY_sixsubscript: number;
  4118 │ │           const KEY_sixsuperior: number;
  4119 │ │           const KEY_slash: number;
  4120 │ │           const KEY_soliddiamond: number;
  4121 │ │           const KEY_space: number;
  4122 │ │           const KEY_squareroot: number;
  4123 │ │           const KEY_ssharp: number;
  4124 │ │           const KEY_sterling: number;
  4125 │ │           const KEY_stricteq: number;
  4126 │ │           const KEY_t: number;
  4127 │ │           const KEY_tabovedot: number;
  4128 │ │           const KEY_tcaron: number;
  4129 │ │           const KEY_tcedilla: number;
  4130 │ │           const KEY_telephone: number;
  4131 │ │           const KEY_telephonerecorder: number;
  4132 │ │           const KEY_therefore: number;
  4133 │ │           const KEY_thinspace: number;
  4134 │ │           const KEY_thorn: number;
  4135 │ │           const KEY_threeeighths: number;
  4136 │ │           const KEY_threefifths: number;
  4137 │ │           const KEY_threequarters: number;
  4138 │ │           const KEY_threesubscript: number;
  4139 │ │           const KEY_threesuperior: number;
  4140 │ │           const KEY_tintegral: number;
  4141 │ │           const KEY_topintegral: number;
  4142 │ │           const KEY_topleftparens: number;
  4143 │ │           const KEY_topleftradical: number;
  4144 │ │           const KEY_topleftsqbracket: number;
  4145 │ │           const KEY_topleftsummation: number;
  4146 │ │           const KEY_toprightparens: number;
  4147 │ │           const KEY_toprightsqbracket: number;
  4148 │ │           const KEY_toprightsummation: number;
  4149 │ │           const KEY_topt: number;
  4150 │ │           const KEY_topvertsummationconnector: number;
  4151 │ │           const KEY_trademark: number;
  4152 │ │           const KEY_trademarkincircle: number;
  4153 │ │           const KEY_tslash: number;
  4154 │ │           const KEY_twofifths: number;
  4155 │ │           const KEY_twosubscript: number;
  4156 │ │           const KEY_twosuperior: number;
  4157 │ │           const KEY_twothirds: number;
  4158 │ │           const KEY_u: number;
  4159 │ │           const KEY_uacute: number;
  4160 │ │           const KEY_ubelowdot: number;
  4161 │ │           const KEY_ubreve: number;
  4162 │ │           const KEY_ucircumflex: number;
  4163 │ │           const KEY_udiaeresis: number;
  4164 │ │           const KEY_udoubleacute: number;
  4165 │ │           const KEY_ugrave: number;
  4166 │ │           const KEY_uhook: number;
  4167 │ │           const KEY_uhorn: number;
  4168 │ │           const KEY_uhornacute: number;
  4169 │ │           const KEY_uhornbelowdot: number;
  4170 │ │           const KEY_uhorngrave: number;
  4171 │ │           const KEY_uhornhook: number;
  4172 │ │           const KEY_uhorntilde: number;
  4173 │ │           const KEY_umacron: number;
  4174 │ │           const KEY_underbar: number;
  4175 │ │           const KEY_underscore: number;
  4176 │ │           const KEY_union: number;
  4177 │ │           const KEY_uogonek: number;
  4178 │ │           const KEY_uparrow: number;
  4179 │ │           const KEY_upcaret: number;
  4180 │ │           const KEY_upleftcorner: number;
  4181 │ │           const KEY_uprightcorner: number;
  4182 │ │           const KEY_upshoe: number;
  4183 │ │           const KEY_upstile: number;
  4184 │ │           const KEY_uptack: number;
  4185 │ │           const KEY_uring: number;
  4186 │ │           const KEY_utilde: number;
  4187 │ │           const KEY_v: number;
  4188 │ │           const KEY_variation: number;
  4189 │ │           const KEY_vertbar: number;
  4190 │ │           const KEY_vertconnector: number;
  4191 │ │           const KEY_voicedsound: number;
  4192 │ │           const KEY_vt: number;
  4193 │ │           const KEY_w: number;
  4194 │ │           const KEY_wacute: number;
  4195 │ │           const KEY_wcircumflex: number;
  4196 │ │           const KEY_wdiaeresis: number;
  4197 │ │           const KEY_wgrave: number;
  4198 │ │           const KEY_x: number;
  4199 │ │           const KEY_xabovedot: number;
  4200 │ │           const KEY_y: number;
  4201 │ │           const KEY_yacute: number;
  4202 │ │           const KEY_ybelowdot: number;
  4203 │ │           const KEY_ycircumflex: number;
  4204 │ │           const KEY_ydiaeresis: number;
  4205 │ │           const KEY_yen: number;
  4206 │ │           const KEY_ygrave: number;
  4207 │ │           const KEY_yhook: number;
  4208 │ │           const KEY_ytilde: number;
  4209 │ │           const KEY_z: number;
  4210 │ │           const KEY_zabovedot: number;
  4211 │ │           const KEY_zacute: number;
  4212 │ │           const KEY_zcaron: number;
  4213 │ │           const KEY_zerosubscript: number;
  4214 │ │           const KEY_zerosuperior: number;
  4215 │ │           const KEY_zstroke: number;
  4216 │ │           const MAJOR_VERSION: number;
  4217 │ │           const MAX_TIMECOORD_AXES: number;
  4218 │ │           const MICRO_VERSION: number;
  4219 │ │           const MINOR_VERSION: number;
  4220 │ │           /**
  4221 │ │            * A special value, indicating that the background
  4222 │ │            * for a window should be inherited from the parent window.
  4223 │ │            */
  4224 │ │           const PARENT_RELATIVE: number;
  4225 │ │           /**
  4226 │ │            * This is the priority that the idle handler processing window updates
  4227 │ │            * is given in the
  4228 │ │            * [GLib Main Loop][glib-The-Main-Event-Loop].
  4229 │ │            */
  4230 │ │           const PRIORITY_REDRAW: number;
  4231 │ │           /**
  4232 │ │            * Appends gdk option entries to the passed in option group. This is
  4233 │ │            * not public API and must not be used by applications.
  4234 │ │            * @param group An option group.
  4235 │ │            */
  4236 │ │           function add_option_entries_libgtk_only(group: GLib.OptionGroup): void;
  4237 │ │           /**
  4238 │ │            * Finds or creates an atom corresponding to a given string.
  4239 │ │            * @param atom_name a string.
  4240 │ │            * @param only_if_exists if %TRUE, GDK is allowed to not create a new atom, but   just return %GDK_NONE if the requested atom doesn’t already   exists. Currently, the flag is ignored, since checking the   existance of an atom is as expensive as creating it.
  4241 │ │            * @returns the atom corresponding to @atom_name.
  4242 │ │            */
  4243 │ │           function atom_intern(atom_name: string, only_if_exists: boolean): Atom;
  4244 │ │           /**
  4245 │ │            * Finds or creates an atom corresponding to a given string.
  4246 │ │            *
  4247 │ │            * Note that this function is identical to gdk_atom_intern() except
  4248 │ │            * that if a new #GdkAtom is created the string itself is used rather
  4249 │ │            * than a copy. This saves memory, but can only be used if the string
  4250 │ │            * will always exist. It can be used with statically
  4251 │ │            * allocated strings in the main program, but not with statically
  4252 │ │            * allocated memory in dynamically loaded modules, if you expect to
  4253 │ │            * ever unload the module again (e.g. do not use this function in
  4254 │ │            * GTK+ theme engines).
  4255 │ │            * @param atom_name a static string
  4256 │ │            * @returns the atom corresponding to @atom_name
  4257 │ │            */
  4258 │ │           function atom_intern_static_string(atom_name: string): Atom;
  4259 │ │           /**
  4260 │ │            * Emits a short beep on the default display.
  4261 │ │            */
  4262 │ │           function beep(): void;
  4263 │ │           /**
  4264 │ │            * Creates a Cairo context for drawing to `window`.
  4265 │ │            *
  4266 │ │            * Note that calling cairo_reset_clip() on the resulting #cairo_t will
  4267 │ │            * produce undefined results, so avoid it at all costs.
  4268 │ │            *
  4269 │ │            * Typically, this function is used to draw on a #GdkWindow out of the paint
  4270 │ │            * cycle of the toolkit; this should be avoided, as it breaks various assumptions
  4271 │ │            * and optimizations.
  4272 │ │            *
  4273 │ │            * If you are drawing on a native #GdkWindow in response to a %GDK_EXPOSE event
  4274 │ │            * you should use gdk_window_begin_draw_frame() and gdk_drawing_context_get_cairo_context()
  4275 │ │            * instead. GTK will automatically do this for you when drawing a widget.
  4276 │ │            * @param window a #GdkWindow
  4277 │ │            * @returns A newly created Cairo context. Free with  cairo_destroy() when you are done drawing.
  4278 │ │            */
  4279 │ │           function cairo_create(window: Window): cairo.Context;
  4280 │ │           /**
  4281 │ │            * This is the main way to draw GL content in GTK+. It takes a render buffer ID
  4282 │ │            * (`source_type` == #GL_RENDERBUFFER) or a texture id (`source_type` == #GL_TEXTURE)
  4283 │ │            * and draws it onto `cr` with an OVER operation, respecting the current clip.
  4284 │ │            * The top left corner of the rectangle specified by `x,` `y,` `width` and `height`
  4285 │ │            * will be drawn at the current (0,0) position of the cairo_t.
  4286 │ │            *
  4287 │ │            * This will work for *all* cairo_t, as long as `window` is realized, but the
  4288 │ │            * fallback implementation that reads back the pixels from the buffer may be
  4289 │ │            * used in the general case. In the case of direct drawing to a window with
  4290 │ │            * no special effects applied to `cr` it will however use a more efficient
  4291 │ │            * approach.
  4292 │ │            *
  4293 │ │            * For #GL_RENDERBUFFER the code will always fall back to software for buffers
  4294 │ │            * with alpha components, so make sure you use #GL_TEXTURE if using alpha.
  4295 │ │            *
  4296 │ │            * Calling this may change the current GL context.
  4297 │ │            * @param cr a cairo context
  4298 │ │            * @param window The window we're rendering for (not necessarily into)
  4299 │ │            * @param source The GL ID of the source buffer
  4300 │ │            * @param source_type The type of the @source
  4301 │ │            * @param buffer_scale The scale-factor that the @source buffer is allocated for
  4302 │ │            * @param x The source x position in @source to start copying from in GL coordinates
  4303 │ │            * @param y The source y position in @source to start copying from in GL coordinates
  4304 │ │            * @param width The width of the region to draw
  4305 │ │            * @param height The height of the region to draw
  4306 │ │            */
  4307 │ │           function cairo_draw_from_gl(
  4308 │ │               cr: cairo.Context,
  4309 │ │               window: Window,
  4310 │ │               source: number,
  4311 │ │               source_type: number,
  4312 │ │               buffer_scale: number,
  4313 │ │               x: number,
  4314 │ │               y: number,
  4315 │ │               width: number,
  4316 │ │               height: number,
  4317 │ │           ): void;
  4318 │ │           /**
  4319 │ │            * This is a convenience function around cairo_clip_extents().
  4320 │ │            * It rounds the clip extents to integer coordinates and returns
  4321 │ │            * a boolean indicating if a clip area exists.
  4322 │ │            * @param cr a cairo context
  4323 │ │            * @returns %TRUE if a clip rectangle exists, %FALSE if all of @cr is     clipped and all drawing can be skipped
  4324 │ │            */
  4325 │ │           function cairo_get_clip_rectangle(cr: cairo.Context): [boolean, Rectangle | null];
  4326 │ │           /**
  4327 │ │            * Retrieves the #GdkDrawingContext that created the Cairo
  4328 │ │            * context `cr`.
  4329 │ │            * @param cr a Cairo context
  4330 │ │            * @returns a #GdkDrawingContext, if any is set
  4331 │ │            */
  4332 │ │           function cairo_get_drawing_context(cr: cairo.Context): DrawingContext | null;
  4333 │ │           /**
  4334 │ │            * Adds the given rectangle to the current path of `cr`.
  4335 │ │            * @param cr a cairo context
  4336 │ │            * @param rectangle a #GdkRectangle
  4337 │ │            */
  4338 │ │           function cairo_rectangle(cr: cairo.Context, rectangle: Rectangle): void;
  4339 │ │           /**
  4340 │ │            * Adds the given region to the current path of `cr`.
  4341 │ │            * @param cr a cairo context
  4342 │ │            * @param region a #cairo_region_t
  4343 │ │            */
  4344 │ │           function cairo_region(cr: cairo.Context, region: cairo.Region): void;
  4345 │ │           /**
  4346 │ │            * Creates region that describes covers the area where the given
  4347 │ │            * `surface` is more than 50% opaque.
  4348 │ │            *
  4349 │ │            * This function takes into account device offsets that might be
  4350 │ │            * set with cairo_surface_set_device_offset().
  4351 │ │            * @param surface a cairo surface
  4352 │ │            * @returns A #cairo_region_t; must be freed with cairo_region_destroy()
  4353 │ │            */
  4354 │ │           function cairo_region_create_from_surface(surface: cairo.Surface): cairo.Region;
  4355 │ │           /**
  4356 │ │            * Sets the specified #GdkColor as the source color of `cr`.
  4357 │ │            * @param cr a cairo context
  4358 │ │            * @param color a #GdkColor
  4359 │ │            */
  4360 │ │           function cairo_set_source_color(cr: cairo.Context, color: Color): void;
  4361 │ │           /**
  4362 │ │            * Sets the given pixbuf as the source pattern for `cr`.
  4363 │ │            *
  4364 │ │            * The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
  4365 │ │            * so that the origin of `pixbuf` is `pixbuf_x,` `pixbuf_y`.
  4366 │ │            * @param cr a cairo context
  4367 │ │            * @param pixbuf a #GdkPixbuf
  4368 │ │            * @param pixbuf_x X coordinate of location to place upper left corner of @pixbuf
  4369 │ │            * @param pixbuf_y Y coordinate of location to place upper left corner of @pixbuf
  4370 │ │            */
  4371 │ │           function cairo_set_source_pixbuf(
  4372 │ │               cr: cairo.Context,
  4373 │ │               pixbuf: GdkPixbuf.Pixbuf,
  4374 │ │               pixbuf_x: number,
  4375 │ │               pixbuf_y: number,
  4376 │ │           ): void;
  4377 │ │           /**
  4378 │ │            * Sets the specified #GdkRGBA as the source color of `cr`.
  4379 │ │            * @param cr a cairo context
  4380 │ │            * @param rgba a #GdkRGBA
  4381 │ │            */
  4382 │ │           function cairo_set_source_rgba(cr: cairo.Context, rgba: RGBA): void;
  4383 │ │           /**
  4384 │ │            * Sets the given window as the source pattern for `cr`.
  4385 │ │            *
  4386 │ │            * The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
  4387 │ │            * so that the origin of `window` is `x,` `y`. The window contains all its
  4388 │ │            * subwindows when rendering.
  4389 │ │            *
  4390 │ │            * Note that the contents of `window` are undefined outside of the
  4391 │ │            * visible part of `window,` so use this function with care.
  4392 │ │            * @param cr a cairo context
  4393 │ │            * @param window a #GdkWindow
  4394 │ │            * @param x X coordinate of location to place upper left corner of @window
  4395 │ │            * @param y Y coordinate of location to place upper left corner of @window
  4396 │ │            */
  4397 │ │           function cairo_set_source_window(cr: cairo.Context, window: Window, x: number, y: number): void;
  4398 │ │           /**
  4399 │ │            * Creates an image surface with the same contents as
  4400 │ │            * the pixbuf.
  4401 │ │            * @param pixbuf a #GdkPixbuf
  4402 │ │            * @param scale the scale of the new surface, or 0 to use same as @window
  4403 │ │            * @param for_window The window this will be drawn to, or %NULL
  4404 │ │            * @returns a new cairo surface, must be freed with cairo_surface_destroy()
  4405 │ │            */
  4406 │ │           function cairo_surface_create_from_pixbuf(
  4407 │ │               pixbuf: GdkPixbuf.Pixbuf,
  4408 │ │               scale: number,
  4409 │ │               for_window?: Window | null,
  4410 │ │           ): cairo.Surface;
  4411 │ │           /**
  4412 │ │            * Parses a textual specification of a color and fill in the
  4413 │ │            * `red,` `green,` and `blue` fields of a #GdkColor.
  4414 │ │            *
  4415 │ │            * The string can either one of a large set of standard names
  4416 │ │            * (taken from the X11 `rgb.txt` file), or it can be a hexadecimal
  4417 │ │            * value in the form “\#rgb” “\#rrggbb”, “\#rrrgggbbb” or
  4418 │ │            * “\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits of
  4419 │ │            * the red, green, and blue components of the color, respectively.
  4420 │ │            * (White in the four forms is “\#fff”, “\#ffffff”, “\#fffffffff”
  4421 │ │            * and “\#ffffffffffff”).
  4422 │ │            * @param spec the string specifying the color
  4423 │ │            * @returns %TRUE if the parsing succeeded
  4424 │ │            */
  4425 │ │           function color_parse(spec: string): [boolean, Color];
  4426 │ │           /**
  4427 │ │            * Disables multidevice support in GDK. This call must happen prior
  4428 │ │            * to gdk_display_open(), gtk_init(), gtk_init_with_args() or
  4429 │ │            * gtk_init_check() in order to take effect.
  4430 │ │            *
  4431 │ │            * Most common GTK+ applications won’t ever need to call this. Only
  4432 │ │            * applications that do mixed GDK/Xlib calls could want to disable
  4433 │ │            * multidevice support if such Xlib code deals with input devices in
  4434 │ │            * any way and doesn’t observe the presence of XInput 2.
  4435 │ │            */
  4436 │ │           function disable_multidevice(): void;
  4437 │ │           /**
  4438 │ │            * Aborts a drag without dropping.
  4439 │ │            *
  4440 │ │            * This function is called by the drag source.
  4441 │ │            *
  4442 │ │            * This function does not need to be called in managed drag and drop
  4443 │ │            * operations. See gdk_drag_context_manage_dnd() for more information.
  4444 │ │            * @param context a #GdkDragContext
  4445 │ │            * @param time_ the timestamp for this operation
  4446 │ │            */
  4447 │ │           function drag_abort(context: DragContext, time_: number): void;
  4448 │ │           /**
  4449 │ │            * Starts a drag and creates a new drag context for it.
  4450 │ │            * This function assumes that the drag is controlled by the
  4451 │ │            * client pointer device, use gdk_drag_begin_for_device() to
  4452 │ │            * begin a drag with a different device.
  4453 │ │            *
  4454 │ │            * This function is called by the drag source.
  4455 │ │            * @param window the source window for this drag.
  4456 │ │            * @param targets the offered targets,     as list of #GdkAtoms
  4457 │ │            * @returns a newly created #GdkDragContext
  4458 │ │            */
  4459 │ │           function drag_begin(window: Window, targets: Atom[]): DragContext;
  4460 │ │           /**
  4461 │ │            * Starts a drag and creates a new drag context for it.
  4462 │ │            *
  4463 │ │            * This function is called by the drag source.
  4464 │ │            * @param window the source window for this drag
  4465 │ │            * @param device the device that controls this drag
  4466 │ │            * @param targets the offered targets,     as list of #GdkAtoms
  4467 │ │            * @returns a newly created #GdkDragContext
  4468 │ │            */
  4469 │ │           function drag_begin_for_device(window: Window, device: Device, targets: Atom[]): DragContext;
  4470 │ │           /**
  4471 │ │            * Starts a drag and creates a new drag context for it.
  4472 │ │            *
  4473 │ │            * This function is called by the drag source.
  4474 │ │            * @param window the source window for this drag
  4475 │ │            * @param device the device that controls this drag
  4476 │ │            * @param targets the offered targets,     as list of #GdkAtoms
  4477 │ │            * @param x_root the x coordinate where the drag nominally started
  4478 │ │            * @param y_root the y coordinate where the drag nominally started
  4479 │ │            * @returns a newly created #GdkDragContext
  4480 │ │            */
  4481 │ │           function drag_begin_from_point(
  4482 │ │               window: Window,
  4483 │ │               device: Device,
  4484 │ │               targets: Atom[],
  4485 │ │               x_root: number,
  4486 │ │               y_root: number,
  4487 │ │           ): DragContext;
  4488 │ │           /**
  4489 │ │            * Drops on the current destination.
  4490 │ │            *
  4491 │ │            * This function is called by the drag source.
  4492 │ │            *
  4493 │ │            * This function does not need to be called in managed drag and drop
  4494 │ │            * operations. See gdk_drag_context_manage_dnd() for more information.
  4495 │ │            * @param context a #GdkDragContext
  4496 │ │            * @param time_ the timestamp for this operation
  4497 │ │            */
  4498 │ │           function drag_drop(context: DragContext, time_: number): void;
  4499 │ │           /**
  4500 │ │            * Inform GDK if the drop ended successfully. Passing %FALSE
  4501 │ │            * for `success` may trigger a drag cancellation animation.
  4502 │ │            *
  4503 │ │            * This function is called by the drag source, and should
  4504 │ │            * be the last call before dropping the reference to the
  4505 │ │            * `context`.
  4506 │ │            *
  4507 │ │            * The #GdkDragContext will only take the first gdk_drag_drop_done()
  4508 │ │            * call as effective, if this function is called multiple times,
  4509 │ │            * all subsequent calls will be ignored.
  4510 │ │            * @param context a #GdkDragContext
  4511 │ │            * @param success whether the drag was ultimatively successful
  4512 │ │            */
  4513 │ │           function drag_drop_done(context: DragContext, success: boolean): void;
  4514 │ │           /**
  4515 │ │            * Returns whether the dropped data has been successfully
  4516 │ │            * transferred. This function is intended to be used while
  4517 │ │            * handling a %GDK_DROP_FINISHED event, its return value is
  4518 │ │            * meaningless at other times.
  4519 │ │            * @param context a #GdkDragContext
  4520 │ │            * @returns %TRUE if the drop was successful.
  4521 │ │            */
  4522 │ │           function drag_drop_succeeded(context: DragContext): boolean;
  4523 │ │           /**
  4524 │ │            * Finds the destination window and DND protocol to use at the
  4525 │ │            * given pointer position.
  4526 │ │            *
  4527 │ │            * This function is called by the drag source to obtain the
  4528 │ │            * `dest_window` and `protocol` parameters for gdk_drag_motion().
  4529 │ │            * @param context a #GdkDragContext
  4530 │ │            * @param drag_window a window which may be at the pointer position, but     should be ignored, since it is put up by the drag source as an icon
  4531 │ │            * @param screen the screen where the destination window is sought
  4532 │ │            * @param x_root the x position of the pointer in root coordinates
  4533 │ │            * @param y_root the y position of the pointer in root coordinates
  4534 │ │            */
  4535 │ │           function drag_find_window_for_screen(
  4536 │ │               context: DragContext,
  4537 │ │               drag_window: Window,
  4538 │ │               screen: Screen,
  4539 │ │               x_root: number,
  4540 │ │               y_root: number,
  4541 │ │           ): [Window, DragProtocol];
  4542 │ │           /**
  4543 │ │            * Returns the selection atom for the current source window.
  4544 │ │            * @param context a #GdkDragContext.
  4545 │ │            * @returns the selection atom, or %GDK_NONE
  4546 │ │            */
  4547 │ │           function drag_get_selection(context: DragContext): Atom;
  4548 │ │           /**
  4549 │ │            * Updates the drag context when the pointer moves or the
  4550 │ │            * set of actions changes.
  4551 │ │            *
  4552 │ │            * This function is called by the drag source.
  4553 │ │            *
  4554 │ │            * This function does not need to be called in managed drag and drop
  4555 │ │            * operations. See gdk_drag_context_manage_dnd() for more information.
  4556 │ │            * @param context a #GdkDragContext
  4557 │ │            * @param dest_window the new destination window, obtained by     gdk_drag_find_window()
  4558 │ │            * @param protocol the DND protocol in use, obtained by gdk_drag_find_window()
  4559 │ │            * @param x_root the x position of the pointer in root coordinates
  4560 │ │            * @param y_root the y position of the pointer in root coordinates
  4561 │ │            * @param suggested_action the suggested action
  4562 │ │            * @param possible_actions the possible actions
  4563 │ │            * @param time_ the timestamp for this operation
  4564 │ │            */
  4565 │ │           function drag_motion(
  4566 │ │               context: DragContext,
  4567 │ │               dest_window: Window,
  4568 │ │               protocol: DragProtocol | null,
  4569 │ │               x_root: number,
  4570 │ │               y_root: number,
  4571 │ │               suggested_action: DragAction | null,
  4572 │ │               possible_actions: DragAction | null,
  4573 │ │               time_: number,
  4574 │ │           ): boolean;
  4575 │ │           /**
  4576 │ │            * Selects one of the actions offered by the drag source.
  4577 │ │            *
  4578 │ │            * This function is called by the drag destination in response to
  4579 │ │            * gdk_drag_motion() called by the drag source.
  4580 │ │            * @param context a #GdkDragContext
  4581 │ │            * @param action the selected action which will be taken when a drop happens,    or 0 to indicate that a drop will not be accepted
  4582 │ │            * @param time_ the timestamp for this operation
  4583 │ │            */
  4584 │ │           function drag_status(context: DragContext, action: DragAction | null, time_: number): void;
  4585 │ │           /**
  4586 │ │            * Ends the drag operation after a drop.
  4587 │ │            *
  4588 │ │            * This function is called by the drag destination.
  4589 │ │            * @param context a #GdkDragContext
  4590 │ │            * @param success %TRUE if the data was successfully received
  4591 │ │            * @param time_ the timestamp for this operation
  4592 │ │            */
  4593 │ │           function drop_finish(context: DragContext, success: boolean, time_: number): void;
  4594 │ │           /**
  4595 │ │            * Accepts or rejects a drop.
  4596 │ │            *
  4597 │ │            * This function is called by the drag destination in response
  4598 │ │            * to a drop initiated by the drag source.
  4599 │ │            * @param context a #GdkDragContext
  4600 │ │            * @param accepted %TRUE if the drop is accepted
  4601 │ │            * @param time_ the timestamp for this operation
  4602 │ │            */
  4603 │ │           function drop_reply(context: DragContext, accepted: boolean, time_: number): void;
  4604 │ │           /**
  4605 │ │            * Removes an error trap pushed with gdk_error_trap_push().
  4606 │ │            * May block until an error has been definitively received
  4607 │ │            * or not received from the X server. gdk_error_trap_pop_ignored()
  4608 │ │            * is preferred if you don’t need to know whether an error
  4609 │ │            * occurred, because it never has to block. If you don't
  4610 │ │            * need the return value of gdk_error_trap_pop(), use
  4611 │ │            * gdk_error_trap_pop_ignored().
  4612 │ │            *
  4613 │ │            * Prior to GDK 3.0, this function would not automatically
  4614 │ │            * sync for you, so you had to gdk_flush() if your last
  4615 │ │            * call to Xlib was not a blocking round trip.
  4616 │ │            * @returns X error code or 0 on success
  4617 │ │            */
  4618 │ │           function error_trap_pop(): number;
  4619 │ │           /**
  4620 │ │            * Removes an error trap pushed with gdk_error_trap_push(), but
  4621 │ │            * without bothering to wait and see whether an error occurred.  If an
  4622 │ │            * error arrives later asynchronously that was triggered while the
  4623 │ │            * trap was pushed, that error will be ignored.
  4624 │ │            */
  4625 │ │           function error_trap_pop_ignored(): void;
  4626 │ │           /**
  4627 │ │            * This function allows X errors to be trapped instead of the normal
  4628 │ │            * behavior of exiting the application. It should only be used if it
  4629 │ │            * is not possible to avoid the X error in any other way. Errors are
  4630 │ │            * ignored on all #GdkDisplay currently known to the
  4631 │ │            * #GdkDisplayManager. If you don’t care which error happens and just
  4632 │ │            * want to ignore everything, pop with gdk_error_trap_pop_ignored().
  4633 │ │            * If you need the error code, use gdk_error_trap_pop() which may have
  4634 │ │            * to block and wait for the error to arrive from the X server.
  4635 │ │            *
  4636 │ │            * This API exists on all platforms but only does anything on X.
  4637 │ │            *
  4638 │ │            * You can use gdk_x11_display_error_trap_push() to ignore errors
  4639 │ │            * on only a single display.
  4640 │ │            *
  4641 │ │            * ## Trapping an X error
  4642 │ │            *
  4643 │ │            *
  4644 │ │            * ```c
  4645 │ │            * gdk_error_trap_push ();
  4646 │ │            *
  4647 │ │            *  // ... Call the X function which may cause an error here ...
  4648 │ │            *
  4649 │ │            *
  4650 │ │            * if (gdk_error_trap_pop ())
  4651 │ │            *  {
  4652 │ │            *    // ... Handle the error here ...
  4653 │ │            *  }
  4654 │ │            * ```
  4655 │ │            *
  4656 │ │            */
  4657 │ │           function error_trap_push(): void;
  4658 │ │           /**
  4659 │ │            * Checks all open displays for a #GdkEvent to process,to be processed
  4660 │ │            * on, fetching events from the windowing system if necessary.
  4661 │ │            * See gdk_display_get_event().
  4662 │ │            * @returns the next #GdkEvent to be processed, or %NULL if no events are pending. The returned #GdkEvent should be freed with gdk_event_free().
  4663 │ │            */
  4664 │ │           function event_get(): Event | null;
  4665 │ │           /**
  4666 │ │            * Sets the function to call to handle all events from GDK.
  4667 │ │            *
  4668 │ │            * Note that GTK+ uses this to install its own event handler, so it is
  4669 │ │            * usually not useful for GTK+ applications. (Although an application
  4670 │ │            * can call this function then call gtk_main_do_event() to pass
  4671 │ │            * events to GTK+.)
  4672 │ │            * @param func the function to call to handle events from GDK.
  4673 │ │            */
  4674 │ │           function event_handler_set(func: EventFunc): void;
  4675 │ │           /**
  4676 │ │            * If there is an event waiting in the event queue of some open
  4677 │ │            * display, returns a copy of it. See gdk_display_peek_event().
  4678 │ │            * @returns a copy of the first #GdkEvent on some event queue, or %NULL if no events are in any queues. The returned #GdkEvent should be freed with gdk_event_free().
  4679 │ │            */
  4680 │ │           function event_peek(): Event | null;
  4681 │ │           /**
  4682 │ │            * Request more motion notifies if `event` is a motion notify hint event.
  4683 │ │            *
  4684 │ │            * This function should be used instead of gdk_window_get_pointer() to
  4685 │ │            * request further motion notifies, because it also works for extension
  4686 │ │            * events where motion notifies are provided for devices other than the
  4687 │ │            * core pointer. Coordinate extraction, processing and requesting more
  4688 │ │            * motion events from a %GDK_MOTION_NOTIFY event usually works like this:
  4689 │ │            *
  4690 │ │            *
  4691 │ │            * ```c
  4692 │ │            * {
  4693 │ │            *   // motion_event handler
  4694 │ │            *   x = motion_event->x;
  4695 │ │            *   y = motion_event->y;
  4696 │ │            *   // handle (x,y) motion
  4697 │ │            *   gdk_event_request_motions (motion_event); // handles is_hint events
  4698 │ │            * }
  4699 │ │            * ```
  4700 │ │            *
  4701 │ │            * @param event a valid #GdkEvent
  4702 │ │            */
  4703 │ │           function event_request_motions(event: EventMotion): void;
  4704 │ │           /**
  4705 │ │            * If both events contain X/Y information, this function will return %TRUE
  4706 │ │            * and return in `angle` the relative angle from `event1` to `event2`. The rotation
  4707 │ │            * direction for positive angles is from the positive X axis towards the positive
  4708 │ │            * Y axis.
  4709 │ │            * @param event1 first #GdkEvent
  4710 │ │            * @param event2 second #GdkEvent
  4711 │ │            * @returns %TRUE if the angle could be calculated.
  4712 │ │            */
  4713 │ │           function events_get_angle(event1: Event, event2: Event): [boolean, number];
  4714 │ │           /**
  4715 │ │            * If both events contain X/Y information, the center of both coordinates
  4716 │ │            * will be returned in `x` and `y`.
  4717 │ │            * @param event1 first #GdkEvent
  4718 │ │            * @param event2 second #GdkEvent
  4719 │ │            * @returns %TRUE if the center could be calculated.
  4720 │ │            */
  4721 │ │           function events_get_center(event1: Event, event2: Event): [boolean, number, number];
  4722 │ │           /**
  4723 │ │            * If both events have X/Y information, the distance between both coordinates
  4724 │ │            * (as in a straight line going from `event1` to `event2`) will be returned.
  4725 │ │            * @param event1 first #GdkEvent
  4726 │ │            * @param event2 second #GdkEvent
  4727 │ │            * @returns %TRUE if the distance could be calculated.
  4728 │ │            */
  4729 │ │           function events_get_distance(event1: Event, event2: Event): [boolean, number];
  4730 │ │           /**
  4731 │ │            * Checks if any events are ready to be processed for any display.
  4732 │ │            * @returns %TRUE if any events are pending.
  4733 │ │            */
  4734 │ │           function events_pending(): boolean;
  4735 │ │           /**
  4736 │ │            * Flushes the output buffers of all display connections and waits
  4737 │ │            * until all requests have been processed.
  4738 │ │            * This is rarely needed by applications.
  4739 │ │            */
  4740 │ │           function flush(): void;
  4741 │ │           /**
  4742 │ │            * Obtains the root window (parent all other windows are inside)
  4743 │ │            * for the default display and screen.
  4744 │ │            * @returns the default root window
  4745 │ │            */
  4746 │ │           function get_default_root_window(): Window;
  4747 │ │           /**
  4748 │ │            * Gets the name of the display, which usually comes from the
  4749 │ │            * `DISPLAY` environment variable or the
  4750 │ │            * `--display` command line option.
  4751 │ │            * @returns the name of the display.
  4752 │ │            */
  4753 │ │           function get_display(): string;
  4754 │ │           /**
  4755 │ │            * Gets the display name specified in the command line arguments passed
  4756 │ │            * to gdk_init() or gdk_parse_args(), if any.
  4757 │ │            * @returns the display name, if specified explicitly,   otherwise %NULL this string is owned by GTK+ and must not be   modified or freed.
  4758 │ │            */
  4759 │ │           function get_display_arg_name(): string | null;
  4760 │ │           /**
  4761 │ │            * Gets the program class. Unless the program class has explicitly
  4762 │ │            * been set with gdk_set_program_class() or with the `--class`
  4763 │ │            * commandline option, the default value is the program name (determined
  4764 │ │            * with g_get_prgname()) with the first character converted to uppercase.
  4765 │ │            * @returns the program class.
  4766 │ │            */
  4767 │ │           function get_program_class(): string;
  4768 │ │           /**
  4769 │ │            * Gets whether event debugging output is enabled.
  4770 │ │            * @returns %TRUE if event debugging output is enabled.
  4771 │ │            */
  4772 │ │           function get_show_events(): boolean;
  4773 │ │           function gl_error_quark(): GLib.Quark;
  4774 │ │           /**
  4775 │ │            * Initializes the GDK library and connects to the windowing system.
  4776 │ │            * If initialization fails, a warning message is output and the application
  4777 │ │            * terminates with a call to `exit(1)`.
  4778 │ │            *
  4779 │ │            * Any arguments used by GDK are removed from the array and `argc` and `argv`
  4780 │ │            * are updated accordingly.
  4781 │ │            *
  4782 │ │            * GTK+ initializes GDK in gtk_init() and so this function is not usually
  4783 │ │            * needed by GTK+ applications.
  4784 │ │            * @param argv the array of command line arguments.
  4785 │ │            */
  4786 │ │           function init(argv: string[]): string[];
  4787 │ │           /**
  4788 │ │            * Initializes the GDK library and connects to the windowing system,
  4789 │ │            * returning %TRUE on success.
  4790 │ │            *
  4791 │ │            * Any arguments used by GDK are removed from the array and `argc` and `argv`
  4792 │ │            * are updated accordingly.
  4793 │ │            *
  4794 │ │            * GTK+ initializes GDK in gtk_init() and so this function is not usually
  4795 │ │            * needed by GTK+ applications.
  4796 │ │            * @param argv the array of command line arguments.
  4797 │ │            * @returns %TRUE if initialization succeeded.
  4798 │ │            */
  4799 │ │           function init_check(argv: string[]): [boolean, string[]];
  4800 │ │           /**
  4801 │ │            * Grabs the keyboard so that all events are passed to this
  4802 │ │            * application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
  4803 │ │            * This overrides any previous keyboard grab by this client.
  4804 │ │            *
  4805 │ │            * If you set up anything at the time you take the grab that needs to be cleaned
  4806 │ │            * up when the grab ends, you should handle the #GdkEventGrabBroken events that
  4807 │ │            * are emitted when the grab ends unvoluntarily.
  4808 │ │            * @param window the #GdkWindow which will own the grab (the grab window).
  4809 │ │            * @param owner_events if %FALSE then all keyboard events are reported with respect to   @window. If %TRUE then keyboard events for this application are   reported as normal, but keyboard events outside this application   are reported with respect to @window. Both key press and key   release events are always reported, independant of the event mask   set by the application.
  4810 │ │            * @param time_ a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is   available.
  4811 │ │            * @returns %GDK_GRAB_SUCCESS if the grab was successful.
  4812 │ │            */
  4813 │ │           function keyboard_grab(window: Window, owner_events: boolean, time_: number): GrabStatus;
  4814 │ │           /**
  4815 │ │            * Ungrabs the keyboard on the default display, if it is grabbed by this
  4816 │ │            * application.
  4817 │ │            * @param time_ a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no        timestamp is available.
  4818 │ │            */
  4819 │ │           function keyboard_ungrab(time_: number): void;
  4820 │ │           /**
  4821 │ │            * Obtains the upper- and lower-case versions of the keyval `symbol`.
  4822 │ │            * Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.
  4823 │ │            * @param symbol a keyval
  4824 │ │            */
  4825 │ │           function keyval_convert_case(symbol: number): [number, number];
  4826 │ │           /**
  4827 │ │            * Converts a key name to a key value.
  4828 │ │            *
  4829 │ │            * The names are the same as those in the
  4830 │ │            * `gdk/gdkkeysyms.h` header file
  4831 │ │            * but without the leading “GDK_KEY_”.
  4832 │ │            * @param keyval_name a key name
  4833 │ │            * @returns the corresponding key value, or %GDK_KEY_VoidSymbol     if the key name is not a valid key
  4834 │ │            */
  4835 │ │           function keyval_from_name(keyval_name: string): number;
  4836 │ │           /**
  4837 │ │            * Returns %TRUE if the given key value is in lower case.
  4838 │ │            * @param keyval a key value.
  4839 │ │            * @returns %TRUE if @keyval is in lower case, or if @keyval is not   subject to case conversion.
  4840 │ │            */
  4841 │ │           function keyval_is_lower(keyval: number): boolean;
  4842 │ │           /**
  4843 │ │            * Returns %TRUE if the given key value is in upper case.
  4844 │ │            * @param keyval a key value.
  4845 │ │            * @returns %TRUE if @keyval is in upper case, or if @keyval is not subject to  case conversion.
  4846 │ │            */
  4847 │ │           function keyval_is_upper(keyval: number): boolean;
  4848 │ │           /**
  4849 │ │            * Converts a key value into a symbolic name.
  4850 │ │            *
  4851 │ │            * The names are the same as those in the
  4852 │ │            * `gdk/gdkkeysyms.h` header file
  4853 │ │            * but without the leading “GDK_KEY_”.
  4854 │ │            * @param keyval a key value
  4855 │ │            * @returns a string containing the name     of the key, or %NULL if @keyval is not a valid key. The string     should not be modified.
  4856 │ │            */
  4857 │ │           function keyval_name(keyval: number): string | null;
  4858 │ │           /**
  4859 │ │            * Converts a key value to lower case, if applicable.
  4860 │ │            * @param keyval a key value.
  4861 │ │            * @returns the lower case form of @keyval, or @keyval itself if it is already  in lower case or it is not subject to case conversion.
  4862 │ │            */
  4863 │ │           function keyval_to_lower(keyval: number): number;
  4864 │ │           /**
  4865 │ │            * Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
  4866 │ │            * character.
  4867 │ │            * @param keyval a GDK key symbol
  4868 │ │            * @returns the corresponding unicode character, or 0 if there               is no corresponding character.
  4869 │ │            */
  4870 │ │           function keyval_to_unicode(keyval: number): number;
  4871 │ │           /**
  4872 │ │            * Converts a key value to upper case, if applicable.
  4873 │ │            * @param keyval a key value.
  4874 │ │            * @returns the upper case form of @keyval, or @keyval itself if it is already   in upper case or it is not subject to case conversion.
  4875 │ │            */
  4876 │ │           function keyval_to_upper(keyval: number): number;
  4877 │ │           /**
  4878 │ │            * Lists the available visuals for the default screen.
  4879 │ │            * (See gdk_screen_list_visuals())
  4880 │ │            * A visual describes a hardware image data format.
  4881 │ │            * For example, a visual might support 24-bit color, or 8-bit color,
  4882 │ │            * and might expect pixels to be in a certain format.
  4883 │ │            *
  4884 │ │            * Call g_list_free() on the return value when you’re finished with it.
  4885 │ │            * @returns a list of visuals; the list must be freed, but not its contents
  4886 │ │            */
  4887 │ │           function list_visuals(): Visual[];
  4888 │ │           /**
  4889 │ │            * Indicates to the GUI environment that the application has finished
  4890 │ │            * loading. If the applications opens windows, this function is
  4891 │ │            * normally called after opening the application’s initial set of
  4892 │ │            * windows.
  4893 │ │            *
  4894 │ │            * GTK+ will call this function automatically after opening the first
  4895 │ │            * #GtkWindow unless gtk_window_set_auto_startup_notification() is called
  4896 │ │            * to disable that feature.
  4897 │ │            */
  4898 │ │           function notify_startup_complete(): void;
  4899 │ │           /**
  4900 │ │            * Indicates to the GUI environment that the application has
  4901 │ │            * finished loading, using a given identifier.
  4902 │ │            *
  4903 │ │            * GTK+ will call this function automatically for #GtkWindow
  4904 │ │            * with custom startup-notification identifier unless
  4905 │ │            * gtk_window_set_auto_startup_notification() is called to
  4906 │ │            * disable that feature.
  4907 │ │            * @param startup_id a startup-notification identifier, for which     notification process should be completed
  4908 │ │            */
  4909 │ │           function notify_startup_complete_with_id(startup_id: string): void;
  4910 │ │           /**
  4911 │ │            * Gets the window that `window` is embedded in.
  4912 │ │            * @param window a #GdkWindow
  4913 │ │            * @returns the embedding #GdkWindow, or     %NULL if @window is not an mbedded offscreen window
  4914 │ │            */
  4915 │ │           function offscreen_window_get_embedder(window: Window): Window | null;
  4916 │ │           /**
  4917 │ │            * Gets the offscreen surface that an offscreen window renders into.
  4918 │ │            * If you need to keep this around over window resizes, you need to
  4919 │ │            * add a reference to it.
  4920 │ │            * @param window a #GdkWindow
  4921 │ │            * @returns The offscreen surface, or   %NULL if not offscreen
  4922 │ │            */
  4923 │ │           function offscreen_window_get_surface(window: Window): cairo.Surface | null;
  4924 │ │           /**
  4925 │ │            * Sets `window` to be embedded in `embedder`.
  4926 │ │            *
  4927 │ │            * To fully embed an offscreen window, in addition to calling this
  4928 │ │            * function, it is also necessary to handle the #GdkWindow::pick-embedded-child
  4929 │ │            * signal on the `embedder` and the #GdkWindow::to-embedder and
  4930 │ │            * #GdkWindow::from-embedder signals on `window`.
  4931 │ │            * @param window a #GdkWindow
  4932 │ │            * @param embedder the #GdkWindow that @window gets embedded in
  4933 │ │            */
  4934 │ │           function offscreen_window_set_embedder(window: Window, embedder: Window): void;
  4935 │ │           /**
  4936 │ │            * Creates a #PangoContext for the default GDK screen.
  4937 │ │            *
  4938 │ │            * The context must be freed when you’re finished with it.
  4939 │ │            *
  4940 │ │            * When using GTK+, normally you should use gtk_widget_get_pango_context()
  4941 │ │            * instead of this function, to get the appropriate context for
  4942 │ │            * the widget you intend to render text onto.
  4943 │ │            *
  4944 │ │            * The newly created context will have the default font options (see
  4945 │ │            * #cairo_font_options_t) for the default screen; if these options
  4946 │ │            * change it will not be updated. Using gtk_widget_get_pango_context()
  4947 │ │            * is more convenient if you want to keep a context around and track
  4948 │ │            * changes to the screen’s font rendering settings.
  4949 │ │            * @returns a new #PangoContext for the default display
  4950 │ │            */
  4951 │ │           function pango_context_get(): Pango.Context;
  4952 │ │           /**
  4953 │ │            * Creates a #PangoContext for `display`.
  4954 │ │            *
  4955 │ │            * The context must be freed when you’re finished with it.
  4956 │ │            *
  4957 │ │            * When using GTK+, normally you should use gtk_widget_get_pango_context()
  4958 │ │            * instead of this function, to get the appropriate context for
  4959 │ │            * the widget you intend to render text onto.
  4960 │ │            *
  4961 │ │            * The newly created context will have the default font options
  4962 │ │            * (see #cairo_font_options_t) for the display; if these options
  4963 │ │            * change it will not be updated. Using gtk_widget_get_pango_context()
  4964 │ │            * is more convenient if you want to keep a context around and track
  4965 │ │            * changes to the font rendering settings.
  4966 │ │            * @param display the #GdkDisplay for which the context is to be created
  4967 │ │            * @returns a new #PangoContext for @display
  4968 │ │            */
  4969 │ │           function pango_context_get_for_display(display: Display): Pango.Context;
  4970 │ │           /**
  4971 │ │            * Creates a #PangoContext for `screen`.
  4972 │ │            *
  4973 │ │            * The context must be freed when you’re finished with it.
  4974 │ │            *
  4975 │ │            * When using GTK+, normally you should use gtk_widget_get_pango_context()
  4976 │ │            * instead of this function, to get the appropriate context for
  4977 │ │            * the widget you intend to render text onto.
  4978 │ │            *
  4979 │ │            * The newly created context will have the default font options
  4980 │ │            * (see #cairo_font_options_t) for the screen; if these options
  4981 │ │            * change it will not be updated. Using gtk_widget_get_pango_context()
  4982 │ │            * is more convenient if you want to keep a context around and track
  4983 │ │            * changes to the screen’s font rendering settings.
  4984 │ │            * @param screen the #GdkScreen for which the context is to be created.
  4985 │ │            * @returns a new #PangoContext for @screen
  4986 │ │            */
  4987 │ │           function pango_context_get_for_screen(screen: Screen): Pango.Context;
  4988 │ │           /**
  4989 │ │            * Parse command line arguments, and store for future
  4990 │ │            * use by calls to gdk_display_open().
  4991 │ │            *
  4992 │ │            * Any arguments used by GDK are removed from the array and `argc` and `argv` are
  4993 │ │            * updated accordingly.
  4994 │ │            *
  4995 │ │            * You shouldn’t call this function explicitly if you are using
  4996 │ │            * gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().
  4997 │ │            * @param argv the array of command line arguments.
  4998 │ │            */
  4999 │ │           function parse_args(argv: string[]): string[];
  5000 │ │           /**
  5001 │ │            * Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
  5002 │ │            * representation inside a #GdkPixbuf. This allows you to efficiently read
  5003 │ │            * individual pixels from cairo surfaces. For #GdkWindows, use
  5004 │ │            * gdk_pixbuf_get_from_window() instead.
  5005 │ │            *
  5006 │ │            * This function will create an RGB pixbuf with 8 bits per channel.
  5007 │ │            * The pixbuf will contain an alpha channel if the `surface` contains one.
  5008 │ │            * @param surface surface to copy from
  5009 │ │            * @param src_x Source X coordinate within @surface
  5010 │ │            * @param src_y Source Y coordinate within @surface
  5011 │ │            * @param width Width in pixels of region to get
  5012 │ │            * @param height Height in pixels of region to get
  5013 │ │            * @returns A newly-created pixbuf with a     reference count of 1, or %NULL on error
  5014 │ │            */
  5015 │ │           function pixbuf_get_from_surface(
  5016 │ │               surface: cairo.Surface,
  5017 │ │               src_x: number,
  5018 │ │               src_y: number,
  5019 │ │               width: number,
  5020 │ │               height: number,
  5021 │ │           ): GdkPixbuf.Pixbuf | null;
  5022 │ │           /**
  5023 │ │            * Transfers image data from a #GdkWindow and converts it to an RGB(A)
  5024 │ │            * representation inside a #GdkPixbuf.
  5025 │ │            *
  5026 │ │            * In other words, copies image data from a server-side drawable to a
  5027 │ │            * client-side RGB(A) buffer. This allows you to efficiently read
  5028 │ │            * individual pixels on the client side.
  5029 │ │            *
  5030 │ │            * This function will create an RGB pixbuf with 8 bits per channel with
  5031 │ │            * the size specified by the `width` and `height` arguments scaled by the
  5032 │ │            * scale factor of `window`. The pixbuf will contain an alpha channel if
  5033 │ │            * the `window` contains one.
  5034 │ │            *
  5035 │ │            * If the window is off the screen, then there is no image data in the
  5036 │ │            * obscured/offscreen regions to be placed in the pixbuf. The contents of
  5037 │ │            * portions of the pixbuf corresponding to the offscreen region are
  5038 │ │            * undefined.
  5039 │ │            *
  5040 │ │            * If the window you’re obtaining data from is partially obscured by
  5041 │ │            * other windows, then the contents of the pixbuf areas corresponding
  5042 │ │            * to the obscured regions are undefined.
  5043 │ │            *
  5044 │ │            * If the window is not mapped (typically because it’s iconified/minimized
  5045 │ │            * or not on the current workspace), then %NULL will be returned.
  5046 │ │            *
  5047 │ │            * If memory can’t be allocated for the return value, %NULL will be returned
  5048 │ │            * instead.
  5049 │ │            *
  5050 │ │            * In short, there are several ways this function can fail, and if it fails
  5051 │ │            * it returns %NULL; so check the return value.
  5052 │ │            *
  5053 │ │            * You should rarely, if ever, need to call this function.
  5054 │ │            * @param window Source window
  5055 │ │            * @param src_x Source X coordinate within @window
  5056 │ │            * @param src_y Source Y coordinate within @window
  5057 │ │            * @param width Width in pixels of region to get
  5058 │ │            * @param height Height in pixels of region to get
  5059 │ │            * @returns A newly-created pixbuf with a   reference count of 1, or %NULL on error
  5060 │ │            */
  5061 │ │           function pixbuf_get_from_window(
  5062 │ │               window: Window,
  5063 │ │               src_x: number,
  5064 │ │               src_y: number,
  5065 │ │               width: number,
  5066 │ │               height: number,
  5067 │ │           ): GdkPixbuf.Pixbuf | null;
  5068 │ │           /**
  5069 │ │            * Grabs the pointer (usually a mouse) so that all events are passed to this
  5070 │ │            * application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
  5071 │ │            * the grab window becomes unviewable.
  5072 │ │            * This overrides any previous pointer grab by this client.
  5073 │ │            *
  5074 │ │            * Pointer grabs are used for operations which need complete control over mouse
  5075 │ │            * events, even if the mouse leaves the application.
  5076 │ │            * For example in GTK+ it is used for Drag and Drop, for dragging the handle in
  5077 │ │            * the #GtkHPaned and #GtkVPaned widgets.
  5078 │ │            *
  5079 │ │            * Note that if the event mask of an X window has selected both button press and
  5080 │ │            * button release events, then a button press event will cause an automatic
  5081 │ │            * pointer grab until the button is released.
  5082 │ │            * X does this automatically since most applications expect to receive button
  5083 │ │            * press and release events in pairs.
  5084 │ │            * It is equivalent to a pointer grab on the window with `owner_events` set to
  5085 │ │            * %TRUE.
  5086 │ │            *
  5087 │ │            * If you set up anything at the time you take the grab that needs to be cleaned
  5088 │ │            * up when the grab ends, you should handle the #GdkEventGrabBroken events that
  5089 │ │            * are emitted when the grab ends unvoluntarily.
  5090 │ │            * @param window the #GdkWindow which will own the grab (the grab window).
  5091 │ │            * @param owner_events if %FALSE then all pointer events are reported with respect to                @window and are only reported if selected by @event_mask. If %TRUE then pointer                events for this application are reported as normal, but pointer events outside                this application are reported with respect to @window and only if selected by                @event_mask. In either mode, unreported events are discarded.
  5092 │ │            * @param event_mask specifies the event mask, which is used in accordance with              @owner_events. Note that only pointer events (i.e. button and motion events)              may be selected.
  5093 │ │            * @param confine_to If non-%NULL, the pointer will be confined to this              window during the grab. If the pointer is outside @confine_to, it will              automatically be moved to the closest edge of @confine_to and enter              and leave events will be generated as necessary.
  5094 │ │            * @param cursor the cursor to display while the grab is active. If this is %NULL then          the normal cursors are used for @window and its descendants, and the cursor          for @window is used for all other windows.
  5095 │ │            * @param time_ the timestamp of the event which led to this pointer grab. This usually         comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be used if         the time isn’t known.
  5096 │ │            * @returns %GDK_GRAB_SUCCESS if the grab was successful.
  5097 │ │            */
  5098 │ │           function pointer_grab(
  5099 │ │               window: Window,
  5100 │ │               owner_events: boolean,
  5101 │ │               event_mask: EventMask | null,
  5102 │ │               confine_to: Window | null,
  5103 │ │               cursor: Cursor | null,
  5104 │ │               time_: number,
  5105 │ │           ): GrabStatus;
  5106 │ │           /**
  5107 │ │            * Returns %TRUE if the pointer on the default display is currently
  5108 │ │            * grabbed by this application.
  5109 │ │            *
  5110 │ │            * Note that this does not take the inmplicit pointer grab on button
  5111 │ │            * presses into account.
  5112 │ │            * @returns %TRUE if the pointer is currently grabbed by this application.
  5113 │ │            */
  5114 │ │           function pointer_is_grabbed(): boolean;
  5115 │ │           /**
  5116 │ │            * Ungrabs the pointer on the default display, if it is grabbed by this
  5117 │ │            * application.
  5118 │ │            * @param time_ a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no  timestamp is available.
  5119 │ │            */
  5120 │ │           function pointer_ungrab(time_: number): void;
  5121 │ │           /**
  5122 │ │            * Prepare for parsing command line arguments for GDK. This is not
  5123 │ │            * public API and should not be used in application code.
  5124 │ │            */
  5125 │ │           function pre_parse_libgtk_only(): void;
  5126 │ │           /**
  5127 │ │            * Deletes a property from a window.
  5128 │ │            * @param window a #GdkWindow
  5129 │ │            * @param property the property to delete
  5130 │ │            */
  5131 │ │           function property_delete(window: Window, property: Atom): void;
  5132 │ │           /**
  5133 │ │            * Retrieves a portion of the contents of a property. If the
  5134 │ │            * property does not exist, then the function returns %FALSE,
  5135 │ │            * and %GDK_NONE will be stored in `actual_property_type`.
  5136 │ │            *
  5137 │ │            * The XGetWindowProperty() function that gdk_property_get()
  5138 │ │            * uses has a very confusing and complicated set of semantics.
  5139 │ │            * Unfortunately, gdk_property_get() makes the situation
  5140 │ │            * worse instead of better (the semantics should be considered
  5141 │ │            * undefined), and also prints warnings to stderr in cases where it
  5142 │ │            * should return a useful error to the program. You are advised to use
  5143 │ │            * XGetWindowProperty() directly until a replacement function for
  5144 │ │            * gdk_property_get() is provided.
  5145 │ │            * @param window a #GdkWindow
  5146 │ │            * @param property the property to retrieve
  5147 │ │            * @param type the desired property type, or %GDK_NONE, if any type of data   is acceptable. If this does not match the actual   type, then @actual_format and @actual_length will   be filled in, a warning will be printed to stderr   and no data will be returned.
  5148 │ │            * @param offset the offset into the property at which to begin   retrieving data, in 4 byte units.
  5149 │ │            * @param length the length of the data to retrieve in bytes.  Data is   considered to be retrieved in 4 byte chunks, so @length   will be rounded up to the next highest 4 byte boundary   (so be careful not to pass a value that might overflow   when rounded up).
  5150 │ │            * @param pdelete if %TRUE, delete the property after retrieving the   data.
  5151 │ │            * @returns %TRUE if data was successfully received and stored   in @data, otherwise %FALSE.
  5152 │ │            */
  5153 │ │           function property_get(
  5154 │ │               window: Window,
  5155 │ │               property: Atom,
  5156 │ │               type: Atom,
  5157 │ │               offset: number,
  5158 │ │               length: number,
  5159 │ │               pdelete: number,
  5160 │ │           ): [boolean, Atom, number, Uint8Array];
  5161 │ │           /**
  5162 │ │            * This function returns the available bit depths for the default
  5163 │ │            * screen. It’s equivalent to listing the visuals
  5164 │ │            * (gdk_list_visuals()) and then looking at the depth field in each
  5165 │ │            * visual, removing duplicates.
  5166 │ │            *
  5167 │ │            * The array returned by this function should not be freed.
  5168 │ │            */
  5169 │ │           function query_depths(): number[];
  5170 │ │           /**
  5171 │ │            * This function returns the available visual types for the default
  5172 │ │            * screen. It’s equivalent to listing the visuals
  5173 │ │            * (gdk_list_visuals()) and then looking at the type field in each
  5174 │ │            * visual, removing duplicates.
  5175 │ │            *
  5176 │ │            * The array returned by this function should not be freed.
  5177 │ │            */
  5178 │ │           function query_visual_types(): VisualType[];
  5179 │ │           /**
  5180 │ │            * Retrieves the contents of a selection in a given
  5181 │ │            * form.
  5182 │ │            * @param requestor a #GdkWindow.
  5183 │ │            * @param selection an atom identifying the selection to get the   contents of.
  5184 │ │            * @param target the form in which to retrieve the selection.
  5185 │ │            * @param time_ the timestamp to use when retrieving the   selection. The selection owner may refuse the   request if it did not own the selection at   the time indicated by the timestamp.
  5186 │ │            */
  5187 │ │           function selection_convert(requestor: Window, selection: Atom, target: Atom, time_: number): void;
  5188 │ │           /**
  5189 │ │            * Determines the owner of the given selection.
  5190 │ │            * @param selection an atom indentifying a selection.
  5191 │ │            * @returns if there is a selection owner   for this window, and it is a window known to the current process,   the #GdkWindow that owns the selection, otherwise %NULL. Note   that the return value may be owned by a different process if a   foreign window was previously created for that window, but a new   foreign window will never be created by this call.
  5192 │ │            */
  5193 │ │           function selection_owner_get(selection: Atom): Window | null;
  5194 │ │           /**
  5195 │ │            * Determine the owner of the given selection.
  5196 │ │            *
  5197 │ │            * Note that the return value may be owned by a different
  5198 │ │            * process if a foreign window was previously created for that
  5199 │ │            * window, but a new foreign window will never be created by this call.
  5200 │ │            * @param display a #GdkDisplay
  5201 │ │            * @param selection an atom indentifying a selection
  5202 │ │            * @returns if there is a selection owner    for this window, and it is a window known to the current    process, the #GdkWindow that owns the selection, otherwise    %NULL.
  5203 │ │            */
  5204 │ │           function selection_owner_get_for_display(display: Display, selection: Atom): Window | null;
  5205 │ │           /**
  5206 │ │            * Sets the owner of the given selection.
  5207 │ │            * @param owner a #GdkWindow or %NULL to indicate that the   the owner for the given should be unset.
  5208 │ │            * @param selection an atom identifying a selection.
  5209 │ │            * @param time_ timestamp to use when setting the selection.   If this is older than the timestamp given last   time the owner was set for the given selection, the   request will be ignored.
  5210 │ │            * @param send_event if %TRUE, and the new owner is different   from the current owner, the current owner   will be sent a SelectionClear event.
  5211 │ │            * @returns %TRUE if the selection owner was successfully   changed to @owner, otherwise %FALSE.
  5212 │ │            */
  5213 │ │           function selection_owner_set(
  5214 │ │               owner: Window | null,
  5215 │ │               selection: Atom,
  5216 │ │               time_: number,
  5217 │ │               send_event: boolean,
  5218 │ │           ): boolean;
  5219 │ │           /**
  5220 │ │            * Sets the #GdkWindow `owner` as the current owner of the selection `selection`.
  5221 │ │            * @param display the #GdkDisplay
  5222 │ │            * @param owner a #GdkWindow or %NULL to indicate that the owner for         the given should be unset
  5223 │ │            * @param selection an atom identifying a selection
  5224 │ │            * @param time_ timestamp to use when setting the selection         If this is older than the timestamp given last time the owner was         set for the given selection, the request will be ignored
  5225 │ │            * @param send_event if %TRUE, and the new owner is different from the current              owner, the current owner will be sent a SelectionClear event
  5226 │ │            * @returns %TRUE if the selection owner was successfully changed to owner,    otherwise %FALSE.
  5227 │ │            */
  5228 │ │           function selection_owner_set_for_display(
  5229 │ │               display: Display,
  5230 │ │               owner: Window | null,
  5231 │ │               selection: Atom,
  5232 │ │               time_: number,
  5233 │ │               send_event: boolean,
  5234 │ │           ): boolean;
  5235 │ │           /**
  5236 │ │            * Sends a response to SelectionRequest event.
  5237 │ │            * @param requestor window to which to deliver response.
  5238 │ │            * @param selection selection that was requested.
  5239 │ │            * @param target target that was selected.
  5240 │ │            * @param property property in which the selection owner stored the   data, or %GDK_NONE to indicate that the request   was rejected.
  5241 │ │            * @param time_ timestamp.
  5242 │ │            */
  5243 │ │           function selection_send_notify(
  5244 │ │               requestor: Window,
  5245 │ │               selection: Atom,
  5246 │ │               target: Atom,
  5247 │ │               property: Atom,
  5248 │ │               time_: number,
  5249 │ │           ): void;
  5250 │ │           /**
  5251 │ │            * Send a response to SelectionRequest event.
  5252 │ │            * @param display the #GdkDisplay where @requestor is realized
  5253 │ │            * @param requestor window to which to deliver response
  5254 │ │            * @param selection selection that was requested
  5255 │ │            * @param target target that was selected
  5256 │ │            * @param property property in which the selection owner stored the data,            or %GDK_NONE to indicate that the request was rejected
  5257 │ │            * @param time_ timestamp
  5258 │ │            */
  5259 │ │           function selection_send_notify_for_display(
  5260 │ │               display: Display,
  5261 │ │               requestor: Window,
  5262 │ │               selection: Atom,
  5263 │ │               target: Atom,
  5264 │ │               property: Atom,
  5265 │ │               time_: number,
  5266 │ │           ): void;
  5267 │ │           /**
  5268 │ │            * Sets a list of backends that GDK should try to use.
  5269 │ │            *
  5270 │ │            * This can be be useful if your application does not
  5271 │ │            * work with certain GDK backends.
  5272 │ │            *
  5273 │ │            * By default, GDK tries all included backends.
  5274 │ │            *
  5275 │ │            * For example,
  5276 │ │            *
  5277 │ │            * ```c
  5278 │ │            * gdk_set_allowed_backends ("wayland,quartz,*");
  5279 │ │            * ```
  5280 │ │            *
  5281 │ │            * instructs GDK to try the Wayland backend first,
  5282 │ │            * followed by the Quartz backend, and then all
  5283 │ │            * others.
  5284 │ │            *
  5285 │ │            * If the `GDK_BACKEND` environment variable
  5286 │ │            * is set, it determines what backends are tried in what
  5287 │ │            * order, while still respecting the set of allowed backends
  5288 │ │            * that are specified by this function.
  5289 │ │            *
  5290 │ │            * The possible backend names are x11, win32, quartz,
  5291 │ │            * broadway, wayland. You can also include a * in the
  5292 │ │            * list to try all remaining backends.
  5293 │ │            *
  5294 │ │            * This call must happen prior to gdk_display_open(),
  5295 │ │            * gtk_init(), gtk_init_with_args() or gtk_init_check()
  5296 │ │            * in order to take effect.
  5297 │ │            * @param backends a comma-separated list of backends
  5298 │ │            */
  5299 │ │           function set_allowed_backends(backends: string): void;
  5300 │ │           /**
  5301 │ │            * Set the double click time for the default display. See
  5302 │ │            * gdk_display_set_double_click_time().
  5303 │ │            * See also gdk_display_set_double_click_distance().
  5304 │ │            * Applications should not set this, it is a
  5305 │ │            * global user-configured setting.
  5306 │ │            * @param msec double click time in milliseconds (thousandths of a second)
  5307 │ │            */
  5308 │ │           function set_double_click_time(msec: number): void;
  5309 │ │           /**
  5310 │ │            * Sets the program class. The X11 backend uses the program class to set
  5311 │ │            * the class name part of the `WM_CLASS` property on
  5312 │ │            * toplevel windows; see the ICCCM.
  5313 │ │            *
  5314 │ │            * The program class can still be overridden with the --class command
  5315 │ │            * line option.
  5316 │ │            * @param program_class a string.
  5317 │ │            */
  5318 │ │           function set_program_class(program_class: string): void;
  5319 │ │           /**
  5320 │ │            * Sets whether a trace of received events is output.
  5321 │ │            * Note that GTK+ must be compiled with debugging (that is,
  5322 │ │            * configured using the `--enable-debug` option)
  5323 │ │            * to use this option.
  5324 │ │            * @param show_events %TRUE to output event debugging information.
  5325 │ │            */
  5326 │ │           function set_show_events(show_events: boolean): void;
  5327 │ │           /**
  5328 │ │            * Obtains a desktop-wide setting, such as the double-click time,
  5329 │ │            * for the default screen. See gdk_screen_get_setting().
  5330 │ │            * @param name the name of the setting.
  5331 │ │            * @param value location to store the value of the setting.
  5332 │ │            * @returns %TRUE if the setting existed and a value was stored   in @value, %FALSE otherwise.
  5333 │ │            */
  5334 │ │           function setting_get(name: string, value: GObject.Value | any): boolean;
  5335 │ │           function synthesize_window_state(
  5336 │ │               window: Window,
  5337 │ │               unset_flags: WindowState | null,
  5338 │ │               set_flags: WindowState | null,
  5339 │ │           ): void;
  5340 │ │           /**
  5341 │ │            * Retrieves a pixel from `window` to force the windowing
  5342 │ │            * system to carry out any pending rendering commands.
  5343 │ │            *
  5344 │ │            * This function is intended to be used to synchronize with rendering
  5345 │ │            * pipelines, to benchmark windowing system rendering operations.
  5346 │ │            * @param window a mapped #GdkWindow
  5347 │ │            */
  5348 │ │           function test_render_sync(window: Window): void;
  5349 │ │           /**
  5350 │ │            * This function is intended to be used in GTK+ test programs.
  5351 │ │            * It will warp the mouse pointer to the given (`x,``y)` coordinates
  5352 │ │            * within `window` and simulate a button press or release event.
  5353 │ │            * Because the mouse pointer needs to be warped to the target
  5354 │ │            * location, use of this function outside of test programs that
  5355 │ │            * run in their own virtual windowing system (e.g. Xvfb) is not
  5356 │ │            * recommended.
  5357 │ │            *
  5358 │ │            * Also, gdk_test_simulate_button() is a fairly low level function,
  5359 │ │            * for most testing purposes, gtk_test_widget_click() is the right
  5360 │ │            * function to call which will generate a button press event followed
  5361 │ │            * by its accompanying button release event.
  5362 │ │            * @param window a #GdkWindow to simulate a button event for
  5363 │ │            * @param x x coordinate within @window for the button event
  5364 │ │            * @param y y coordinate within @window for the button event
  5365 │ │            * @param button Number of the pointer button for the event, usually 1, 2 or 3
  5366 │ │            * @param modifiers Keyboard modifiers the event is setup with
  5367 │ │            * @param button_pressrelease either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE
  5368 │ │            * @returns whether all actions necessary for a button event simulation     were carried out successfully
  5369 │ │            */
  5370 │ │           function test_simulate_button(
  5371 │ │               window: Window,
  5372 │ │               x: number,
  5373 │ │               y: number,
  5374 │ │               button: number,
  5375 │ │               modifiers: ModifierType | null,
  5376 │ │               button_pressrelease: EventType | null,
  5377 │ │           ): boolean;
  5378 │ │           /**
  5379 │ │            * This function is intended to be used in GTK+ test programs.
  5380 │ │            * If (`x,``y)` are > (-1,-1), it will warp the mouse pointer to
  5381 │ │            * the given (`x,``y)` coordinates within `window` and simulate a
  5382 │ │            * key press or release event.
  5383 │ │            *
  5384 │ │            * When the mouse pointer is warped to the target location, use
  5385 │ │            * of this function outside of test programs that run in their
  5386 │ │            * own virtual windowing system (e.g. Xvfb) is not recommended.
  5387 │ │            * If (`x,``y)` are passed as (-1,-1), the mouse pointer will not
  5388 │ │            * be warped and `window` origin will be used as mouse pointer
  5389 │ │            * location for the event.
  5390 │ │            *
  5391 │ │            * Also, gdk_test_simulate_key() is a fairly low level function,
  5392 │ │            * for most testing purposes, gtk_test_widget_send_key() is the
  5393 │ │            * right function to call which will generate a key press event
  5394 │ │            * followed by its accompanying key release event.
  5395 │ │            * @param window a #GdkWindow to simulate a key event for
  5396 │ │            * @param x x coordinate within @window for the key event
  5397 │ │            * @param y y coordinate within @window for the key event
  5398 │ │            * @param keyval A GDK keyboard value
  5399 │ │            * @param modifiers Keyboard modifiers the event is setup with
  5400 │ │            * @param key_pressrelease either %GDK_KEY_PRESS or %GDK_KEY_RELEASE
  5401 │ │            * @returns whether all actions necessary for a key event simulation     were carried out successfully
  5402 │ │            */
  5403 │ │           function test_simulate_key(
  5404 │ │               window: Window,
  5405 │ │               x: number,
  5406 │ │               y: number,
  5407 │ │               keyval: number,
  5408 │ │               modifiers: ModifierType | null,
  5409 │ │               key_pressrelease: EventType | null,
  5410 │ │           ): boolean;
  5411 │ │           /**
  5412 │ │            * Converts a text property in the given encoding to
  5413 │ │            * a list of UTF-8 strings.
  5414 │ │            * @param display a #GdkDisplay
  5415 │ │            * @param encoding an atom representing the encoding of the text
  5416 │ │            * @param format the format of the property
  5417 │ │            * @param text the text to convert
  5418 │ │            * @returns the number of strings in the resulting list
  5419 │ │            */
  5420 │ │           function text_property_to_utf8_list_for_display(
  5421 │ │               display: Display,
  5422 │ │               encoding: Atom,
  5423 │ │               format: number,
  5424 │ │               text: Uint8Array | string,
  5425 │ │           ): [number, string[]];
  5426 │ │           /**
  5427 │ │            * Adds a function to be called whenever there are no higher priority
  5428 │ │            * events pending.  If the function returns %FALSE it is automatically
  5429 │ │            * removed from the list of event sources and will not be called again.
  5430 │ │            *
  5431 │ │            * This variant of g_idle_add_full() calls `function` with the GDK lock
  5432 │ │            * held. It can be thought of a MT-safe version for GTK+ widgets for the
  5433 │ │            * following use case, where you have to worry about idle_callback()
  5434 │ │            * running in thread A and accessing `self` after it has been finalized
  5435 │ │            * in thread B:
  5436 │ │            *
  5437 │ │            *
  5438 │ │            * ```c
  5439 │ │            * static gboolean
  5440 │ │            * idle_callback (gpointer data)
  5441 │ │            * {
  5442 │ │            *    // gdk_threads_enter(); would be needed for g_idle_add()
  5443 │ │            *
  5444 │ │            *    SomeWidget *self = data;
  5445 │ │            *    // do stuff with self
  5446 │ │            *
  5447 │ │            *    self->idle_id = 0;
  5448 │ │            *
  5449 │ │            *    // gdk_threads_leave(); would be needed for g_idle_add()
  5450 │ │            *    return FALSE;
  5451 │ │            * }
  5452 │ │            *
  5453 │ │            * static void
  5454 │ │            * some_widget_do_stuff_later (SomeWidget *self)
  5455 │ │            * {
  5456 │ │            *    self->idle_id = gdk_threads_add_idle (idle_callback, self)
  5457 │ │            *    // using g_idle_add() here would require thread protection in the callback
  5458 │ │            * }
  5459 │ │            *
  5460 │ │            * static void
  5461 │ │            * some_widget_finalize (GObject *object)
  5462 │ │            * {
  5463 │ │            *    SomeWidget *self = SOME_WIDGET (object);
  5464 │ │            *    if (self->idle_id)
  5465 │ │            *      g_source_remove (self->idle_id);
  5466 │ │            *    G_OBJECT_CLASS (parent_class)->finalize (object);
  5467 │ │            * }
  5468 │ │            * ```
  5469 │ │            *
  5470 │ │            * @param priority the priority of the idle source. Typically this will be in the            range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
  5471 │ │            * @param _function function to call
  5472 │ │            * @param notify function to call when the idle is removed, or %NULL
  5473 │ │            * @returns the ID (greater than 0) of the event source.
  5474 │ │            */
  5475 │ │           function threads_add_idle(
  5476 │ │               priority: number,
  5477 │ │               _function: GLib.SourceFunc,
  5478 │ │               notify?: GLib.DestroyNotify | null,
  5479 │ │           ): number;
  5480 │ │           /**
  5481 │ │            * Sets a function to be called at regular intervals holding the GDK lock,
  5482 │ │            * with the given priority.  The function is called repeatedly until it
  5483 │ │            * returns %FALSE, at which point the timeout is automatically destroyed
  5484 │ │            * and the function will not be called again.  The `notify` function is
  5485 │ │            * called when the timeout is destroyed.  The first call to the
  5486 │ │            * function will be at the end of the first `interval`.
  5487 │ │            *
  5488 │ │            * Note that timeout functions may be delayed, due to the processing of other
  5489 │ │            * event sources. Thus they should not be relied on for precise timing.
  5490 │ │            * After each call to the timeout function, the time of the next
  5491 │ │            * timeout is recalculated based on the current time and the given interval
  5492 │ │            * (it does not try to “catch up” time lost in delays).
  5493 │ │            *
  5494 │ │            * This variant of g_timeout_add_full() can be thought of a MT-safe version
  5495 │ │            * for GTK+ widgets for the following use case:
  5496 │ │            *
  5497 │ │            *
  5498 │ │            * ```c
  5499 │ │            * static gboolean timeout_callback (gpointer data)
  5500 │ │            * {
  5501 │ │            *    SomeWidget *self = data;
  5502 │ │            *
  5503 │ │            *    // do stuff with self
  5504 │ │            *
  5505 │ │            *    self->timeout_id = 0;
  5506 │ │            *
  5507 │ │            *    return G_SOURCE_REMOVE;
  5508 │ │            * }
  5509 │ │            *
  5510 │ │            * static void some_widget_do_stuff_later (SomeWidget *self)
  5511 │ │            * {
  5512 │ │            *    self->timeout_id = g_timeout_add (timeout_callback, self)
  5513 │ │            * }
  5514 │ │            *
  5515 │ │            * static void some_widget_finalize (GObject *object)
  5516 │ │            * {
  5517 │ │            *    SomeWidget *self = SOME_WIDGET (object);
  5518 │ │            *
  5519 │ │            *    if (self->timeout_id)
  5520 │ │            *      g_source_remove (self->timeout_id);
  5521 │ │            *
  5522 │ │            *    G_OBJECT_CLASS (parent_class)->finalize (object);
  5523 │ │            * }
  5524 │ │            * ```
  5525 │ │            *
  5526 │ │            * @param priority the priority of the timeout source. Typically this will be in the            range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
  5527 │ │            * @param interval the time between calls to the function, in milliseconds             (1/1000ths of a second)
  5528 │ │            * @param _function function to call
  5529 │ │            * @param notify function to call when the timeout is removed, or %NULL
  5530 │ │            * @returns the ID (greater than 0) of the event source.
  5531 │ │            */
  5532 │ │           function threads_add_timeout(
  5533 │ │               priority: number,
  5534 │ │               interval: number,
  5535 │ │               _function: GLib.SourceFunc,
  5536 │ │               notify?: GLib.DestroyNotify | null,
  5537 │ │           ): number;
  5538 │ │           /**
  5539 │ │            * A variant of gdk_threads_add_timeout_full() with second-granularity.
  5540 │ │            * See g_timeout_add_seconds_full() for a discussion of why it is
  5541 │ │            * a good idea to use this function if you don’t need finer granularity.
  5542 │ │            * @param priority the priority of the timeout source. Typically this will be in the            range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
  5543 │ │            * @param interval the time between calls to the function, in seconds
  5544 │ │            * @param _function function to call
  5545 │ │            * @param notify function to call when the timeout is removed, or %NULL
  5546 │ │            * @returns the ID (greater than 0) of the event source.
  5547 │ │            */
  5548 │ │           function threads_add_timeout_seconds(
  5549 │ │               priority: number,
  5550 │ │               interval: number,
  5551 │ │               _function: GLib.SourceFunc,
  5552 │ │               notify?: GLib.DestroyNotify | null,
  5553 │ │           ): number;
  5554 │ │           /**
  5555 │ │            * This function marks the beginning of a critical section in which
  5556 │ │            * GDK and GTK+ functions can be called safely and without causing race
  5557 │ │            * conditions. Only one thread at a time can be in such a critial
  5558 │ │            * section.
  5559 │ │            */
  5560 │ │           function threads_enter(): void;
  5561 │ │           /**
  5562 │ │            * Initializes GDK so that it can be used from multiple threads
  5563 │ │            * in conjunction with gdk_threads_enter() and gdk_threads_leave().
  5564 │ │            *
  5565 │ │            * This call must be made before any use of the main loop from
  5566 │ │            * GTK+; to be safe, call it before gtk_init().
  5567 │ │            */
  5568 │ │           function threads_init(): void;
  5569 │ │           /**
  5570 │ │            * Leaves a critical region begun with gdk_threads_enter().
  5571 │ │            */
  5572 │ │           function threads_leave(): void;
  5573 │ │           /**
  5574 │ │            * Convert from a ISO10646 character to a key symbol.
  5575 │ │            * @param wc a ISO10646 encoded character
  5576 │ │            * @returns the corresponding GDK key symbol, if one exists.               or, if there is no corresponding symbol,               wc | 0x01000000
  5577 │ │            */
  5578 │ │           function unicode_to_keyval(wc: number): number;
  5579 │ │           /**
  5580 │ │            * Converts an UTF-8 string into the best possible representation
  5581 │ │            * as a STRING. The representation of characters not in STRING
  5582 │ │            * is not specified; it may be as pseudo-escape sequences
  5583 │ │            * \x{ABCD}, or it may be in some other form of approximation.
  5584 │ │            * @param str a UTF-8 string
  5585 │ │            * @returns the newly-allocated string, or %NULL if the          conversion failed. (It should not fail for any properly          formed UTF-8 string unless system limits like memory or          file descriptors are exceeded.)
  5586 │ │            */
  5587 │ │           function utf8_to_string_target(str: string): string | null;
  5588 │ │           interface EventFunc {
  5589 │ │               (event: Event): void;
  5590 │ │           }
  5591 │ │           interface FilterFunc {
  5592 │ │               (xevent: XEvent, event: Event): FilterReturn;
  5593 │ │           }
  5594 │ │           interface SeatGrabPrepareFunc {
  5595 │ │               (seat: Seat, window: Window): void;
  5596 │ │           }
  5597 │ │           interface WindowChildFunc {
  5598 │ │               (window: Window): boolean;
  5599 │ │           }
  5600 │ │           interface WindowInvalidateHandlerFunc {
  5601 │ │               (window: Window, region: cairo.Region): void;
  5602 │ │           }
  5603 │ │           /**
  5604 │ │            * Positioning hints for aligning a window relative to a rectangle.
  5605 │ │            *
  5606 │ │            * These hints determine how the window should be positioned in the case that
  5607 │ │            * the window would fall off-screen if placed in its ideal position.
  5608 │ │            *
  5609 │ │            * For example, %GDK_ANCHOR_FLIP_X will replace %GDK_GRAVITY_NORTH_WEST with
  5610 │ │            * %GDK_GRAVITY_NORTH_EAST and vice versa if the window extends beyond the left
  5611 │ │            * or right edges of the monitor.
  5612 │ │            *
  5613 │ │            * If %GDK_ANCHOR_SLIDE_X is set, the window can be shifted horizontally to fit
  5614 │ │            * on-screen. If %GDK_ANCHOR_RESIZE_X is set, the window can be shrunken
  5615 │ │            * horizontally to fit.
  5616 │ │            *
  5617 │ │            * In general, when multiple flags are set, flipping should take precedence over
  5618 │ │            * sliding, which should take precedence over resizing.
  5619 │ │            */
  5620 │ │   
  5621 │ │           /**
  5622 │ │            * Positioning hints for aligning a window relative to a rectangle.
  5623 │ │            *
  5624 │ │            * These hints determine how the window should be positioned in the case that
  5625 │ │            * the window would fall off-screen if placed in its ideal position.
  5626 │ │            *
  5627 │ │            * For example, %GDK_ANCHOR_FLIP_X will replace %GDK_GRAVITY_NORTH_WEST with
  5628 │ │            * %GDK_GRAVITY_NORTH_EAST and vice versa if the window extends beyond the left
  5629 │ │            * or right edges of the monitor.
  5630 │ │            *
  5631 │ │            * If %GDK_ANCHOR_SLIDE_X is set, the window can be shifted horizontally to fit
  5632 │ │            * on-screen. If %GDK_ANCHOR_RESIZE_X is set, the window can be shrunken
  5633 │ │            * horizontally to fit.
  5634 │ │            *
  5635 │ │            * In general, when multiple flags are set, flipping should take precedence over
  5636 │ │            * sliding, which should take precedence over resizing.
  5637 │ │            */
  5638 │ │           export namespace AnchorHints {
  5639 │ │               export const $gtype: GObject.GType<AnchorHints>;
  5640 │ │           }
  5641 │ │   
  5642 │ │           enum AnchorHints {
  5643 │ │               /**
  5644 │ │                * allow flipping anchors horizontally
  5645 │ │                */
  5646 │ │               FLIP_X,
  5647 │ │               /**
  5648 │ │                * allow flipping anchors vertically
  5649 │ │                */
  5650 │ │               FLIP_Y,
  5651 │ │               /**
  5652 │ │                * allow sliding window horizontally
  5653 │ │                */
  5654 │ │               SLIDE_X,
  5655 │ │               /**
  5656 │ │                * allow sliding window vertically
  5657 │ │                */
  5658 │ │               SLIDE_Y,
  5659 │ │               /**
  5660 │ │                * allow resizing window horizontally
  5661 │ │                */
  5662 │ │               RESIZE_X,
  5663 │ │               /**
  5664 │ │                * allow resizing window vertically
  5665 │ │                */
  5666 │ │               RESIZE_Y,
  5667 │ │               /**
  5668 │ │                * allow flipping anchors on both axes
  5669 │ │                */
  5670 │ │               FLIP,
  5671 │ │               /**
  5672 │ │                * allow sliding window on both axes
  5673 │ │                */
  5674 │ │               SLIDE,
  5675 │ │               /**
  5676 │ │                * allow resizing window on both axes
  5677 │ │                */
  5678 │ │               RESIZE,
  5679 │ │           }
  5680 │ │           /**
  5681 │ │            * Flags describing the current capabilities of a device/tool.
  5682 │ │            */
  5683 │ │   
  5684 │ │           /**
  5685 │ │            * Flags describing the current capabilities of a device/tool.
  5686 │ │            */
  5687 │ │           export namespace AxisFlags {
  5688 │ │               export const $gtype: GObject.GType<AxisFlags>;
  5689 │ │           }
  5690 │ │   
  5691 │ │           enum AxisFlags {
  5692 │ │               /**
  5693 │ │                * X axis is present
  5694 │ │                */
  5695 │ │               X,
  5696 │ │               /**
  5697 │ │                * Y axis is present
  5698 │ │                */
  5699 │ │               Y,
  5700 │ │               /**
  5701 │ │                * Pressure axis is present
  5702 │ │                */
  5703 │ │               PRESSURE,
  5704 │ │               /**
  5705 │ │                * X tilt axis is present
  5706 │ │                */
  5707 │ │               XTILT,
  5708 │ │               /**
  5709 │ │                * Y tilt axis is present
  5710 │ │                */
  5711 │ │               YTILT,
  5712 │ │               /**
  5713 │ │                * Wheel axis is present
  5714 │ │                */
  5715 │ │               WHEEL,
  5716 │ │               /**
  5717 │ │                * Distance axis is present
  5718 │ │                */
  5719 │ │               DISTANCE,
  5720 │ │               /**
  5721 │ │                * Z-axis rotation is present
  5722 │ │                */
  5723 │ │               ROTATION,
  5724 │ │               /**
  5725 │ │                * Slider axis is present
  5726 │ │                */
  5727 │ │               SLIDER,
  5728 │ │           }
  5729 │ │           /**
  5730 │ │            * Used in #GdkDragContext to indicate what the destination
  5731 │ │            * should do with the dropped data.
  5732 │ │            */
  5733 │ │   
  5734 │ │           /**
  5735 │ │            * Used in #GdkDragContext to indicate what the destination
  5736 │ │            * should do with the dropped data.
  5737 │ │            */
  5738 │ │           export namespace DragAction {
  5739 │ │               export const $gtype: GObject.GType<DragAction>;
  5740 │ │           }
  5741 │ │   
  5742 │ │           enum DragAction {
  5743 │ │               /**
  5744 │ │                * Means nothing, and should not be used.
  5745 │ │                */
  5746 │ │               DEFAULT,
  5747 │ │               /**
  5748 │ │                * Copy the data.
  5749 │ │                */
  5750 │ │               COPY,
  5751 │ │               /**
  5752 │ │                * Move the data, i.e. first copy it, then delete
  5753 │ │                *  it from the source using the DELETE target of the X selection protocol.
  5754 │ │                */
  5755 │ │               MOVE,
  5756 │ │               /**
  5757 │ │                * Add a link to the data. Note that this is only
  5758 │ │                *  useful if source and destination agree on what it means.
  5759 │ │                */
  5760 │ │               LINK,
  5761 │ │               /**
  5762 │ │                * Special action which tells the source that the
  5763 │ │                *  destination will do something that the source doesn’t understand.
  5764 │ │                */
  5765 │ │               PRIVATE,
  5766 │ │               /**
  5767 │ │                * Ask the user what to do with the data.
  5768 │ │                */
  5769 │ │               ASK,
  5770 │ │           }
  5771 │ │           /**
  5772 │ │            * A set of bit-flags to indicate which events a window is to receive.
  5773 │ │            * Most of these masks map onto one or more of the #GdkEventType event types
  5774 │ │            * above.
  5775 │ │            *
  5776 │ │            * See the [input handling overview][chap-input-handling] for details of
  5777 │ │            * [event masks][event-masks] and [event propagation][event-propagation].
  5778 │ │            *
  5779 │ │            * %GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask
  5780 │ │            * to reduce the number of %GDK_MOTION_NOTIFY events received. When using
  5781 │ │            * %GDK_POINTER_MOTION_HINT_MASK, fewer %GDK_MOTION_NOTIFY events will
  5782 │ │            * be sent, some of which are marked as a hint (the is_hint member is
  5783 │ │            * %TRUE). To receive more motion events after a motion hint event,
  5784 │ │            * the application needs to asks for more, by calling
  5785 │ │            * gdk_event_request_motions().
  5786 │ │            *
  5787 │ │            * Since GTK 3.8, motion events are already compressed by default, independent
  5788 │ │            * of this mechanism. This compression can be disabled with
  5789 │ │            * gdk_window_set_event_compression(). See the documentation of that function
  5790 │ │            * for details.
  5791 │ │            *
  5792 │ │            * If %GDK_TOUCH_MASK is enabled, the window will receive touch events
  5793 │ │            * from touch-enabled devices. Those will come as sequences of #GdkEventTouch
  5794 │ │            * with type %GDK_TOUCH_UPDATE, enclosed by two events with
  5795 │ │            * type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
  5796 │ │            * gdk_event_get_event_sequence() returns the event sequence for these
  5797 │ │            * events, so different sequences may be distinguished.
  5798 │ │            */
  5799 │ │   
  5800 │ │           /**
  5801 │ │            * A set of bit-flags to indicate which events a window is to receive.
  5802 │ │            * Most of these masks map onto one or more of the #GdkEventType event types
  5803 │ │            * above.
  5804 │ │            *
  5805 │ │            * See the [input handling overview][chap-input-handling] for details of
  5806 │ │            * [event masks][event-masks] and [event propagation][event-propagation].
  5807 │ │            *
  5808 │ │            * %GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask
  5809 │ │            * to reduce the number of %GDK_MOTION_NOTIFY events received. When using
  5810 │ │            * %GDK_POINTER_MOTION_HINT_MASK, fewer %GDK_MOTION_NOTIFY events will
  5811 │ │            * be sent, some of which are marked as a hint (the is_hint member is
  5812 │ │            * %TRUE). To receive more motion events after a motion hint event,
  5813 │ │            * the application needs to asks for more, by calling
  5814 │ │            * gdk_event_request_motions().
  5815 │ │            *
  5816 │ │            * Since GTK 3.8, motion events are already compressed by default, independent
  5817 │ │            * of this mechanism. This compression can be disabled with
  5818 │ │            * gdk_window_set_event_compression(). See the documentation of that function
  5819 │ │            * for details.
  5820 │ │            *
  5821 │ │            * If %GDK_TOUCH_MASK is enabled, the window will receive touch events
  5822 │ │            * from touch-enabled devices. Those will come as sequences of #GdkEventTouch
  5823 │ │            * with type %GDK_TOUCH_UPDATE, enclosed by two events with
  5824 │ │            * type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
  5825 │ │            * gdk_event_get_event_sequence() returns the event sequence for these
  5826 │ │            * events, so different sequences may be distinguished.
  5827 │ │            */
  5828 │ │           export namespace EventMask {
  5829 │ │               export const $gtype: GObject.GType<EventMask>;
  5830 │ │           }
  5831 │ │   
  5832 │ │           enum EventMask {
  5833 │ │               /**
  5834 │ │                * receive expose events
  5835 │ │                */
  5836 │ │               EXPOSURE_MASK,
  5837 │ │               /**
  5838 │ │                * receive all pointer motion events
  5839 │ │                */
  5840 │ │               POINTER_MOTION_MASK,
  5841 │ │               /**
  5842 │ │                * deprecated. see the explanation above
  5843 │ │                */
  5844 │ │               POINTER_MOTION_HINT_MASK,
  5845 │ │               /**
  5846 │ │                * receive pointer motion events while any button is pressed
  5847 │ │                */
  5848 │ │               BUTTON_MOTION_MASK,
  5849 │ │               /**
  5850 │ │                * receive pointer motion events while 1 button is pressed
  5851 │ │                */
  5852 │ │               BUTTON1_MOTION_MASK,
  5853 │ │               /**
  5854 │ │                * receive pointer motion events while 2 button is pressed
  5855 │ │                */
  5856 │ │               BUTTON2_MOTION_MASK,
  5857 │ │               /**
  5858 │ │                * receive pointer motion events while 3 button is pressed
  5859 │ │                */
  5860 │ │               BUTTON3_MOTION_MASK,
  5861 │ │               /**
  5862 │ │                * receive button press events
  5863 │ │                */
  5864 │ │               BUTTON_PRESS_MASK,
  5865 │ │               /**
  5866 │ │                * receive button release events
  5867 │ │                */
  5868 │ │               BUTTON_RELEASE_MASK,
  5869 │ │               /**
  5870 │ │                * receive key press events
  5871 │ │                */
  5872 │ │               KEY_PRESS_MASK,
  5873 │ │               /**
  5874 │ │                * receive key release events
  5875 │ │                */
  5876 │ │               KEY_RELEASE_MASK,
  5877 │ │               /**
  5878 │ │                * receive window enter events
  5879 │ │                */
  5880 │ │               ENTER_NOTIFY_MASK,
  5881 │ │               /**
  5882 │ │                * receive window leave events
  5883 │ │                */
  5884 │ │               LEAVE_NOTIFY_MASK,
  5885 │ │               /**
  5886 │ │                * receive focus change events
  5887 │ │                */
  5888 │ │               FOCUS_CHANGE_MASK,
  5889 │ │               /**
  5890 │ │                * receive events about window configuration change
  5891 │ │                */
  5892 │ │               STRUCTURE_MASK,
  5893 │ │               /**
  5894 │ │                * receive property change events
  5895 │ │                */
  5896 │ │               PROPERTY_CHANGE_MASK,
  5897 │ │               /**
  5898 │ │                * receive visibility change events
  5899 │ │                */
  5900 │ │               VISIBILITY_NOTIFY_MASK,
  5901 │ │               /**
  5902 │ │                * receive proximity in events
  5903 │ │                */
  5904 │ │               PROXIMITY_IN_MASK,
  5905 │ │               /**
  5906 │ │                * receive proximity out events
  5907 │ │                */
  5908 │ │               PROXIMITY_OUT_MASK,
  5909 │ │               /**
  5910 │ │                * receive events about window configuration changes of
  5911 │ │                *   child windows
  5912 │ │                */
  5913 │ │               SUBSTRUCTURE_MASK,
  5914 │ │               /**
  5915 │ │                * receive scroll events
  5916 │ │                */
  5917 │ │               SCROLL_MASK,
  5918 │ │               /**
  5919 │ │                * receive touch events. Since 3.4
  5920 │ │                */
  5921 │ │               TOUCH_MASK,
  5922 │ │               /**
  5923 │ │                * receive smooth scrolling events. Since 3.4
  5924 │ │                */
  5925 │ │               SMOOTH_SCROLL_MASK,
  5926 │ │               /**
  5927 │ │                * receive touchpad gesture events. Since 3.18
  5928 │ │                */
  5929 │ │               TOUCHPAD_GESTURE_MASK,
  5930 │ │               /**
  5931 │ │                * receive tablet pad events. Since 3.22
  5932 │ │                */
  5933 │ │               TABLET_PAD_MASK,
  5934 │ │               /**
  5935 │ │                * the combination of all the above event masks.
  5936 │ │                */
  5937 │ │               ALL_EVENTS_MASK,
  5938 │ │           }
  5939 │ │           /**
  5940 │ │            * #GdkFrameClockPhase is used to represent the different paint clock
  5941 │ │            * phases that can be requested. The elements of the enumeration
  5942 │ │            * correspond to the signals of #GdkFrameClock.
  5943 │ │            */
  5944 │ │   
  5945 │ │           /**
  5946 │ │            * #GdkFrameClockPhase is used to represent the different paint clock
  5947 │ │            * phases that can be requested. The elements of the enumeration
  5948 │ │            * correspond to the signals of #GdkFrameClock.
  5949 │ │            */
  5950 │ │           export namespace FrameClockPhase {
  5951 │ │               export const $gtype: GObject.GType<FrameClockPhase>;
  5952 │ │           }
  5953 │ │   
  5954 │ │           enum FrameClockPhase {
  5955 │ │               /**
  5956 │ │                * no phase
  5957 │ │                */
  5958 │ │               NONE,
  5959 │ │               /**
  5960 │ │                * corresponds to GdkFrameClock::flush-events. Should not be handled by applications.
  5961 │ │                */
  5962 │ │               FLUSH_EVENTS,
  5963 │ │               /**
  5964 │ │                * corresponds to GdkFrameClock::before-paint. Should not be handled by applications.
  5965 │ │                */
  5966 │ │               BEFORE_PAINT,
  5967 │ │               /**
  5968 │ │                * corresponds to GdkFrameClock::update.
  5969 │ │                */
  5970 │ │               UPDATE,
  5971 │ │               /**
  5972 │ │                * corresponds to GdkFrameClock::layout.
  5973 │ │                */
  5974 │ │               LAYOUT,
  5975 │ │               /**
  5976 │ │                * corresponds to GdkFrameClock::paint.
  5977 │ │                */
  5978 │ │               PAINT,
  5979 │ │               /**
  5980 │ │                * corresponds to GdkFrameClock::resume-events. Should not be handled by applications.
  5981 │ │                */
  5982 │ │               RESUME_EVENTS,
  5983 │ │               /**
  5984 │ │                * corresponds to GdkFrameClock::after-paint. Should not be handled by applications.
  5985 │ │                */
  5986 │ │               AFTER_PAINT,
  5987 │ │           }
  5988 │ │           /**
  5989 │ │            * A set of bit-flags to indicate the state of modifier keys and mouse buttons
  5990 │ │            * in various event types. Typical modifier keys are Shift, Control, Meta,
  5991 │ │            * Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
  5992 │ │            *
  5993 │ │            * Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
  5994 │ │            *
  5995 │ │            * Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
  5996 │ │            * to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
  5997 │ │            * %GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.
  5998 │ │            *
  5999 │ │            * Note that GDK may add internal values to events which include
  6000 │ │            * reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
  6001 │ │            * should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
  6002 │ │            * remove all reserved values.
  6003 │ │            *
  6004 │ │            * Also note that the GDK X backend interprets button press events for button
  6005 │ │            * 4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
  6006 │ │            * be set.
  6007 │ │            */
  6008 │ │   
  6009 │ │           /**
  6010 │ │            * A set of bit-flags to indicate the state of modifier keys and mouse buttons
  6011 │ │            * in various event types. Typical modifier keys are Shift, Control, Meta,
  6012 │ │            * Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
  6013 │ │            *
  6014 │ │            * Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.
  6015 │ │            *
  6016 │ │            * Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
  6017 │ │            * to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
  6018 │ │            * %GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.
  6019 │ │            *
  6020 │ │            * Note that GDK may add internal values to events which include
  6021 │ │            * reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
  6022 │ │            * should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
  6023 │ │            * remove all reserved values.
  6024 │ │            *
  6025 │ │            * Also note that the GDK X backend interprets button press events for button
  6026 │ │            * 4-7 as scroll events, so %GDK_BUTTON4_MASK and %GDK_BUTTON5_MASK will never
  6027 │ │            * be set.
  6028 │ │            */
  6029 │ │           export namespace ModifierType {
  6030 │ │               export const $gtype: GObject.GType<ModifierType>;
  6031 │ │           }
  6032 │ │   
  6033 │ │           enum ModifierType {
  6034 │ │               /**
  6035 │ │                * the Shift key.
  6036 │ │                */
  6037 │ │               SHIFT_MASK,
  6038 │ │               /**
  6039 │ │                * a Lock key (depending on the modifier mapping of the
  6040 │ │                *  X server this may either be CapsLock or ShiftLock).
  6041 │ │                */
  6042 │ │               LOCK_MASK,
  6043 │ │               /**
  6044 │ │                * the Control key.
  6045 │ │                */
  6046 │ │               CONTROL_MASK,
  6047 │ │               /**
  6048 │ │                * the fourth modifier key (it depends on the modifier
  6049 │ │                *  mapping of the X server which key is interpreted as this modifier, but
  6050 │ │                *  normally it is the Alt key).
  6051 │ │                */
  6052 │ │               MOD1_MASK,
  6053 │ │               /**
  6054 │ │                * the fifth modifier key (it depends on the modifier
  6055 │ │                *  mapping of the X server which key is interpreted as this modifier).
  6056 │ │                */
  6057 │ │               MOD2_MASK,
  6058 │ │               /**
  6059 │ │                * the sixth modifier key (it depends on the modifier
  6060 │ │                *  mapping of the X server which key is interpreted as this modifier).
  6061 │ │                */
  6062 │ │               MOD3_MASK,
  6063 │ │               /**
  6064 │ │                * the seventh modifier key (it depends on the modifier
  6065 │ │                *  mapping of the X server which key is interpreted as this modifier).
  6066 │ │                */
  6067 │ │               MOD4_MASK,
  6068 │ │               /**
  6069 │ │                * the eighth modifier key (it depends on the modifier
  6070 │ │                *  mapping of the X server which key is interpreted as this modifier).
  6071 │ │                */
  6072 │ │               MOD5_MASK,
  6073 │ │               /**
  6074 │ │                * the first mouse button.
  6075 │ │                */
  6076 │ │               BUTTON1_MASK,
  6077 │ │               /**
  6078 │ │                * the second mouse button.
  6079 │ │                */
  6080 │ │               BUTTON2_MASK,
  6081 │ │               /**
  6082 │ │                * the third mouse button.
  6083 │ │                */
  6084 │ │               BUTTON3_MASK,
  6085 │ │               /**
  6086 │ │                * the fourth mouse button.
  6087 │ │                */
  6088 │ │               BUTTON4_MASK,
  6089 │ │               /**
  6090 │ │                * the fifth mouse button.
  6091 │ │                */
  6092 │ │               BUTTON5_MASK,
  6093 │ │               /**
  6094 │ │                * A reserved bit flag; do not use in your own code
  6095 │ │                */
  6096 │ │               MODIFIER_RESERVED_13_MASK,
  6097 │ │               /**
  6098 │ │                * A reserved bit flag; do not use in your own code
  6099 │ │                */
  6100 │ │               MODIFIER_RESERVED_14_MASK,
  6101 │ │               /**
  6102 │ │                * A reserved bit flag; do not use in your own code
  6103 │ │                */
  6104 │ │               MODIFIER_RESERVED_15_MASK,
  6105 │ │               /**
  6106 │ │                * A reserved bit flag; do not use in your own code
  6107 │ │                */
  6108 │ │               MODIFIER_RESERVED_16_MASK,
  6109 │ │               /**
  6110 │ │                * A reserved bit flag; do not use in your own code
  6111 │ │                */
  6112 │ │               MODIFIER_RESERVED_17_MASK,
  6113 │ │               /**
  6114 │ │                * A reserved bit flag; do not use in your own code
  6115 │ │                */
  6116 │ │               MODIFIER_RESERVED_18_MASK,
  6117 │ │               /**
  6118 │ │                * A reserved bit flag; do not use in your own code
  6119 │ │                */
  6120 │ │               MODIFIER_RESERVED_19_MASK,
  6121 │ │               /**
  6122 │ │                * A reserved bit flag; do not use in your own code
  6123 │ │                */
  6124 │ │               MODIFIER_RESERVED_20_MASK,
  6125 │ │               /**
  6126 │ │                * A reserved bit flag; do not use in your own code
  6127 │ │                */
  6128 │ │               MODIFIER_RESERVED_21_MASK,
  6129 │ │               /**
  6130 │ │                * A reserved bit flag; do not use in your own code
  6131 │ │                */
  6132 │ │               MODIFIER_RESERVED_22_MASK,
  6133 │ │               /**
  6134 │ │                * A reserved bit flag; do not use in your own code
  6135 │ │                */
  6136 │ │               MODIFIER_RESERVED_23_MASK,
  6137 │ │               /**
  6138 │ │                * A reserved bit flag; do not use in your own code
  6139 │ │                */
  6140 │ │               MODIFIER_RESERVED_24_MASK,
  6141 │ │               /**
  6142 │ │                * A reserved bit flag; do not use in your own code
  6143 │ │                */
  6144 │ │               MODIFIER_RESERVED_25_MASK,
  6145 │ │               /**
  6146 │ │                * the Super modifier. Since 2.10
  6147 │ │                */
  6148 │ │               SUPER_MASK,
  6149 │ │               /**
  6150 │ │                * the Hyper modifier. Since 2.10
  6151 │ │                */
  6152 │ │               HYPER_MASK,
  6153 │ │               /**
  6154 │ │                * the Meta modifier. Since 2.10
  6155 │ │                */
  6156 │ │               META_MASK,
  6157 │ │               /**
  6158 │ │                * A reserved bit flag; do not use in your own code
  6159 │ │                */
  6160 │ │               MODIFIER_RESERVED_29_MASK,
  6161 │ │               /**
  6162 │ │                * not used in GDK itself. GTK+ uses it to differentiate
  6163 │ │                *  between (keyval, modifiers) pairs from key press and release events.
  6164 │ │                */
  6165 │ │               RELEASE_MASK,
  6166 │ │               /**
  6167 │ │                * a mask covering all modifier types.
  6168 │ │                */
  6169 │ │               MODIFIER_MASK,
  6170 │ │           }
  6171 │ │           /**
  6172 │ │            * Flags describing the seat capabilities.
  6173 │ │            */
  6174 │ │   
  6175 │ │           /**
  6176 │ │            * Flags describing the seat capabilities.
  6177 │ │            */
  6178 │ │           export namespace SeatCapabilities {
  6179 │ │               export const $gtype: GObject.GType<SeatCapabilities>;
  6180 │ │           }
  6181 │ │   
  6182 │ │           enum SeatCapabilities {
  6183 │ │               /**
  6184 │ │                * No input capabilities
  6185 │ │                */
  6186 │ │               NONE,
  6187 │ │               /**
  6188 │ │                * The seat has a pointer (e.g. mouse)
  6189 │ │                */
  6190 │ │               POINTER,
  6191 │ │               /**
  6192 │ │                * The seat has touchscreen(s) attached
  6193 │ │                */
  6194 │ │               TOUCH,
  6195 │ │               /**
  6196 │ │                * The seat has drawing tablet(s) attached
  6197 │ │                */
  6198 │ │               TABLET_STYLUS,
  6199 │ │               /**
  6200 │ │                * The seat has keyboard(s) attached
  6201 │ │                */
  6202 │ │               KEYBOARD,
  6203 │ │               /**
  6204 │ │                * The union of all pointing capabilities
  6205 │ │                */
  6206 │ │               ALL_POINTING,
  6207 │ │               /**
  6208 │ │                * The union of all capabilities
  6209 │ │                */
  6210 │ │               ALL,
  6211 │ │           }
  6212 │ │           /**
  6213 │ │            * These are hints originally defined by the Motif toolkit.
  6214 │ │            * The window manager can use them when determining how to decorate
  6215 │ │            * the window. The hint must be set before mapping the window.
  6216 │ │            */
  6217 │ │   
  6218 │ │           /**
  6219 │ │            * These are hints originally defined by the Motif toolkit.
  6220 │ │            * The window manager can use them when determining how to decorate
  6221 │ │            * the window. The hint must be set before mapping the window.
  6222 │ │            */
  6223 │ │           export namespace WMDecoration {
  6224 │ │               export const $gtype: GObject.GType<WMDecoration>;
  6225 │ │           }
  6226 │ │   
  6227 │ │           enum WMDecoration {
  6228 │ │               /**
  6229 │ │                * all decorations should be applied.
  6230 │ │                */
  6231 │ │               ALL,
  6232 │ │               /**
  6233 │ │                * a frame should be drawn around the window.
  6234 │ │                */
  6235 │ │               BORDER,
  6236 │ │               /**
  6237 │ │                * the frame should have resize handles.
  6238 │ │                */
  6239 │ │               RESIZEH,
  6240 │ │               /**
  6241 │ │                * a titlebar should be placed above the window.
  6242 │ │                */
  6243 │ │               TITLE,
  6244 │ │               /**
  6245 │ │                * a button for opening a menu should be included.
  6246 │ │                */
  6247 │ │               MENU,
  6248 │ │               /**
  6249 │ │                * a minimize button should be included.
  6250 │ │                */
  6251 │ │               MINIMIZE,
  6252 │ │               /**
  6253 │ │                * a maximize button should be included.
  6254 │ │                */
  6255 │ │               MAXIMIZE,
  6256 │ │           }
  6257 │ │           /**
  6258 │ │            * These are hints originally defined by the Motif toolkit. The window manager
  6259 │ │            * can use them when determining the functions to offer for the window. The
  6260 │ │            * hint must be set before mapping the window.
  6261 │ │            */
  6262 │ │   
  6263 │ │           /**
  6264 │ │            * These are hints originally defined by the Motif toolkit. The window manager
  6265 │ │            * can use them when determining the functions to offer for the window. The
  6266 │ │            * hint must be set before mapping the window.
  6267 │ │            */
  6268 │ │           export namespace WMFunction {
  6269 │ │               export const $gtype: GObject.GType<WMFunction>;
  6270 │ │           }
  6271 │ │   
  6272 │ │           enum WMFunction {
  6273 │ │               /**
  6274 │ │                * all functions should be offered.
  6275 │ │                */
  6276 │ │               ALL,
  6277 │ │               /**
  6278 │ │                * the window should be resizable.
  6279 │ │                */
  6280 │ │               RESIZE,
  6281 │ │               /**
  6282 │ │                * the window should be movable.
  6283 │ │                */
  6284 │ │               MOVE,
  6285 │ │               /**
  6286 │ │                * the window should be minimizable.
  6287 │ │                */
  6288 │ │               MINIMIZE,
  6289 │ │               /**
  6290 │ │                * the window should be maximizable.
  6291 │ │                */
  6292 │ │               MAXIMIZE,
  6293 │ │               /**
  6294 │ │                * the window should be closable.
  6295 │ │                */
  6296 │ │               CLOSE,
  6297 │ │           }
  6298 │ │           /**
  6299 │ │            * Used to indicate which fields in the #GdkWindowAttr struct should be honored.
  6300 │ │            * For example, if you filled in the “cursor” and “x” fields of #GdkWindowAttr,
  6301 │ │            * pass “`GDK_WA_X` | `GDK_WA_CURSOR”` to gdk_window_new(). Fields in
  6302 │ │            * #GdkWindowAttr not covered by a bit in this enum are required; for example,
  6303 │ │            * the `width/``height,` `wclass,` and `window_type` fields are required, they have
  6304 │ │            * no corresponding flag in #GdkWindowAttributesType.
  6305 │ │            */
  6306 │ │   
  6307 │ │           /**
  6308 │ │            * Used to indicate which fields in the #GdkWindowAttr struct should be honored.
  6309 │ │            * For example, if you filled in the “cursor” and “x” fields of #GdkWindowAttr,
  6310 │ │            * pass “`GDK_WA_X` | `GDK_WA_CURSOR”` to gdk_window_new(). Fields in
  6311 │ │            * #GdkWindowAttr not covered by a bit in this enum are required; for example,
  6312 │ │            * the `width/``height,` `wclass,` and `window_type` fields are required, they have
  6313 │ │            * no corresponding flag in #GdkWindowAttributesType.
  6314 │ │            */
  6315 │ │           export namespace WindowAttributesType {
  6316 │ │               export const $gtype: GObject.GType<WindowAttributesType>;
  6317 │ │           }
  6318 │ │   
  6319 │ │           enum WindowAttributesType {
  6320 │ │               /**
  6321 │ │                * Honor the title field
  6322 │ │                */
  6323 │ │               TITLE,
  6324 │ │               /**
  6325 │ │                * Honor the X coordinate field
  6326 │ │                */
  6327 │ │               X,
  6328 │ │               /**
  6329 │ │                * Honor the Y coordinate field
  6330 │ │                */
  6331 │ │               Y,
  6332 │ │               /**
  6333 │ │                * Honor the cursor field
  6334 │ │                */
  6335 │ │               CURSOR,
  6336 │ │               /**
  6337 │ │                * Honor the visual field
  6338 │ │                */
  6339 │ │               VISUAL,
  6340 │ │               /**
  6341 │ │                * Honor the wmclass_class and wmclass_name fields
  6342 │ │                */
  6343 │ │               WMCLASS,
  6344 │ │               /**
  6345 │ │                * Honor the override_redirect field
  6346 │ │                */
  6347 │ │               NOREDIR,
  6348 │ │               /**
  6349 │ │                * Honor the type_hint field
  6350 │ │                */
  6351 │ │               TYPE_HINT,
  6352 │ │           }
  6353 │ │           /**
  6354 │ │            * Used to indicate which fields of a #GdkGeometry struct should be paid
  6355 │ │            * attention to. Also, the presence/absence of `GDK_HINT_POS,`
  6356 │ │            * `GDK_HINT_USER_POS,` and `GDK_HINT_USER_SIZE` is significant, though they don't
  6357 │ │            * directly refer to #GdkGeometry fields. `GDK_HINT_USER_POS` will be set
  6358 │ │            * automatically by #GtkWindow if you call gtk_window_move().
  6359 │ │            * `GDK_HINT_USER_POS` and `GDK_HINT_USER_SIZE` should be set if the user
  6360 │ │            * specified a size/position using a --geometry command-line argument;
  6361 │ │            * gtk_window_parse_geometry() automatically sets these flags.
  6362 │ │            */
  6363 │ │   
  6364 │ │           /**
  6365 │ │            * Used to indicate which fields of a #GdkGeometry struct should be paid
  6366 │ │            * attention to. Also, the presence/absence of `GDK_HINT_POS,`
  6367 │ │            * `GDK_HINT_USER_POS,` and `GDK_HINT_USER_SIZE` is significant, though they don't
  6368 │ │            * directly refer to #GdkGeometry fields. `GDK_HINT_USER_POS` will be set
  6369 │ │            * automatically by #GtkWindow if you call gtk_window_move().
  6370 │ │            * `GDK_HINT_USER_POS` and `GDK_HINT_USER_SIZE` should be set if the user
  6371 │ │            * specified a size/position using a --geometry command-line argument;
  6372 │ │            * gtk_window_parse_geometry() automatically sets these flags.
  6373 │ │            */
  6374 │ │           export namespace WindowHints {
  6375 │ │               export const $gtype: GObject.GType<WindowHints>;
  6376 │ │           }
  6377 │ │   
  6378 │ │           enum WindowHints {
  6379 │ │               /**
  6380 │ │                * indicates that the program has positioned the window
  6381 │ │                */
  6382 │ │               POS,
  6383 │ │               /**
  6384 │ │                * min size fields are set
  6385 │ │                */
  6386 │ │               MIN_SIZE,
  6387 │ │               /**
  6388 │ │                * max size fields are set
  6389 │ │                */
  6390 │ │               MAX_SIZE,
  6391 │ │               /**
  6392 │ │                * base size fields are set
  6393 │ │                */
  6394 │ │               BASE_SIZE,
  6395 │ │               /**
  6396 │ │                * aspect ratio fields are set
  6397 │ │                */
  6398 │ │               ASPECT,
  6399 │ │               /**
  6400 │ │                * resize increment fields are set
  6401 │ │                */
  6402 │ │               RESIZE_INC,
  6403 │ │               /**
  6404 │ │                * window gravity field is set
  6405 │ │                */
  6406 │ │               WIN_GRAVITY,
  6407 │ │               /**
  6408 │ │                * indicates that the window’s position was explicitly set
  6409 │ │                *  by the user
  6410 │ │                */
  6411 │ │               USER_POS,
  6412 │ │               /**
  6413 │ │                * indicates that the window’s size was explicitly set by
  6414 │ │                *  the user
  6415 │ │                */
  6416 │ │               USER_SIZE,
  6417 │ │           }
  6418 │ │           /**
  6419 │ │            * Specifies the state of a toplevel window.
  6420 │ │            */
  6421 │ │   
  6422 │ │           /**
  6423 │ │            * Specifies the state of a toplevel window.
  6424 │ │            */
  6425 │ │           export namespace WindowState {
  6426 │ │               export const $gtype: GObject.GType<WindowState>;
  6427 │ │           }
  6428 │ │   
  6429 │ │           enum WindowState {
  6430 │ │               /**
  6431 │ │                * the window is not shown.
  6432 │ │                */
  6433 │ │               WITHDRAWN,
  6434 │ │               /**
  6435 │ │                * the window is minimized.
  6436 │ │                */
  6437 │ │               ICONIFIED,
  6438 │ │               /**
  6439 │ │                * the window is maximized.
  6440 │ │                */
  6441 │ │               MAXIMIZED,
  6442 │ │               /**
  6443 │ │                * the window is sticky.
  6444 │ │                */
  6445 │ │               STICKY,
  6446 │ │               /**
  6447 │ │                * the window is maximized without
  6448 │ │                *   decorations.
  6449 │ │                */
  6450 │ │               FULLSCREEN,
  6451 │ │               /**
  6452 │ │                * the window is kept above other windows.
  6453 │ │                */
  6454 │ │               ABOVE,
  6455 │ │               /**
  6456 │ │                * the window is kept below other windows.
  6457 │ │                */
  6458 │ │               BELOW,
  6459 │ │               /**
  6460 │ │                * the window is presented as focused (with active decorations).
  6461 │ │                */
  6462 │ │               FOCUSED,
  6463 │ │               /**
  6464 │ │                * the window is in a tiled state, Since 3.10. Since 3.22.23, this
  6465 │ │                *                          is deprecated in favor of per-edge information.
  6466 │ │                */
  6467 │ │               TILED,
  6468 │ │               /**
  6469 │ │                * whether the top edge is tiled, Since 3.22.23
  6470 │ │                */
  6471 │ │               TOP_TILED,
  6472 │ │               /**
  6473 │ │                * whether the top edge is resizable, Since 3.22.23
  6474 │ │                */
  6475 │ │               TOP_RESIZABLE,
  6476 │ │               /**
  6477 │ │                * whether the right edge is tiled, Since 3.22.23
  6478 │ │                */
  6479 │ │               RIGHT_TILED,
  6480 │ │               /**
  6481 │ │                * whether the right edge is resizable, Since 3.22.23
  6482 │ │                */
  6483 │ │               RIGHT_RESIZABLE,
  6484 │ │               /**
  6485 │ │                * whether the bottom edge is tiled, Since 3.22.23
  6486 │ │                */
  6487 │ │               BOTTOM_TILED,
  6488 │ │               /**
  6489 │ │                * whether the bottom edge is resizable, Since 3.22.23
  6490 │ │                */
  6491 │ │               BOTTOM_RESIZABLE,
  6492 │ │               /**
  6493 │ │                * whether the left edge is tiled, Since 3.22.23
  6494 │ │                */
  6495 │ │               LEFT_TILED,
  6496 │ │               /**
  6497 │ │                * whether the left edge is resizable, Since 3.22.23
  6498 │ │                */
  6499 │ │               LEFT_RESIZABLE,
  6500 │ │           }
  6501 │ │           namespace AppLaunchContext {
  6502 │ │               // Signal signatures
  6503 │ │               interface SignalSignatures extends Gio.AppLaunchContext.SignalSignatures {
  6504 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  6505 │ │               }
  6506 │ │   
  6507 │ │               // Constructor properties interface
  6508 │ │   
  6509 │ │               interface ConstructorProps extends Gio.AppLaunchContext.ConstructorProps {
  6510 │ │                   display: Display;
  6511 │ │               }
  6512 │ │           }
  6513 │ │   
  6514 │ │           /**
  6515 │ │            * GdkAppLaunchContext is an implementation of #GAppLaunchContext that
  6516 │ │            * handles launching an application in a graphical context. It provides
  6517 │ │            * startup notification and allows to launch applications on a specific
  6518 │ │            * screen or workspace.
  6519 │ │            *
  6520 │ │            * ## Launching an application
  6521 │ │            *
  6522 │ │            *
  6523 │ │            * ```c
  6524 │ │            * GdkAppLaunchContext *context;
  6525 │ │            *
  6526 │ │            * context = gdk_display_get_app_launch_context (display);
  6527 │ │            *
  6528 │ │            * gdk_app_launch_context_set_screen (screen);
  6529 │ │            * gdk_app_launch_context_set_timestamp (event->time);
  6530 │ │            *
  6531 │ │            * if (!g_app_info_launch_default_for_uri ("http://www.gtk.org", context, &error))
  6532 │ │            *   g_warning ("Launching failed: %s\n", error->message);
  6533 │ │            *
  6534 │ │            * g_object_unref (context);
  6535 │ │            * ```
  6536 │ │            *
  6537 │ │            */
  6538 │ │           class AppLaunchContext extends Gio.AppLaunchContext {
  6539 │ │               static $gtype: GObject.GType<AppLaunchContext>;
  6540 │ │   
  6541 │ │               // Properties
  6542 │ │   
  6543 │ │               get display(): Display;
  6544 │ │   
  6545 │ │               /**
  6546 │ │                * Compile-time signal type information.
  6547 │ │                *
  6548 │ │                * This instance property is generated only for TypeScript type checking.
  6549 │ │                * It is not defined at runtime and should not be accessed in JS code.
  6550 │ │                * @internal
  6551 │ │                */
  6552 │ │               $signals: AppLaunchContext.SignalSignatures;
  6553 │ │   
  6554 │ │               // Constructors
  6555 │ │   
  6556 │ │               constructor(properties?: Partial<AppLaunchContext.ConstructorProps>, ...args: any[]);
  6557 │ │   
  6558 │ │               _init(...args: any[]): void;
  6559 │ │   
  6560 │ │               static ['new'](): AppLaunchContext;
  6561 │ │   
  6562 │ │               // Signals
  6563 │ │   
  6564 │ │               connect<K extends keyof AppLaunchContext.SignalSignatures>(
  6565 │ │                   signal: K,
  6566 │ │                   callback: GObject.SignalCallback<this, AppLaunchContext.SignalSignatures[K]>,
  6567 │ │               ): number;
  6568 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  6569 │ │               connect_after<K extends keyof AppLaunchContext.SignalSignatures>(
  6570 │ │                   signal: K,
  6571 │ │                   callback: GObject.SignalCallback<this, AppLaunchContext.SignalSignatures[K]>,
  6572 │ │               ): number;
  6573 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  6574 │ │               emit<K extends keyof AppLaunchContext.SignalSignatures>(
  6575 │ │                   signal: K,
  6576 │ │                   ...args: GObject.GjsParameters<AppLaunchContext.SignalSignatures[K]> extends [any, ...infer Q]
  6577 │ │                       ? Q
  6578 │ │                       : never
  6579 │ │               ): void;
  6580 │ │               emit(signal: string, ...args: any[]): void;
  6581 │ │   
  6582 │ │               // Methods
  6583 │ │   
  6584 │ │               /**
  6585 │ │                * Sets the workspace on which applications will be launched when
  6586 │ │                * using this context when running under a window manager that
  6587 │ │                * supports multiple workspaces, as described in the
  6588 │ │                * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
  6589 │ │                *
  6590 │ │                * When the workspace is not specified or `desktop` is set to -1,
  6591 │ │                * it is up to the window manager to pick one, typically it will
  6592 │ │                * be the current workspace.
  6593 │ │                * @param desktop the number of a workspace, or -1
  6594 │ │                */
  6595 │ │               set_desktop(desktop: number): void;
  6596 │ │               /**
  6597 │ │                * Sets the display on which applications will be launched when
  6598 │ │                * using this context. See also gdk_app_launch_context_set_screen().
  6599 │ │                * @param display a #GdkDisplay
  6600 │ │                */
  6601 │ │               set_display(display: Display): void;
  6602 │ │               /**
  6603 │ │                * Sets the icon for applications that are launched with this
  6604 │ │                * context.
  6605 │ │                *
  6606 │ │                * Window Managers can use this information when displaying startup
  6607 │ │                * notification.
  6608 │ │                *
  6609 │ │                * See also gdk_app_launch_context_set_icon_name().
  6610 │ │                * @param icon a #GIcon, or %NULL
  6611 │ │                */
  6612 │ │               set_icon(icon?: Gio.Icon | null): void;
  6613 │ │               /**
  6614 │ │                * Sets the icon for applications that are launched with this context.
  6615 │ │                * The `icon_name` will be interpreted in the same way as the Icon field
  6616 │ │                * in desktop files. See also gdk_app_launch_context_set_icon().
  6617 │ │                *
  6618 │ │                * If both `icon` and `icon_name` are set, the `icon_name` takes priority.
  6619 │ │                * If neither `icon` or `icon_name` is set, the icon is taken from either
  6620 │ │                * the file that is passed to launched application or from the #GAppInfo
  6621 │ │                * for the launched application itself.
  6622 │ │                * @param icon_name an icon name, or %NULL
  6623 │ │                */
  6624 │ │               set_icon_name(icon_name?: string | null): void;
  6625 │ │               /**
  6626 │ │                * Sets the screen on which applications will be launched when
  6627 │ │                * using this context. See also gdk_app_launch_context_set_display().
  6628 │ │                *
  6629 │ │                * Note that, typically, a #GdkScreen represents a logical screen,
  6630 │ │                * not a physical monitor.
  6631 │ │                *
  6632 │ │                * If both `screen` and `display` are set, the `screen` takes priority.
  6633 │ │                * If neither `screen` or `display` are set, the default screen and
  6634 │ │                * display are used.
  6635 │ │                * @param screen a #GdkScreen
  6636 │ │                */
  6637 │ │               set_screen(screen: Screen): void;
  6638 │ │               /**
  6639 │ │                * Sets the timestamp of `context`. The timestamp should ideally
  6640 │ │                * be taken from the event that triggered the launch.
  6641 │ │                *
  6642 │ │                * Window managers can use this information to avoid moving the
  6643 │ │                * focus to the newly launched application when the user is busy
  6644 │ │                * typing in another window. This is also known as 'focus stealing
  6645 │ │                * prevention'.
  6646 │ │                * @param timestamp a timestamp
  6647 │ │                */
  6648 │ │               set_timestamp(timestamp: number): void;
  6649 │ │           }
  6650 │ │   
  6651 │ │           namespace Cursor {
  6652 │ │               // Signal signatures
  6653 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  6654 │ │                   'notify::cursor-type': (pspec: GObject.ParamSpec) => void;
  6655 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  6656 │ │               }
  6657 │ │   
  6658 │ │               // Constructor properties interface
  6659 │ │   
  6660 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  6661 │ │                   cursor_type: CursorType;
  6662 │ │                   cursorType: CursorType;
  6663 │ │                   display: Display;
  6664 │ │               }
  6665 │ │           }
  6666 │ │   
  6667 │ │           /**
  6668 │ │            * A #GdkCursor represents a cursor. Its contents are private.
  6669 │ │            */
  6670 │ │           abstract class Cursor extends GObject.Object {
  6671 │ │               static $gtype: GObject.GType<Cursor>;
  6672 │ │   
  6673 │ │               // Properties
  6674 │ │   
  6675 │ │               get cursor_type(): CursorType;
  6676 │ │               get cursorType(): CursorType;
  6677 │ │               get display(): Display;
  6678 │ │   
  6679 │ │               /**
  6680 │ │                * Compile-time signal type information.
  6681 │ │                *
  6682 │ │                * This instance property is generated only for TypeScript type checking.
  6683 │ │                * It is not defined at runtime and should not be accessed in JS code.
  6684 │ │                * @internal
  6685 │ │                */
  6686 │ │               $signals: Cursor.SignalSignatures;
  6687 │ │   
  6688 │ │               // Constructors
  6689 │ │   
  6690 │ │               constructor(properties?: Partial<Cursor.ConstructorProps>, ...args: any[]);
  6691 │ │   
  6692 │ │               _init(...args: any[]): void;
  6693 │ │   
  6694 │ │               static ['new'](cursor_type: CursorType): Cursor;
  6695 │ │   
  6696 │ │               static new_for_display(display: Display, cursor_type: CursorType): Cursor;
  6697 │ │   
  6698 │ │               static new_from_name(display: Display, name: string): Cursor;
  6699 │ │   
  6700 │ │               static new_from_pixbuf(display: Display, pixbuf: GdkPixbuf.Pixbuf, x: number, y: number): Cursor;
  6701 │ │   
  6702 │ │               static new_from_surface(display: Display, surface: cairo.Surface, x: number, y: number): Cursor;
  6703 │ │   
  6704 │ │               // Signals
  6705 │ │   
  6706 │ │               connect<K extends keyof Cursor.SignalSignatures>(
  6707 │ │                   signal: K,
  6708 │ │                   callback: GObject.SignalCallback<this, Cursor.SignalSignatures[K]>,
  6709 │ │               ): number;
  6710 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  6711 │ │               connect_after<K extends keyof Cursor.SignalSignatures>(
  6712 │ │                   signal: K,
  6713 │ │                   callback: GObject.SignalCallback<this, Cursor.SignalSignatures[K]>,
  6714 │ │               ): number;
  6715 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  6716 │ │               emit<K extends keyof Cursor.SignalSignatures>(
  6717 │ │                   signal: K,
  6718 │ │                   ...args: GObject.GjsParameters<Cursor.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  6719 │ │               ): void;
  6720 │ │               emit(signal: string, ...args: any[]): void;
  6721 │ │   
  6722 │ │               // Methods
  6723 │ │   
  6724 │ │               /**
  6725 │ │                * Returns the cursor type for this cursor.
  6726 │ │                * @returns a #GdkCursorType
  6727 │ │                */
  6728 │ │               get_cursor_type(): CursorType;
  6729 │ │               /**
  6730 │ │                * Returns the display on which the #GdkCursor is defined.
  6731 │ │                * @returns the #GdkDisplay associated to @cursor
  6732 │ │                */
  6733 │ │               get_display(): Display;
  6734 │ │               /**
  6735 │ │                * Returns a #GdkPixbuf with the image used to display the cursor.
  6736 │ │                *
  6737 │ │                * Note that depending on the capabilities of the windowing system and
  6738 │ │                * on the cursor, GDK may not be able to obtain the image data. In this
  6739 │ │                * case, %NULL is returned.
  6740 │ │                * @returns a #GdkPixbuf representing   @cursor, or %NULL
  6741 │ │                */
  6742 │ │               get_image(): GdkPixbuf.Pixbuf | null;
  6743 │ │               /**
  6744 │ │                * Returns a cairo image surface with the image used to display the cursor.
  6745 │ │                *
  6746 │ │                * Note that depending on the capabilities of the windowing system and
  6747 │ │                * on the cursor, GDK may not be able to obtain the image data. In this
  6748 │ │                * case, %NULL is returned.
  6749 │ │                * @returns a #cairo_surface_t   representing @cursor, or %NULL
  6750 │ │                */
  6751 │ │               get_surface(): [cairo.Surface | null, number, number];
  6752 │ │               /**
  6753 │ │                * Adds a reference to `cursor`.
  6754 │ │                * @returns Same @cursor that was passed in
  6755 │ │                */
  6756 │ │               ref(): Cursor;
  6757 │ │               /**
  6758 │ │                * Removes a reference from `cursor,` deallocating the cursor
  6759 │ │                * if no references remain.
  6760 │ │                */
  6761 │ │               unref(): void;
  6762 │ │           }
  6763 │ │   
  6764 │ │           namespace Device {
  6765 │ │               // Signal signatures
  6766 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  6767 │ │                   changed: () => void;
  6768 │ │                   'tool-changed': (arg0: DeviceTool) => void;
  6769 │ │                   'notify::associated-device': (pspec: GObject.ParamSpec) => void;
  6770 │ │                   'notify::axes': (pspec: GObject.ParamSpec) => void;
  6771 │ │                   'notify::device-manager': (pspec: GObject.ParamSpec) => void;
  6772 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  6773 │ │                   'notify::has-cursor': (pspec: GObject.ParamSpec) => void;
  6774 │ │                   'notify::input-mode': (pspec: GObject.ParamSpec) => void;
  6775 │ │                   'notify::input-source': (pspec: GObject.ParamSpec) => void;
  6776 │ │                   'notify::n-axes': (pspec: GObject.ParamSpec) => void;
  6777 │ │                   'notify::name': (pspec: GObject.ParamSpec) => void;
  6778 │ │                   'notify::num-touches': (pspec: GObject.ParamSpec) => void;
  6779 │ │                   'notify::product-id': (pspec: GObject.ParamSpec) => void;
  6780 │ │                   'notify::seat': (pspec: GObject.ParamSpec) => void;
  6781 │ │                   'notify::tool': (pspec: GObject.ParamSpec) => void;
  6782 │ │                   'notify::type': (pspec: GObject.ParamSpec) => void;
  6783 │ │                   'notify::vendor-id': (pspec: GObject.ParamSpec) => void;
  6784 │ │               }
  6785 │ │   
  6786 │ │               // Constructor properties interface
  6787 │ │   
  6788 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  6789 │ │                   associated_device: Device;
  6790 │ │                   associatedDevice: Device;
  6791 │ │                   axes: AxisFlags;
  6792 │ │                   device_manager: DeviceManager;
  6793 │ │                   deviceManager: DeviceManager;
  6794 │ │                   display: Display;
  6795 │ │                   has_cursor: boolean;
  6796 │ │                   hasCursor: boolean;
  6797 │ │                   input_mode: InputMode;
  6798 │ │                   inputMode: InputMode;
  6799 │ │                   input_source: InputSource;
  6800 │ │                   inputSource: InputSource;
  6801 │ │                   n_axes: number;
  6802 │ │                   nAxes: number;
  6803 │ │                   name: string;
  6804 │ │                   num_touches: number;
  6805 │ │                   numTouches: number;
  6806 │ │                   product_id: string;
  6807 │ │                   productId: string;
  6808 │ │                   seat: Seat;
  6809 │ │                   tool: DeviceTool;
  6810 │ │                   type: DeviceType;
  6811 │ │                   vendor_id: string;
  6812 │ │                   vendorId: string;
  6813 │ │               }
  6814 │ │           }
  6815 │ │   
  6816 │ │           /**
  6817 │ │            * The #GdkDevice object represents a single input device, such
  6818 │ │            * as a keyboard, a mouse, a touchpad, etc.
  6819 │ │            *
  6820 │ │            * See the #GdkDeviceManager documentation for more information
  6821 │ │            * about the various kinds of master and slave devices, and their
  6822 │ │            * relationships.
  6823 │ │            */
  6824 │ │           abstract class Device extends GObject.Object {
  6825 │ │               static $gtype: GObject.GType<Device>;
  6826 │ │   
  6827 │ │               // Properties
  6828 │ │   
  6829 │ │               /**
  6830 │ │                * Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
  6831 │ │                * always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.
  6832 │ │                */
  6833 │ │               get associated_device(): Device;
  6834 │ │               /**
  6835 │ │                * Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
  6836 │ │                * always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.
  6837 │ │                */
  6838 │ │               get associatedDevice(): Device;
  6839 │ │               /**
  6840 │ │                * The axes currently available for this device.
  6841 │ │                */
  6842 │ │               get axes(): AxisFlags;
  6843 │ │               /**
  6844 │ │                * The #GdkDeviceManager the #GdkDevice pertains to.
  6845 │ │                */
  6846 │ │               get device_manager(): DeviceManager;
  6847 │ │               /**
  6848 │ │                * The #GdkDeviceManager the #GdkDevice pertains to.
  6849 │ │                */
  6850 │ │               get deviceManager(): DeviceManager;
  6851 │ │               /**
  6852 │ │                * The #GdkDisplay the #GdkDevice pertains to.
  6853 │ │                */
  6854 │ │               get display(): Display;
  6855 │ │               /**
  6856 │ │                * Whether the device is represented by a cursor on the screen. Devices of type
  6857 │ │                * %GDK_DEVICE_TYPE_MASTER will have %TRUE here.
  6858 │ │                */
  6859 │ │               get has_cursor(): boolean;
  6860 │ │               /**
  6861 │ │                * Whether the device is represented by a cursor on the screen. Devices of type
  6862 │ │                * %GDK_DEVICE_TYPE_MASTER will have %TRUE here.
  6863 │ │                */
  6864 │ │               get hasCursor(): boolean;
  6865 │ │               get input_mode(): InputMode;
  6866 │ │               set input_mode(val: InputMode);
  6867 │ │               get inputMode(): InputMode;
  6868 │ │               set inputMode(val: InputMode);
  6869 │ │               /**
  6870 │ │                * Source type for the device.
  6871 │ │                */
  6872 │ │               get input_source(): InputSource;
  6873 │ │               /**
  6874 │ │                * Source type for the device.
  6875 │ │                */
  6876 │ │               get inputSource(): InputSource;
  6877 │ │               /**
  6878 │ │                * Number of axes in the device.
  6879 │ │                */
  6880 │ │               get n_axes(): number;
  6881 │ │               /**
  6882 │ │                * Number of axes in the device.
  6883 │ │                */
  6884 │ │               get nAxes(): number;
  6885 │ │               /**
  6886 │ │                * The device name.
  6887 │ │                */
  6888 │ │               get name(): string;
  6889 │ │               /**
  6890 │ │                * The maximal number of concurrent touches on a touch device.
  6891 │ │                * Will be 0 if the device is not a touch device or if the number
  6892 │ │                * of touches is unknown.
  6893 │ │                */
  6894 │ │               get num_touches(): number;
  6895 │ │               /**
  6896 │ │                * The maximal number of concurrent touches on a touch device.
  6897 │ │                * Will be 0 if the device is not a touch device or if the number
  6898 │ │                * of touches is unknown.
  6899 │ │                */
  6900 │ │               get numTouches(): number;
  6901 │ │               /**
  6902 │ │                * Product ID of this device, see gdk_device_get_product_id().
  6903 │ │                */
  6904 │ │               get product_id(): string;
  6905 │ │               /**
  6906 │ │                * Product ID of this device, see gdk_device_get_product_id().
  6907 │ │                */
  6908 │ │               get productId(): string;
  6909 │ │               /**
  6910 │ │                * #GdkSeat of this device.
  6911 │ │                */
  6912 │ │               get seat(): Seat;
  6913 │ │               set seat(val: Seat);
  6914 │ │               get tool(): DeviceTool;
  6915 │ │               /**
  6916 │ │                * Device role in the device manager.
  6917 │ │                */
  6918 │ │               get type(): DeviceType;
  6919 │ │               /**
  6920 │ │                * Vendor ID of this device, see gdk_device_get_vendor_id().
  6921 │ │                */
  6922 │ │               get vendor_id(): string;
  6923 │ │               /**
  6924 │ │                * Vendor ID of this device, see gdk_device_get_vendor_id().
  6925 │ │                */
  6926 │ │               get vendorId(): string;
  6927 │ │   
  6928 │ │               /**
  6929 │ │                * Compile-time signal type information.
  6930 │ │                *
  6931 │ │                * This instance property is generated only for TypeScript type checking.
  6932 │ │                * It is not defined at runtime and should not be accessed in JS code.
  6933 │ │                * @internal
  6934 │ │                */
  6935 │ │               $signals: Device.SignalSignatures;
  6936 │ │   
  6937 │ │               // Constructors
  6938 │ │   
  6939 │ │               constructor(properties?: Partial<Device.ConstructorProps>, ...args: any[]);
  6940 │ │   
  6941 │ │               _init(...args: any[]): void;
  6942 │ │   
  6943 │ │               // Signals
  6944 │ │   
  6945 │ │               connect<K extends keyof Device.SignalSignatures>(
  6946 │ │                   signal: K,
  6947 │ │                   callback: GObject.SignalCallback<this, Device.SignalSignatures[K]>,
  6948 │ │               ): number;
  6949 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  6950 │ │               connect_after<K extends keyof Device.SignalSignatures>(
  6951 │ │                   signal: K,
  6952 │ │                   callback: GObject.SignalCallback<this, Device.SignalSignatures[K]>,
  6953 │ │               ): number;
  6954 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  6955 │ │               emit<K extends keyof Device.SignalSignatures>(
  6956 │ │                   signal: K,
  6957 │ │                   ...args: GObject.GjsParameters<Device.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  6958 │ │               ): void;
  6959 │ │               emit(signal: string, ...args: any[]): void;
  6960 │ │   
  6961 │ │               // Static methods
  6962 │ │   
  6963 │ │               /**
  6964 │ │                * Determines information about the current keyboard grab.
  6965 │ │                * This is not public API and must not be used by applications.
  6966 │ │                * @param display the display for which to get the grab information
  6967 │ │                * @param device device to get the grab information from
  6968 │ │                */
  6969 │ │               static grab_info_libgtk_only(display: Display, device: Device): [boolean, Window, boolean];
  6970 │ │   
  6971 │ │               // Methods
  6972 │ │   
  6973 │ │               /**
  6974 │ │                * Returns the associated device to `device,` if `device` is of type
  6975 │ │                * %GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
  6976 │ │                * keyboard.
  6977 │ │                *
  6978 │ │                * If `device` is of type %GDK_DEVICE_TYPE_SLAVE, it will return
  6979 │ │                * the master device to which `device` is attached to.
  6980 │ │                *
  6981 │ │                * If `device` is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
  6982 │ │                * returned, as there is no associated device.
  6983 │ │                * @returns The associated device, or   %NULL
  6984 │ │                */
  6985 │ │               get_associated_device(): Device | null;
  6986 │ │               /**
  6987 │ │                * Returns the axes currently available on the device.
  6988 │ │                */
  6989 │ │               get_axes(): AxisFlags;
  6990 │ │               /**
  6991 │ │                * Returns the axis use for `index_`.
  6992 │ │                * @param index_ the index of the axis.
  6993 │ │                * @returns a #GdkAxisUse specifying how the axis is used.
  6994 │ │                */
  6995 │ │               get_axis_use(index_: number): AxisUse;
  6996 │ │               /**
  6997 │ │                * Returns the device type for `device`.
  6998 │ │                * @returns the #GdkDeviceType for @device.
  6999 │ │                */
  7000 │ │               get_device_type(): DeviceType;
  7001 │ │               /**
  7002 │ │                * Returns the #GdkDisplay to which `device` pertains.
  7003 │ │                * @returns a #GdkDisplay. This memory is owned          by GTK+, and must not be freed or unreffed.
  7004 │ │                */
  7005 │ │               get_display(): Display;
  7006 │ │               /**
  7007 │ │                * Determines whether the pointer follows device motion.
  7008 │ │                * This is not meaningful for keyboard devices, which don't have a pointer.
  7009 │ │                * @returns %TRUE if the pointer follows device motion
  7010 │ │                */
  7011 │ │               get_has_cursor(): boolean;
  7012 │ │               /**
  7013 │ │                * If `index_` has a valid keyval, this function will return %TRUE
  7014 │ │                * and fill in `keyval` and `modifiers` with the keyval settings.
  7015 │ │                * @param index_ the index of the macro button to get.
  7016 │ │                * @returns %TRUE if keyval is set for @index.
  7017 │ │                */
  7018 │ │               get_key(index_: number): [boolean, number, ModifierType];
  7019 │ │               /**
  7020 │ │                * Gets information about which window the given pointer device is in, based on events
  7021 │ │                * that have been received so far from the display server. If another application
  7022 │ │                * has a pointer grab, or this application has a grab with owner_events = %FALSE,
  7023 │ │                * %NULL may be returned even if the pointer is physically over one of this
  7024 │ │                * application's windows.
  7025 │ │                * @returns the last window the device
  7026 │ │                */
  7027 │ │               get_last_event_window(): Window | null;
  7028 │ │               /**
  7029 │ │                * Determines the mode of the device.
  7030 │ │                * @returns a #GdkInputSource
  7031 │ │                */
  7032 │ │               get_mode(): InputMode;
  7033 │ │               /**
  7034 │ │                * Returns the number of axes the device currently has.
  7035 │ │                * @returns the number of axes.
  7036 │ │                */
  7037 │ │               get_n_axes(): number;
  7038 │ │               /**
  7039 │ │                * Returns the number of keys the device currently has.
  7040 │ │                * @returns the number of keys.
  7041 │ │                */
  7042 │ │               get_n_keys(): number;
  7043 │ │               /**
  7044 │ │                * Determines the name of the device.
  7045 │ │                * @returns a name
  7046 │ │                */
  7047 │ │               get_name(): string;
  7048 │ │               /**
  7049 │ │                * Gets the current location of `device`. As a slave device
  7050 │ │                * coordinates are those of its master pointer, This function
  7051 │ │                * may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
  7052 │ │                * unless there is an ongoing grab on them, see gdk_device_grab().
  7053 │ │                */
  7054 │ │               get_position(): [Screen | null, number, number];
  7055 │ │               /**
  7056 │ │                * Gets the current location of `device` in double precision. As a slave device's
  7057 │ │                * coordinates are those of its master pointer, this function
  7058 │ │                * may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
  7059 │ │                * unless there is an ongoing grab on them. See gdk_device_grab().
  7060 │ │                */
  7061 │ │               get_position_double(): [Screen | null, number, number];
  7062 │ │               /**
  7063 │ │                * Returns the product ID of this device, or %NULL if this information couldn't
  7064 │ │                * be obtained. This ID is retrieved from the device, and is thus constant for
  7065 │ │                * it. See gdk_device_get_vendor_id() for more information.
  7066 │ │                * @returns the product ID, or %NULL
  7067 │ │                */
  7068 │ │               get_product_id(): string | null;
  7069 │ │               /**
  7070 │ │                * Returns the #GdkSeat the device belongs to.
  7071 │ │                * @returns A #GdkSeat. This memory is owned by GTK+ and          must not be freed.
  7072 │ │                */
  7073 │ │               get_seat(): Seat;
  7074 │ │               /**
  7075 │ │                * Determines the type of the device.
  7076 │ │                * @returns a #GdkInputSource
  7077 │ │                */
  7078 │ │               get_source(): InputSource;
  7079 │ │               /**
  7080 │ │                * Returns the vendor ID of this device, or %NULL if this information couldn't
  7081 │ │                * be obtained. This ID is retrieved from the device, and is thus constant for
  7082 │ │                * it.
  7083 │ │                *
  7084 │ │                * This function, together with gdk_device_get_product_id(), can be used to eg.
  7085 │ │                * compose #GSettings paths to store settings for this device.
  7086 │ │                *
  7087 │ │                *
  7088 │ │                * ```c
  7089 │ │                *  static GSettings *
  7090 │ │                *  get_device_settings (GdkDevice *device)
  7091 │ │                *  {
  7092 │ │                *    const gchar *vendor, *product;
  7093 │ │                *    GSettings *settings;
  7094 │ │                *    GdkDevice *device;
  7095 │ │                *    gchar *path;
  7096 │ │                *
  7097 │ │                *    vendor = gdk_device_get_vendor_id (device);
  7098 │ │                *    product = gdk_device_get_product_id (device);
  7099 │ │                *
  7100 │ │                *    path = g_strdup_printf ("/org/example/app/devices/%s:%s/", vendor, product);
  7101 │ │                *    settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
  7102 │ │                *    g_free (path);
  7103 │ │                *
  7104 │ │                *    return settings;
  7105 │ │                *  }
  7106 │ │                * ```
  7107 │ │                *
  7108 │ │                * @returns the vendor ID, or %NULL
  7109 │ │                */
  7110 │ │               get_vendor_id(): string | null;
  7111 │ │               /**
  7112 │ │                * Obtains the window underneath `device,` returning the location of the device in `win_x` and `win_y`. Returns
  7113 │ │                * %NULL if the window tree under `device` is not known to GDK (for example, belongs to another application).
  7114 │ │                *
  7115 │ │                * As a slave device coordinates are those of its master pointer, This
  7116 │ │                * function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
  7117 │ │                * unless there is an ongoing grab on them, see gdk_device_grab().
  7118 │ │                * @returns the #GdkWindow under the device position, or %NULL.
  7119 │ │                */
  7120 │ │               get_window_at_position(): [Window | null, number, number];
  7121 │ │               /**
  7122 │ │                * Obtains the window underneath `device,` returning the location of the device in `win_x` and `win_y` in
  7123 │ │                * double precision. Returns %NULL if the window tree under `device` is not known to GDK (for example,
  7124 │ │                * belongs to another application).
  7125 │ │                *
  7126 │ │                * As a slave device coordinates are those of its master pointer, This
  7127 │ │                * function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
  7128 │ │                * unless there is an ongoing grab on them, see gdk_device_grab().
  7129 │ │                * @returns the #GdkWindow under the   device position, or %NULL.
  7130 │ │                */
  7131 │ │               get_window_at_position_double(): [Window | null, number, number];
  7132 │ │               /**
  7133 │ │                * Grabs the device so that all events coming from this device are passed to
  7134 │ │                * this application until the device is ungrabbed with gdk_device_ungrab(),
  7135 │ │                * or the window becomes unviewable. This overrides any previous grab on the device
  7136 │ │                * by this client.
  7137 │ │                *
  7138 │ │                * Note that `device` and `window` need to be on the same display.
  7139 │ │                *
  7140 │ │                * Device grabs are used for operations which need complete control over the
  7141 │ │                * given device events (either pointer or keyboard). For example in GTK+ this
  7142 │ │                * is used for Drag and Drop operations, popup menus and such.
  7143 │ │                *
  7144 │ │                * Note that if the event mask of an X window has selected both button press
  7145 │ │                * and button release events, then a button press event will cause an automatic
  7146 │ │                * pointer grab until the button is released. X does this automatically since
  7147 │ │                * most applications expect to receive button press and release events in pairs.
  7148 │ │                * It is equivalent to a pointer grab on the window with `owner_events` set to
  7149 │ │                * %TRUE.
  7150 │ │                *
  7151 │ │                * If you set up anything at the time you take the grab that needs to be
  7152 │ │                * cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
  7153 │ │                * events that are emitted when the grab ends unvoluntarily.
  7154 │ │                * @param window the #GdkWindow which will own the grab (the grab window)
  7155 │ │                * @param grab_ownership specifies the grab ownership.
  7156 │ │                * @param owner_events if %FALSE then all device events are reported with respect to                @window and are only reported if selected by @event_mask. If                %TRUE then pointer events for this application are reported                as normal, but pointer events outside this application are                reported with respect to @window and only if selected by                @event_mask. In either mode, unreported events are discarded.
  7157 │ │                * @param event_mask specifies the event mask, which is used in accordance with              @owner_events.
  7158 │ │                * @param cursor the cursor to display while the grab is active if the device is          a pointer. If this is %NULL then the normal cursors are used for          @window and its descendants, and the cursor for @window is used          elsewhere.
  7159 │ │                * @param time_ the timestamp of the event which led to this pointer grab. This         usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME         can be used if the time isn’t known.
  7160 │ │                * @returns %GDK_GRAB_SUCCESS if the grab was successful.
  7161 │ │                */
  7162 │ │               grab(
  7163 │ │                   window: Window,
  7164 │ │                   grab_ownership: GrabOwnership | null,
  7165 │ │                   owner_events: boolean,
  7166 │ │                   event_mask: EventMask | null,
  7167 │ │                   cursor: Cursor | null,
  7168 │ │                   time_: number,
  7169 │ │               ): GrabStatus;
  7170 │ │               /**
  7171 │ │                * Returns a #GList of #GdkAtoms, containing the labels for
  7172 │ │                * the axes that `device` currently has.
  7173 │ │                * @returns A #GList of #GdkAtoms, free with g_list_free().
  7174 │ │                */
  7175 │ │               list_axes(): Atom[];
  7176 │ │               /**
  7177 │ │                * If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
  7178 │ │                * the list of slave devices attached to it, otherwise it will return
  7179 │ │                * %NULL
  7180 │ │                * @returns the list of slave devices, or %NULL. The list must be          freed with g_list_free(), the contents of the list are          owned by GTK+ and should not be freed.
  7181 │ │                */
  7182 │ │               list_slave_devices(): Device[] | null;
  7183 │ │               /**
  7184 │ │                * Specifies how an axis of a device is used.
  7185 │ │                * @param index_ the index of the axis
  7186 │ │                * @param use specifies how the axis is used
  7187 │ │                */
  7188 │ │               set_axis_use(index_: number, use: AxisUse | null): void;
  7189 │ │               /**
  7190 │ │                * Specifies the X key event to generate when a macro button of a device
  7191 │ │                * is pressed.
  7192 │ │                * @param index_ the index of the macro button to set
  7193 │ │                * @param keyval the keyval to generate
  7194 │ │                * @param modifiers the modifiers to set
  7195 │ │                */
  7196 │ │               set_key(index_: number, keyval: number, modifiers: ModifierType | null): void;
  7197 │ │               /**
  7198 │ │                * Sets a the mode of an input device. The mode controls if the
  7199 │ │                * device is active and whether the device’s range is mapped to the
  7200 │ │                * entire screen or to a single window.
  7201 │ │                *
  7202 │ │                * Note: This is only meaningful for floating devices, master devices (and
  7203 │ │                * slaves connected to these) drive the pointer cursor, which is not limited
  7204 │ │                * by the input mode.
  7205 │ │                * @param mode the input mode.
  7206 │ │                * @returns %TRUE if the mode was successfully changed.
  7207 │ │                */
  7208 │ │               set_mode(mode: InputMode | null): boolean;
  7209 │ │               /**
  7210 │ │                * Release any grab on `device`.
  7211 │ │                * @param time_ a timestap (e.g. %GDK_CURRENT_TIME).
  7212 │ │                */
  7213 │ │               ungrab(time_: number): void;
  7214 │ │               /**
  7215 │ │                * Warps `device` in `display` to the point `x,``y` on
  7216 │ │                * the screen `screen,` unless the device is confined
  7217 │ │                * to a window by a grab, in which case it will be moved
  7218 │ │                * as far as allowed by the grab. Warping the pointer
  7219 │ │                * creates events as if the user had moved the mouse
  7220 │ │                * instantaneously to the destination.
  7221 │ │                *
  7222 │ │                * Note that the pointer should normally be under the
  7223 │ │                * control of the user. This function was added to cover
  7224 │ │                * some rare use cases like keyboard navigation support
  7225 │ │                * for the color picker in the #GtkColorSelectionDialog.
  7226 │ │                * @param screen the screen to warp @device to.
  7227 │ │                * @param x the X coordinate of the destination.
  7228 │ │                * @param y the Y coordinate of the destination.
  7229 │ │                */
  7230 │ │               warp(screen: Screen, x: number, y: number): void;
  7231 │ │           }
  7232 │ │   
  7233 │ │           namespace DeviceManager {
  7234 │ │               // Signal signatures
  7235 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  7236 │ │                   'device-added': (arg0: Device) => void;
  7237 │ │                   'device-changed': (arg0: Device) => void;
  7238 │ │                   'device-removed': (arg0: Device) => void;
  7239 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  7240 │ │               }
  7241 │ │   
  7242 │ │               // Constructor properties interface
  7243 │ │   
  7244 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  7245 │ │                   display: Display;
  7246 │ │               }
  7247 │ │           }
  7248 │ │   
  7249 │ │           /**
  7250 │ │            * In addition to a single pointer and keyboard for user interface input,
  7251 │ │            * GDK contains support for a variety of input devices, including graphics
  7252 │ │            * tablets, touchscreens and multiple pointers/keyboards interacting
  7253 │ │            * simultaneously with the user interface. Such input devices often have
  7254 │ │            * additional features, such as sub-pixel positioning information and
  7255 │ │            * additional device-dependent information.
  7256 │ │            *
  7257 │ │            * In order to query the device hierarchy and be aware of changes in the
  7258 │ │            * device hierarchy (such as virtual devices being created or removed, or
  7259 │ │            * physical devices being plugged or unplugged), GDK provides
  7260 │ │            * #GdkDeviceManager.
  7261 │ │            *
  7262 │ │            * By default, and if the platform supports it, GDK is aware of multiple
  7263 │ │            * keyboard/pointer pairs and multitouch devices. This behavior can be
  7264 │ │            * changed by calling gdk_disable_multidevice() before gdk_display_open().
  7265 │ │            * There should rarely be a need to do that though, since GDK defaults
  7266 │ │            * to a compatibility mode in which it will emit just one enter/leave
  7267 │ │            * event pair for all devices on a window. To enable per-device
  7268 │ │            * enter/leave events and other multi-pointer interaction features,
  7269 │ │            * gdk_window_set_support_multidevice() must be called on
  7270 │ │            * #GdkWindows (or gtk_widget_set_support_multidevice() on widgets).
  7271 │ │            * window. See the gdk_window_set_support_multidevice() documentation
  7272 │ │            * for more information.
  7273 │ │            *
  7274 │ │            * On X11, multi-device support is implemented through XInput 2.
  7275 │ │            * Unless gdk_disable_multidevice() is called, the XInput 2
  7276 │ │            * #GdkDeviceManager implementation will be used as the input source.
  7277 │ │            * Otherwise either the core or XInput 1 implementations will be used.
  7278 │ │            *
  7279 │ │            * For simple applications that don’t have any special interest in
  7280 │ │            * input devices, the so-called “client pointer”
  7281 │ │            * provides a reasonable approximation to a simple setup with a single
  7282 │ │            * pointer and keyboard. The device that has been set as the client
  7283 │ │            * pointer can be accessed via gdk_device_manager_get_client_pointer().
  7284 │ │            *
  7285 │ │            * Conceptually, in multidevice mode there are 2 device types. Virtual
  7286 │ │            * devices (or master devices) are represented by the pointer cursors
  7287 │ │            * and keyboard foci that are seen on the screen. Physical devices (or
  7288 │ │            * slave devices) represent the hardware that is controlling the virtual
  7289 │ │            * devices, and thus have no visible cursor on the screen.
  7290 │ │            *
  7291 │ │            * Virtual devices are always paired, so there is a keyboard device for every
  7292 │ │            * pointer device. Associations between devices may be inspected through
  7293 │ │            * gdk_device_get_associated_device().
  7294 │ │            *
  7295 │ │            * There may be several virtual devices, and several physical devices could
  7296 │ │            * be controlling each of these virtual devices. Physical devices may also
  7297 │ │            * be “floating”, which means they are not attached to any virtual device.
  7298 │ │            *
  7299 │ │            * # Master and slave devices
  7300 │ │            *
  7301 │ │            *
  7302 │ │            * ```
  7303 │ │            * carlos`sacarino:`~$ xinput list
  7304 │ │            * ⎡ Virtual core pointer                          id=2    [master pointer  (3)]
  7305 │ │            * ⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
  7306 │ │            * ⎜   ↳ Wacom ISDv4 E6 Pen stylus                 id=10   [slave  pointer  (2)]
  7307 │ │            * ⎜   ↳ Wacom ISDv4 E6 Finger touch               id=11   [slave  pointer  (2)]
  7308 │ │            * ⎜   ↳ SynPS/2 Synaptics TouchPad                id=13   [slave  pointer  (2)]
  7309 │ │            * ⎜   ↳ TPPS/2 IBM TrackPoint                     id=14   [slave  pointer  (2)]
  7310 │ │            * ⎜   ↳ Wacom ISDv4 E6 Pen eraser                 id=16   [slave  pointer  (2)]
  7311 │ │            * ⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
  7312 │ │            *     ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
  7313 │ │            *     ↳ Power Button                              id=6    [slave  keyboard (3)]
  7314 │ │            *     ↳ Video Bus                                 id=7    [slave  keyboard (3)]
  7315 │ │            *     ↳ Sleep Button                              id=8    [slave  keyboard (3)]
  7316 │ │            *     ↳ Integrated Camera                         id=9    [slave  keyboard (3)]
  7317 │ │            *     ↳ AT Translated Set 2 keyboard              id=12   [slave  keyboard (3)]
  7318 │ │            *     ↳ ThinkPad Extra Buttons                    id=15   [slave  keyboard (3)]
  7319 │ │            * ```
  7320 │ │            *
  7321 │ │            *
  7322 │ │            * By default, GDK will automatically listen for events coming from all
  7323 │ │            * master devices, setting the #GdkDevice for all events coming from input
  7324 │ │            * devices. Events containing device information are #GDK_MOTION_NOTIFY,
  7325 │ │            * #GDK_BUTTON_PRESS, #GDK_2BUTTON_PRESS, #GDK_3BUTTON_PRESS,
  7326 │ │            * #GDK_BUTTON_RELEASE, #GDK_SCROLL, #GDK_KEY_PRESS, #GDK_KEY_RELEASE,
  7327 │ │            * #GDK_ENTER_NOTIFY, #GDK_LEAVE_NOTIFY, #GDK_FOCUS_CHANGE,
  7328 │ │            * #GDK_PROXIMITY_IN, #GDK_PROXIMITY_OUT, #GDK_DRAG_ENTER, #GDK_DRAG_LEAVE,
  7329 │ │            * #GDK_DRAG_MOTION, #GDK_DRAG_STATUS, #GDK_DROP_START, #GDK_DROP_FINISHED
  7330 │ │            * and #GDK_GRAB_BROKEN. When dealing with an event on a master device,
  7331 │ │            * it is possible to get the source (slave) device that the event originated
  7332 │ │            * from via gdk_event_get_source_device().
  7333 │ │            *
  7334 │ │            * On a standard session, all physical devices are connected by default to
  7335 │ │            * the "Virtual Core Pointer/Keyboard" master devices, hence routing all events
  7336 │ │            * through these. This behavior is only modified by device grabs, where the
  7337 │ │            * slave device is temporarily detached for as long as the grab is held, and
  7338 │ │            * more permanently by user modifications to the device hierarchy.
  7339 │ │            *
  7340 │ │            * On certain application specific setups, it may make sense
  7341 │ │            * to detach a physical device from its master pointer, and mapping it to
  7342 │ │            * an specific window. This can be achieved by the combination of
  7343 │ │            * gdk_device_grab() and gdk_device_set_mode().
  7344 │ │            *
  7345 │ │            * In order to listen for events coming from devices
  7346 │ │            * other than a virtual device, gdk_window_set_device_events() must be
  7347 │ │            * called. Generally, this function can be used to modify the event mask
  7348 │ │            * for any given device.
  7349 │ │            *
  7350 │ │            * Input devices may also provide additional information besides X/Y.
  7351 │ │            * For example, graphics tablets may also provide pressure and X/Y tilt
  7352 │ │            * information. This information is device-dependent, and may be
  7353 │ │            * queried through gdk_device_get_axis(). In multidevice mode, virtual
  7354 │ │            * devices will change axes in order to always represent the physical
  7355 │ │            * device that is routing events through it. Whenever the physical device
  7356 │ │            * changes, the #GdkDevice:n-axes property will be notified, and
  7357 │ │            * gdk_device_list_axes() will return the new device axes.
  7358 │ │            *
  7359 │ │            * Devices may also have associated “keys” or
  7360 │ │            * macro buttons. Such keys can be globally set to map into normal X
  7361 │ │            * keyboard events. The mapping is set using gdk_device_set_key().
  7362 │ │            *
  7363 │ │            * In GTK+ 3.20, a new #GdkSeat object has been introduced that
  7364 │ │            * supersedes #GdkDeviceManager and should be preferred in newly
  7365 │ │            * written code.
  7366 │ │            */
  7367 │ │           abstract class DeviceManager extends GObject.Object {
  7368 │ │               static $gtype: GObject.GType<DeviceManager>;
  7369 │ │   
  7370 │ │               // Properties
  7371 │ │   
  7372 │ │               get display(): Display;
  7373 │ │   
  7374 │ │               /**
  7375 │ │                * Compile-time signal type information.
  7376 │ │                *
  7377 │ │                * This instance property is generated only for TypeScript type checking.
  7378 │ │                * It is not defined at runtime and should not be accessed in JS code.
  7379 │ │                * @internal
  7380 │ │                */
  7381 │ │               $signals: DeviceManager.SignalSignatures;
  7382 │ │   
  7383 │ │               // Constructors
  7384 │ │   
  7385 │ │               constructor(properties?: Partial<DeviceManager.ConstructorProps>, ...args: any[]);
  7386 │ │   
  7387 │ │               _init(...args: any[]): void;
  7388 │ │   
  7389 │ │               // Signals
  7390 │ │   
  7391 │ │               connect<K extends keyof DeviceManager.SignalSignatures>(
  7392 │ │                   signal: K,
  7393 │ │                   callback: GObject.SignalCallback<this, DeviceManager.SignalSignatures[K]>,
  7394 │ │               ): number;
  7395 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  7396 │ │               connect_after<K extends keyof DeviceManager.SignalSignatures>(
  7397 │ │                   signal: K,
  7398 │ │                   callback: GObject.SignalCallback<this, DeviceManager.SignalSignatures[K]>,
  7399 │ │               ): number;
  7400 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  7401 │ │               emit<K extends keyof DeviceManager.SignalSignatures>(
  7402 │ │                   signal: K,
  7403 │ │                   ...args: GObject.GjsParameters<DeviceManager.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  7404 │ │               ): void;
  7405 │ │               emit(signal: string, ...args: any[]): void;
  7406 │ │   
  7407 │ │               // Methods
  7408 │ │   
  7409 │ │               /**
  7410 │ │                * Returns the client pointer, that is, the master pointer that acts as the core pointer
  7411 │ │                * for this application. In X11, window managers may change this depending on the interaction
  7412 │ │                * pattern under the presence of several pointers.
  7413 │ │                *
  7414 │ │                * You should use this function seldomly, only in code that isn’t triggered by a #GdkEvent
  7415 │ │                * and there aren’t other means to get a meaningful #GdkDevice to operate on.
  7416 │ │                * @returns The client pointer. This memory is          owned by GDK and must not be freed or unreferenced.
  7417 │ │                */
  7418 │ │               get_client_pointer(): Device;
  7419 │ │               /**
  7420 │ │                * Gets the #GdkDisplay associated to `device_manager`.
  7421 │ │                * @returns the #GdkDisplay to which          @device_manager is associated to, or %NULL. This memory is          owned by GDK and must not be freed or unreferenced.
  7422 │ │                */
  7423 │ │               get_display(): Display | null;
  7424 │ │               /**
  7425 │ │                * Returns the list of devices of type `type` currently attached to
  7426 │ │                * `device_manager`.
  7427 │ │                * @param type device type to get.
  7428 │ │                * @returns a list of          #GdkDevices. The returned list must be          freed with g_list_free (). The list elements are owned by          GTK+ and must not be freed or unreffed.
  7429 │ │                */
  7430 │ │               list_devices(type: DeviceType | null): Device[];
  7431 │ │           }
  7432 │ │   
  7433 │ │           namespace DeviceTool {
  7434 │ │               // Signal signatures
  7435 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  7436 │ │                   'notify::axes': (pspec: GObject.ParamSpec) => void;
  7437 │ │                   'notify::hardware-id': (pspec: GObject.ParamSpec) => void;
  7438 │ │                   'notify::serial': (pspec: GObject.ParamSpec) => void;
  7439 │ │                   'notify::tool-type': (pspec: GObject.ParamSpec) => void;
  7440 │ │               }
  7441 │ │   
  7442 │ │               // Constructor properties interface
  7443 │ │   
  7444 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  7445 │ │                   axes: AxisFlags;
  7446 │ │                   hardware_id: number;
  7447 │ │                   hardwareId: number;
  7448 │ │                   serial: number;
  7449 │ │                   tool_type: DeviceToolType;
  7450 │ │                   toolType: DeviceToolType;
  7451 │ │               }
  7452 │ │           }
  7453 │ │   
  7454 │ │           class DeviceTool extends GObject.Object {
  7455 │ │               static $gtype: GObject.GType<DeviceTool>;
  7456 │ │   
  7457 │ │               // Properties
  7458 │ │   
  7459 │ │               get axes(): AxisFlags;
  7460 │ │               get hardware_id(): number;
  7461 │ │               get hardwareId(): number;
  7462 │ │               get serial(): number;
  7463 │ │               get tool_type(): DeviceToolType;
  7464 │ │               get toolType(): DeviceToolType;
  7465 │ │   
  7466 │ │               /**
  7467 │ │                * Compile-time signal type information.
  7468 │ │                *
  7469 │ │                * This instance property is generated only for TypeScript type checking.
  7470 │ │                * It is not defined at runtime and should not be accessed in JS code.
  7471 │ │                * @internal
  7472 │ │                */
  7473 │ │               $signals: DeviceTool.SignalSignatures;
  7474 │ │   
  7475 │ │               // Constructors
  7476 │ │   
  7477 │ │               constructor(properties?: Partial<DeviceTool.ConstructorProps>, ...args: any[]);
  7478 │ │   
  7479 │ │               _init(...args: any[]): void;
  7480 │ │   
  7481 │ │               // Signals
  7482 │ │   
  7483 │ │               connect<K extends keyof DeviceTool.SignalSignatures>(
  7484 │ │                   signal: K,
  7485 │ │                   callback: GObject.SignalCallback<this, DeviceTool.SignalSignatures[K]>,
  7486 │ │               ): number;
  7487 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  7488 │ │               connect_after<K extends keyof DeviceTool.SignalSignatures>(
  7489 │ │                   signal: K,
  7490 │ │                   callback: GObject.SignalCallback<this, DeviceTool.SignalSignatures[K]>,
  7491 │ │               ): number;
  7492 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  7493 │ │               emit<K extends keyof DeviceTool.SignalSignatures>(
  7494 │ │                   signal: K,
  7495 │ │                   ...args: GObject.GjsParameters<DeviceTool.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  7496 │ │               ): void;
  7497 │ │               emit(signal: string, ...args: any[]): void;
  7498 │ │   
  7499 │ │               // Methods
  7500 │ │   
  7501 │ │               /**
  7502 │ │                * Gets the hardware ID of this tool, or 0 if it's not known. When
  7503 │ │                * non-zero, the identificator is unique for the given tool model,
  7504 │ │                * meaning that two identical tools will share the same `hardware_id,`
  7505 │ │                * but will have different serial numbers (see gdk_device_tool_get_serial()).
  7506 │ │                *
  7507 │ │                * This is a more concrete (and device specific) method to identify
  7508 │ │                * a #GdkDeviceTool than gdk_device_tool_get_tool_type(), as a tablet
  7509 │ │                * may support multiple devices with the same #GdkDeviceToolType,
  7510 │ │                * but having different hardware identificators.
  7511 │ │                * @returns The hardware identificator of this tool.
  7512 │ │                */
  7513 │ │               get_hardware_id(): number;
  7514 │ │               /**
  7515 │ │                * Gets the serial of this tool, this value can be used to identify a
  7516 │ │                * physical tool (eg. a tablet pen) across program executions.
  7517 │ │                * @returns The serial ID for this tool
  7518 │ │                */
  7519 │ │               get_serial(): number;
  7520 │ │               /**
  7521 │ │                * Gets the #GdkDeviceToolType of the tool.
  7522 │ │                * @returns The physical type for this tool. This can be used to figure out what sort of pen is being used, such as an airbrush or a pencil.
  7523 │ │                */
  7524 │ │               get_tool_type(): DeviceToolType;
  7525 │ │           }
  7526 │ │   
  7527 │ │           namespace Display {
  7528 │ │               // Signal signatures
  7529 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  7530 │ │                   closed: (arg0: boolean) => void;
  7531 │ │                   'monitor-added': (arg0: Monitor) => void;
  7532 │ │                   'monitor-removed': (arg0: Monitor) => void;
  7533 │ │                   opened: () => void;
  7534 │ │                   'seat-added': (arg0: Seat) => void;
  7535 │ │                   'seat-removed': (arg0: Seat) => void;
  7536 │ │               }
  7537 │ │   
  7538 │ │               // Constructor properties interface
  7539 │ │   
  7540 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {}
  7541 │ │           }
  7542 │ │   
  7543 │ │           /**
  7544 │ │            * #GdkDisplay objects purpose are two fold:
  7545 │ │            *
  7546 │ │            * - To manage and provide information about input devices (pointers and keyboards)
  7547 │ │            *
  7548 │ │            * - To manage and provide information about the available #GdkScreens
  7549 │ │            *
  7550 │ │            * GdkDisplay objects are the GDK representation of an X Display,
  7551 │ │            * which can be described as a workstation consisting of
  7552 │ │            * a keyboard, a pointing device (such as a mouse) and one or more
  7553 │ │            * screens.
  7554 │ │            * It is used to open and keep track of various GdkScreen objects
  7555 │ │            * currently instantiated by the application. It is also used to
  7556 │ │            * access the keyboard(s) and mouse pointer(s) of the display.
  7557 │ │            *
  7558 │ │            * Most of the input device handling has been factored out into
  7559 │ │            * the separate #GdkDeviceManager object. Every display has a
  7560 │ │            * device manager, which you can obtain using
  7561 │ │            * gdk_display_get_device_manager().
  7562 │ │            */
  7563 │ │           class Display extends GObject.Object {
  7564 │ │               static $gtype: GObject.GType<Display>;
  7565 │ │   
  7566 │ │               /**
  7567 │ │                * Compile-time signal type information.
  7568 │ │                *
  7569 │ │                * This instance property is generated only for TypeScript type checking.
  7570 │ │                * It is not defined at runtime and should not be accessed in JS code.
  7571 │ │                * @internal
  7572 │ │                */
  7573 │ │               $signals: Display.SignalSignatures;
  7574 │ │   
  7575 │ │               // Constructors
  7576 │ │   
  7577 │ │               constructor(properties?: Partial<Display.ConstructorProps>, ...args: any[]);
  7578 │ │   
  7579 │ │               _init(...args: any[]): void;
  7580 │ │   
  7581 │ │               // Signals
  7582 │ │   
  7583 │ │               connect<K extends keyof Display.SignalSignatures>(
  7584 │ │                   signal: K,
  7585 │ │                   callback: GObject.SignalCallback<this, Display.SignalSignatures[K]>,
  7586 │ │               ): number;
  7587 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  7588 │ │               connect_after<K extends keyof Display.SignalSignatures>(
  7589 │ │                   signal: K,
  7590 │ │                   callback: GObject.SignalCallback<this, Display.SignalSignatures[K]>,
  7591 │ │               ): number;
  7592 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  7593 │ │               emit<K extends keyof Display.SignalSignatures>(
  7594 │ │                   signal: K,
  7595 │ │                   ...args: GObject.GjsParameters<Display.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  7596 │ │               ): void;
  7597 │ │               emit(signal: string, ...args: any[]): void;
  7598 │ │   
  7599 │ │               // Static methods
  7600 │ │   
  7601 │ │               /**
  7602 │ │                * Gets the default #GdkDisplay. This is a convenience
  7603 │ │                * function for:
  7604 │ │                * `gdk_display_manager_get_default_display (gdk_display_manager_get ())`.
  7605 │ │                */
  7606 │ │               static get_default(): Display | null;
  7607 │ │               /**
  7608 │ │                * Opens a display.
  7609 │ │                * @param display_name the name of the display to open
  7610 │ │                */
  7611 │ │               static open(display_name: string): Display | null;
  7612 │ │               /**
  7613 │ │                * Opens the default display specified by command line arguments or
  7614 │ │                * environment variables, sets it as the default display, and returns
  7615 │ │                * it. gdk_parse_args() must have been called first. If the default
  7616 │ │                * display has previously been set, simply returns that. An internal
  7617 │ │                * function that should not be used by applications.
  7618 │ │                */
  7619 │ │               static open_default_libgtk_only(): Display | null;
  7620 │ │   
  7621 │ │               // Methods
  7622 │ │   
  7623 │ │               /**
  7624 │ │                * Emits a short beep on `display`
  7625 │ │                */
  7626 │ │               beep(): void;
  7627 │ │               /**
  7628 │ │                * Closes the connection to the windowing system for the given display,
  7629 │ │                * and cleans up associated resources.
  7630 │ │                */
  7631 │ │               close(): void;
  7632 │ │               /**
  7633 │ │                * Returns %TRUE if there is an ongoing grab on `device` for `display`.
  7634 │ │                * @param device a #GdkDevice
  7635 │ │                * @returns %TRUE if there is a grab in effect for @device.
  7636 │ │                */
  7637 │ │               device_is_grabbed(device: Device): boolean;
  7638 │ │               /**
  7639 │ │                * Flushes any requests queued for the windowing system; this happens automatically
  7640 │ │                * when the main loop blocks waiting for new events, but if your application
  7641 │ │                * is drawing without returning control to the main loop, you may need
  7642 │ │                * to call this function explicitly. A common case where this function
  7643 │ │                * needs to be called is when an application is executing drawing commands
  7644 │ │                * from a thread other than the thread where the main loop is running.
  7645 │ │                *
  7646 │ │                * This is most useful for X11. On windowing systems where requests are
  7647 │ │                * handled synchronously, this function will do nothing.
  7648 │ │                */
  7649 │ │               flush(): void;
  7650 │ │               /**
  7651 │ │                * Returns a #GdkAppLaunchContext suitable for launching
  7652 │ │                * applications on the given display.
  7653 │ │                * @returns a new #GdkAppLaunchContext for @display.     Free with g_object_unref() when done
  7654 │ │                */
  7655 │ │               get_app_launch_context(): AppLaunchContext;
  7656 │ │               /**
  7657 │ │                * Returns the default size to use for cursors on `display`.
  7658 │ │                * @returns the default cursor size.
  7659 │ │                */
  7660 │ │               get_default_cursor_size(): number;
  7661 │ │               /**
  7662 │ │                * Returns the default group leader window for all toplevel windows
  7663 │ │                * on `display`. This window is implicitly created by GDK.
  7664 │ │                * See gdk_window_set_group().
  7665 │ │                * @returns The default group leader window for @display
  7666 │ │                */
  7667 │ │               get_default_group(): Window;
  7668 │ │               /**
  7669 │ │                * Get the default #GdkScreen for `display`.
  7670 │ │                * @returns the default #GdkScreen object for @display
  7671 │ │                */
  7672 │ │               get_default_screen(): Screen;
  7673 │ │               /**
  7674 │ │                * Returns the default #GdkSeat for this display.
  7675 │ │                * @returns the default seat.
  7676 │ │                */
  7677 │ │               get_default_seat(): Seat;
  7678 │ │               /**
  7679 │ │                * Returns the #GdkDeviceManager associated to `display`.
  7680 │ │                * @returns A #GdkDeviceManager, or          %NULL. This memory is owned by GDK and must not be freed          or unreferenced.
  7681 │ │                */
  7682 │ │               get_device_manager(): DeviceManager | null;
  7683 │ │               /**
  7684 │ │                * Gets the next #GdkEvent to be processed for `display,` fetching events from the
  7685 │ │                * windowing system if necessary.
  7686 │ │                * @returns the next #GdkEvent to be processed, or %NULL if no events are pending. The returned #GdkEvent should be freed with gdk_event_free().
  7687 │ │                */
  7688 │ │               get_event(): Event | null;
  7689 │ │               /**
  7690 │ │                * Gets the maximal size to use for cursors on `display`.
  7691 │ │                */
  7692 │ │               get_maximal_cursor_size(): [number, number];
  7693 │ │               /**
  7694 │ │                * Gets a monitor associated with this display.
  7695 │ │                * @param monitor_num number of the monitor
  7696 │ │                * @returns the #GdkMonitor, or %NULL if    @monitor_num is not a valid monitor number
  7697 │ │                */
  7698 │ │               get_monitor(monitor_num: number): Monitor | null;
  7699 │ │               /**
  7700 │ │                * Gets the monitor in which the point (`x,` `y)` is located,
  7701 │ │                * or a nearby monitor if the point is not in any monitor.
  7702 │ │                * @param x the x coordinate of the point
  7703 │ │                * @param y the y coordinate of the point
  7704 │ │                * @returns the monitor containing the point
  7705 │ │                */
  7706 │ │               get_monitor_at_point(x: number, y: number): Monitor;
  7707 │ │               /**
  7708 │ │                * Gets the monitor in which the largest area of `window`
  7709 │ │                * resides, or a monitor close to `window` if it is outside
  7710 │ │                * of all monitors.
  7711 │ │                * @param window a #GdkWindow
  7712 │ │                * @returns the monitor with the largest overlap with @window
  7713 │ │                */
  7714 │ │               get_monitor_at_window(window: Window): Monitor;
  7715 │ │               /**
  7716 │ │                * Gets the number of monitors that belong to `display`.
  7717 │ │                *
  7718 │ │                * The returned number is valid until the next emission of the
  7719 │ │                * #GdkDisplay::monitor-added or #GdkDisplay::monitor-removed signal.
  7720 │ │                * @returns the number of monitors
  7721 │ │                */
  7722 │ │               get_n_monitors(): number;
  7723 │ │               /**
  7724 │ │                * Gets the number of screen managed by the `display`.
  7725 │ │                * @returns number of screens.
  7726 │ │                */
  7727 │ │               get_n_screens(): number;
  7728 │ │               /**
  7729 │ │                * Gets the name of the display.
  7730 │ │                * @returns a string representing the display name. This string is owned by GDK and should not be modified or freed.
  7731 │ │                */
  7732 │ │               get_name(): string;
  7733 │ │               /**
  7734 │ │                * Gets the current location of the pointer and the current modifier
  7735 │ │                * mask for a given display.
  7736 │ │                */
  7737 │ │               get_pointer(): [Screen | null, number, number, ModifierType | null];
  7738 │ │               /**
  7739 │ │                * Gets the primary monitor for the display.
  7740 │ │                *
  7741 │ │                * The primary monitor is considered the monitor where the “main desktop”
  7742 │ │                * lives. While normal application windows typically allow the window
  7743 │ │                * manager to place the windows, specialized desktop applications
  7744 │ │                * such as panels should place themselves on the primary monitor.
  7745 │ │                * @returns the primary monitor, or %NULL if no primary     monitor is configured by the user
  7746 │ │                */
  7747 │ │               get_primary_monitor(): Monitor | null;
  7748 │ │               /**
  7749 │ │                * Returns a screen object for one of the screens of the display.
  7750 │ │                * @param screen_num the screen number
  7751 │ │                * @returns the #GdkScreen object
  7752 │ │                */
  7753 │ │               get_screen(screen_num: number): Screen;
  7754 │ │               /**
  7755 │ │                * Obtains the window underneath the mouse pointer, returning the location
  7756 │ │                * of the pointer in that window in `win_x,` `win_y` for `screen`. Returns %NULL
  7757 │ │                * if the window under the mouse pointer is not known to GDK (for example,
  7758 │ │                * belongs to another application).
  7759 │ │                * @returns the window under the mouse   pointer, or %NULL
  7760 │ │                */
  7761 │ │               get_window_at_pointer(): [Window | null, number, number];
  7762 │ │               /**
  7763 │ │                * Returns whether the display has events that are waiting
  7764 │ │                * to be processed.
  7765 │ │                * @returns %TRUE if there are events ready to be processed.
  7766 │ │                */
  7767 │ │               has_pending(): boolean;
  7768 │ │               /**
  7769 │ │                * Finds out if the display has been closed.
  7770 │ │                * @returns %TRUE if the display is closed.
  7771 │ │                */
  7772 │ │               is_closed(): boolean;
  7773 │ │               /**
  7774 │ │                * Release any keyboard grab
  7775 │ │                * @param time_ a timestap (e.g #GDK_CURRENT_TIME).
  7776 │ │                */
  7777 │ │               keyboard_ungrab(time_: number): void;
  7778 │ │               /**
  7779 │ │                * Returns the list of available input devices attached to `display`.
  7780 │ │                * The list is statically allocated and should not be freed.
  7781 │ │                * @returns a list of #GdkDevice
  7782 │ │                */
  7783 │ │               list_devices(): Device[];
  7784 │ │               /**
  7785 │ │                * Returns the list of seats known to `display`.
  7786 │ │                * @returns the          list of seats known to the #GdkDisplay
  7787 │ │                */
  7788 │ │               list_seats(): Seat[];
  7789 │ │               /**
  7790 │ │                * Indicates to the GUI environment that the application has
  7791 │ │                * finished loading, using a given identifier.
  7792 │ │                *
  7793 │ │                * GTK+ will call this function automatically for #GtkWindow
  7794 │ │                * with custom startup-notification identifier unless
  7795 │ │                * gtk_window_set_auto_startup_notification() is called to
  7796 │ │                * disable that feature.
  7797 │ │                * @param startup_id a startup-notification identifier, for which     notification process should be completed
  7798 │ │                */
  7799 │ │               notify_startup_complete(startup_id: string): void;
  7800 │ │               /**
  7801 │ │                * Gets a copy of the first #GdkEvent in the `display’`s event queue, without
  7802 │ │                * removing the event from the queue.  (Note that this function will
  7803 │ │                * not get more events from the windowing system.  It only checks the events
  7804 │ │                * that have already been moved to the GDK event queue.)
  7805 │ │                * @returns a copy of the first #GdkEvent on the event queue, or %NULL if no events are in the queue. The returned #GdkEvent should be freed with gdk_event_free().
  7806 │ │                */
  7807 │ │               peek_event(): Event | null;
  7808 │ │               /**
  7809 │ │                * Test if the pointer is grabbed.
  7810 │ │                * @returns %TRUE if an active X pointer grab is in effect
  7811 │ │                */
  7812 │ │               pointer_is_grabbed(): boolean;
  7813 │ │               /**
  7814 │ │                * Release any pointer grab.
  7815 │ │                * @param time_ a timestap (e.g. %GDK_CURRENT_TIME).
  7816 │ │                */
  7817 │ │               pointer_ungrab(time_: number): void;
  7818 │ │               /**
  7819 │ │                * Appends a copy of the given event onto the front of the event
  7820 │ │                * queue for `display`.
  7821 │ │                * @param event a #GdkEvent.
  7822 │ │                */
  7823 │ │               put_event(event: Event): void;
  7824 │ │               /**
  7825 │ │                * Request #GdkEventOwnerChange events for ownership changes
  7826 │ │                * of the selection named by the given atom.
  7827 │ │                * @param selection the #GdkAtom naming the selection for which             ownership change notification is requested
  7828 │ │                * @returns whether #GdkEventOwnerChange events will               be sent.
  7829 │ │                */
  7830 │ │               request_selection_notification(selection: Atom): boolean;
  7831 │ │               /**
  7832 │ │                * Sets the double click distance (two clicks within this distance
  7833 │ │                * count as a double click and result in a #GDK_2BUTTON_PRESS event).
  7834 │ │                * See also gdk_display_set_double_click_time().
  7835 │ │                * Applications should not set this, it is a global
  7836 │ │                * user-configured setting.
  7837 │ │                * @param distance distance in pixels
  7838 │ │                */
  7839 │ │               set_double_click_distance(distance: number): void;
  7840 │ │               /**
  7841 │ │                * Sets the double click time (two clicks within this time interval
  7842 │ │                * count as a double click and result in a #GDK_2BUTTON_PRESS event).
  7843 │ │                * Applications should not set this, it is a global
  7844 │ │                * user-configured setting.
  7845 │ │                * @param msec double click time in milliseconds (thousandths of a second)
  7846 │ │                */
  7847 │ │               set_double_click_time(msec: number): void;
  7848 │ │               /**
  7849 │ │                * Issues a request to the clipboard manager to store the
  7850 │ │                * clipboard data. On X11, this is a special program that works
  7851 │ │                * according to the
  7852 │ │                * [FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboard-manager-spec).
  7853 │ │                * @param clipboard_window a #GdkWindow belonging to the clipboard owner
  7854 │ │                * @param time_ a timestamp
  7855 │ │                * @param targets an array of targets                    that should be saved, or %NULL                    if all available targets should be saved.
  7856 │ │                */
  7857 │ │               store_clipboard(clipboard_window: Window, time_: number, targets?: Atom[] | null): void;
  7858 │ │               /**
  7859 │ │                * Returns whether the speicifed display supports clipboard
  7860 │ │                * persistance; i.e. if it’s possible to store the clipboard data after an
  7861 │ │                * application has quit. On X11 this checks if a clipboard daemon is
  7862 │ │                * running.
  7863 │ │                * @returns %TRUE if the display supports clipboard persistance.
  7864 │ │                */
  7865 │ │               supports_clipboard_persistence(): boolean;
  7866 │ │               /**
  7867 │ │                * Returns %TRUE if gdk_window_set_composited() can be used
  7868 │ │                * to redirect drawing on the window using compositing.
  7869 │ │                *
  7870 │ │                * Currently this only works on X11 with XComposite and
  7871 │ │                * XDamage extensions available.
  7872 │ │                * @returns %TRUE if windows may be composited.
  7873 │ │                */
  7874 │ │               supports_composite(): boolean;
  7875 │ │               /**
  7876 │ │                * Returns %TRUE if cursors can use an 8bit alpha channel
  7877 │ │                * on `display`. Otherwise, cursors are restricted to bilevel
  7878 │ │                * alpha (i.e. a mask).
  7879 │ │                * @returns whether cursors can have alpha channels.
  7880 │ │                */
  7881 │ │               supports_cursor_alpha(): boolean;
  7882 │ │               /**
  7883 │ │                * Returns %TRUE if multicolored cursors are supported
  7884 │ │                * on `display`. Otherwise, cursors have only a forground
  7885 │ │                * and a background color.
  7886 │ │                * @returns whether cursors can have multiple colors.
  7887 │ │                */
  7888 │ │               supports_cursor_color(): boolean;
  7889 │ │               /**
  7890 │ │                * Returns %TRUE if gdk_window_input_shape_combine_mask() can
  7891 │ │                * be used to modify the input shape of windows on `display`.
  7892 │ │                * @returns %TRUE if windows with modified input shape are supported
  7893 │ │                */
  7894 │ │               supports_input_shapes(): boolean;
  7895 │ │               /**
  7896 │ │                * Returns whether #GdkEventOwnerChange events will be
  7897 │ │                * sent when the owner of a selection changes.
  7898 │ │                * @returns whether #GdkEventOwnerChange events will               be sent.
  7899 │ │                */
  7900 │ │               supports_selection_notification(): boolean;
  7901 │ │               /**
  7902 │ │                * Returns %TRUE if gdk_window_shape_combine_mask() can
  7903 │ │                * be used to create shaped windows on `display`.
  7904 │ │                * @returns %TRUE if shaped windows are supported
  7905 │ │                */
  7906 │ │               supports_shapes(): boolean;
  7907 │ │               /**
  7908 │ │                * Flushes any requests queued for the windowing system and waits until all
  7909 │ │                * requests have been handled. This is often used for making sure that the
  7910 │ │                * display is synchronized with the current state of the program. Calling
  7911 │ │                * gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
  7912 │ │                * generated from earlier requests are handled before the error trap is
  7913 │ │                * removed.
  7914 │ │                *
  7915 │ │                * This is most useful for X11. On windowing systems where requests are
  7916 │ │                * handled synchronously, this function will do nothing.
  7917 │ │                */
  7918 │ │               sync(): void;
  7919 │ │               /**
  7920 │ │                * Warps the pointer of `display` to the point `x,``y` on
  7921 │ │                * the screen `screen,` unless the pointer is confined
  7922 │ │                * to a window by a grab, in which case it will be moved
  7923 │ │                * as far as allowed by the grab. Warping the pointer
  7924 │ │                * creates events as if the user had moved the mouse
  7925 │ │                * instantaneously to the destination.
  7926 │ │                *
  7927 │ │                * Note that the pointer should normally be under the
  7928 │ │                * control of the user. This function was added to cover
  7929 │ │                * some rare use cases like keyboard navigation support
  7930 │ │                * for the color picker in the #GtkColorSelectionDialog.
  7931 │ │                * @param screen the screen of @display to warp the pointer to
  7932 │ │                * @param x the x coordinate of the destination
  7933 │ │                * @param y the y coordinate of the destination
  7934 │ │                */
  7935 │ │               warp_pointer(screen: Screen, x: number, y: number): void;
  7936 │ │           }
  7937 │ │   
  7938 │ │           namespace DisplayManager {
  7939 │ │               // Signal signatures
  7940 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  7941 │ │                   'display-opened': (arg0: Display) => void;
  7942 │ │                   'notify::default-display': (pspec: GObject.ParamSpec) => void;
  7943 │ │               }
  7944 │ │   
  7945 │ │               // Constructor properties interface
  7946 │ │   
  7947 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  7948 │ │                   default_display: Display;
  7949 │ │                   defaultDisplay: Display;
  7950 │ │               }
  7951 │ │           }
  7952 │ │   
  7953 │ │           /**
  7954 │ │            * The purpose of the #GdkDisplayManager singleton object is to offer
  7955 │ │            * notification when displays appear or disappear or the default display
  7956 │ │            * changes.
  7957 │ │            *
  7958 │ │            * You can use gdk_display_manager_get() to obtain the #GdkDisplayManager
  7959 │ │            * singleton, but that should be rarely necessary. Typically, initializing
  7960 │ │            * GTK+ opens a display that you can work with without ever accessing the
  7961 │ │            * #GdkDisplayManager.
  7962 │ │            *
  7963 │ │            * The GDK library can be built with support for multiple backends.
  7964 │ │            * The #GdkDisplayManager object determines which backend is used
  7965 │ │            * at runtime.
  7966 │ │            *
  7967 │ │            * When writing backend-specific code that is supposed to work with
  7968 │ │            * multiple GDK backends, you have to consider both compile time and
  7969 │ │            * runtime. At compile time, use the #GDK_WINDOWING_X11, #GDK_WINDOWING_WIN32
  7970 │ │            * macros, etc. to find out which backends are present in the GDK library
  7971 │ │            * you are building your application against. At runtime, use type-check
  7972 │ │            * macros like GDK_IS_X11_DISPLAY() to find out which backend is in use:
  7973 │ │            *
  7974 │ │            * ## Backend-specific code ## {#backend-specific}
  7975 │ │            *
  7976 │ │            *
  7977 │ │            * ```c
  7978 │ │            * #ifdef GDK_WINDOWING_X11
  7979 │ │            *   if (GDK_IS_X11_DISPLAY (display))
  7980 │ │            *     {
  7981 │ │            *       // make X11-specific calls here
  7982 │ │            *     }
  7983 │ │            *   else
  7984 │ │            * #endif
  7985 │ │            * #ifdef GDK_WINDOWING_QUARTZ
  7986 │ │            *   if (GDK_IS_QUARTZ_DISPLAY (display))
  7987 │ │            *     {
  7988 │ │            *       // make Quartz-specific calls here
  7989 │ │            *     }
  7990 │ │            *   else
  7991 │ │            * #endif
  7992 │ │            *   g_error ("Unsupported GDK backend");
  7993 │ │            * ```
  7994 │ │            *
  7995 │ │            */
  7996 │ │           class DisplayManager extends GObject.Object {
  7997 │ │               static $gtype: GObject.GType<DisplayManager>;
  7998 │ │   
  7999 │ │               // Properties
  8000 │ │   
  8001 │ │               get default_display(): Display;
  8002 │ │               set default_display(val: Display);
  8003 │ │               get defaultDisplay(): Display;
  8004 │ │               set defaultDisplay(val: Display);
  8005 │ │   
  8006 │ │               /**
  8007 │ │                * Compile-time signal type information.
  8008 │ │                *
  8009 │ │                * This instance property is generated only for TypeScript type checking.
  8010 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8011 │ │                * @internal
  8012 │ │                */
  8013 │ │               $signals: DisplayManager.SignalSignatures;
  8014 │ │   
  8015 │ │               // Constructors
  8016 │ │   
  8017 │ │               constructor(properties?: Partial<DisplayManager.ConstructorProps>, ...args: any[]);
  8018 │ │   
  8019 │ │               _init(...args: any[]): void;
  8020 │ │   
  8021 │ │               // Signals
  8022 │ │   
  8023 │ │               connect<K extends keyof DisplayManager.SignalSignatures>(
  8024 │ │                   signal: K,
  8025 │ │                   callback: GObject.SignalCallback<this, DisplayManager.SignalSignatures[K]>,
  8026 │ │               ): number;
  8027 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8028 │ │               connect_after<K extends keyof DisplayManager.SignalSignatures>(
  8029 │ │                   signal: K,
  8030 │ │                   callback: GObject.SignalCallback<this, DisplayManager.SignalSignatures[K]>,
  8031 │ │               ): number;
  8032 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8033 │ │               emit<K extends keyof DisplayManager.SignalSignatures>(
  8034 │ │                   signal: K,
  8035 │ │                   ...args: GObject.GjsParameters<DisplayManager.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8036 │ │               ): void;
  8037 │ │               emit(signal: string, ...args: any[]): void;
  8038 │ │   
  8039 │ │               // Static methods
  8040 │ │   
  8041 │ │               /**
  8042 │ │                * Gets the singleton #GdkDisplayManager object.
  8043 │ │                *
  8044 │ │                * When called for the first time, this function consults the
  8045 │ │                * `GDK_BACKEND` environment variable to find out which
  8046 │ │                * of the supported GDK backends to use (in case GDK has been compiled
  8047 │ │                * with multiple backends). Applications can use gdk_set_allowed_backends()
  8048 │ │                * to limit what backends can be used.
  8049 │ │                */
  8050 │ │               static get(): DisplayManager;
  8051 │ │   
  8052 │ │               // Methods
  8053 │ │   
  8054 │ │               /**
  8055 │ │                * Gets the default #GdkDisplay.
  8056 │ │                * @returns a #GdkDisplay, or %NULL if     there is no default display.
  8057 │ │                */
  8058 │ │               get_default_display(): Display | null;
  8059 │ │               /**
  8060 │ │                * List all currently open displays.
  8061 │ │                * @returns a newly     allocated #GSList of #GdkDisplay objects. Free with g_slist_free()     when you are done with it.
  8062 │ │                */
  8063 │ │               list_displays(): Display[];
  8064 │ │               /**
  8065 │ │                * Opens a display.
  8066 │ │                * @param name the name of the display to open
  8067 │ │                * @returns a #GdkDisplay, or %NULL if the     display could not be opened
  8068 │ │                */
  8069 │ │               open_display(name: string): Display | null;
  8070 │ │               /**
  8071 │ │                * Sets `display` as the default display.
  8072 │ │                * @param display a #GdkDisplay
  8073 │ │                */
  8074 │ │               set_default_display(display: Display): void;
  8075 │ │           }
  8076 │ │   
  8077 │ │           namespace DragContext {
  8078 │ │               // Signal signatures
  8079 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  8080 │ │                   'action-changed': (arg0: DragAction) => void;
  8081 │ │                   cancel: (arg0: DragCancelReason) => void;
  8082 │ │                   'dnd-finished': () => void;
  8083 │ │                   'drop-performed': (arg0: number) => void;
  8084 │ │               }
  8085 │ │   
  8086 │ │               // Constructor properties interface
  8087 │ │   
  8088 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {}
  8089 │ │           }
  8090 │ │   
  8091 │ │           class DragContext extends GObject.Object {
  8092 │ │               static $gtype: GObject.GType<DragContext>;
  8093 │ │   
  8094 │ │               /**
  8095 │ │                * Compile-time signal type information.
  8096 │ │                *
  8097 │ │                * This instance property is generated only for TypeScript type checking.
  8098 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8099 │ │                * @internal
  8100 │ │                */
  8101 │ │               $signals: DragContext.SignalSignatures;
  8102 │ │   
  8103 │ │               // Constructors
  8104 │ │   
  8105 │ │               constructor(properties?: Partial<DragContext.ConstructorProps>, ...args: any[]);
  8106 │ │   
  8107 │ │               _init(...args: any[]): void;
  8108 │ │   
  8109 │ │               // Signals
  8110 │ │   
  8111 │ │               connect<K extends keyof DragContext.SignalSignatures>(
  8112 │ │                   signal: K,
  8113 │ │                   callback: GObject.SignalCallback<this, DragContext.SignalSignatures[K]>,
  8114 │ │               ): number;
  8115 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8116 │ │               connect_after<K extends keyof DragContext.SignalSignatures>(
  8117 │ │                   signal: K,
  8118 │ │                   callback: GObject.SignalCallback<this, DragContext.SignalSignatures[K]>,
  8119 │ │               ): number;
  8120 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8121 │ │               emit<K extends keyof DragContext.SignalSignatures>(
  8122 │ │                   signal: K,
  8123 │ │                   ...args: GObject.GjsParameters<DragContext.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8124 │ │               ): void;
  8125 │ │               emit(signal: string, ...args: any[]): void;
  8126 │ │   
  8127 │ │               // Methods
  8128 │ │   
  8129 │ │               /**
  8130 │ │                * Determines the bitmask of actions proposed by the source if
  8131 │ │                * gdk_drag_context_get_suggested_action() returns %GDK_ACTION_ASK.
  8132 │ │                * @returns the #GdkDragAction flags
  8133 │ │                */
  8134 │ │               get_actions(): DragAction;
  8135 │ │               /**
  8136 │ │                * Returns the destination window for the DND operation.
  8137 │ │                * @returns a #GdkWindow
  8138 │ │                */
  8139 │ │               get_dest_window(): Window;
  8140 │ │               /**
  8141 │ │                * Returns the #GdkDevice associated to the drag context.
  8142 │ │                * @returns The #GdkDevice associated to @context.
  8143 │ │                */
  8144 │ │               get_device(): Device;
  8145 │ │               /**
  8146 │ │                * Returns the window on which the drag icon should be rendered
  8147 │ │                * during the drag operation. Note that the window may not be
  8148 │ │                * available until the drag operation has begun. GDK will move
  8149 │ │                * the window in accordance with the ongoing drag operation.
  8150 │ │                * The window is owned by `context` and will be destroyed when
  8151 │ │                * the drag operation is over.
  8152 │ │                * @returns the drag window, or %NULL
  8153 │ │                */
  8154 │ │               get_drag_window(): Window | null;
  8155 │ │               /**
  8156 │ │                * Returns the drag protocol that is used by this context.
  8157 │ │                * @returns the drag protocol
  8158 │ │                */
  8159 │ │               get_protocol(): DragProtocol;
  8160 │ │               /**
  8161 │ │                * Determines the action chosen by the drag destination.
  8162 │ │                * @returns a #GdkDragAction value
  8163 │ │                */
  8164 │ │               get_selected_action(): DragAction;
  8165 │ │               /**
  8166 │ │                * Returns the #GdkWindow where the DND operation started.
  8167 │ │                * @returns a #GdkWindow
  8168 │ │                */
  8169 │ │               get_source_window(): Window;
  8170 │ │               /**
  8171 │ │                * Determines the suggested drag action of the context.
  8172 │ │                * @returns a #GdkDragAction value
  8173 │ │                */
  8174 │ │               get_suggested_action(): DragAction;
  8175 │ │               /**
  8176 │ │                * Retrieves the list of targets of the context.
  8177 │ │                * @returns a #GList of targets
  8178 │ │                */
  8179 │ │               list_targets(): Atom[];
  8180 │ │               /**
  8181 │ │                * Requests the drag and drop operation to be managed by `context`.
  8182 │ │                * When a drag and drop operation becomes managed, the #GdkDragContext
  8183 │ │                * will internally handle all input and source-side #GdkEventDND events
  8184 │ │                * as required by the windowing system.
  8185 │ │                *
  8186 │ │                * Once the drag and drop operation is managed, the drag context will
  8187 │ │                * emit the following signals:
  8188 │ │                * - The #GdkDragContext::action-changed signal whenever the final action
  8189 │ │                *   to be performed by the drag and drop operation changes.
  8190 │ │                * - The #GdkDragContext::drop-performed signal after the user performs
  8191 │ │                *   the drag and drop gesture (typically by releasing the mouse button).
  8192 │ │                * - The #GdkDragContext::dnd-finished signal after the drag and drop
  8193 │ │                *   operation concludes (after all #GdkSelection transfers happen).
  8194 │ │                * - The #GdkDragContext::cancel signal if the drag and drop operation is
  8195 │ │                *   finished but doesn't happen over an accepting destination, or is
  8196 │ │                *   cancelled through other means.
  8197 │ │                * @param ipc_window Window to use for IPC messaging/events
  8198 │ │                * @param actions the actions supported by the drag source
  8199 │ │                * @returns #TRUE if the drag and drop operation is managed.
  8200 │ │                */
  8201 │ │               manage_dnd(ipc_window: Window, actions: DragAction | null): boolean;
  8202 │ │               /**
  8203 │ │                * Associates a #GdkDevice to `context,` so all Drag and Drop events
  8204 │ │                * for `context` are emitted as if they came from this device.
  8205 │ │                * @param device a #GdkDevice
  8206 │ │                */
  8207 │ │               set_device(device: Device): void;
  8208 │ │               /**
  8209 │ │                * Sets the position of the drag window that will be kept
  8210 │ │                * under the cursor hotspot. Initially, the hotspot is at the
  8211 │ │                * top left corner of the drag window.
  8212 │ │                * @param hot_x x coordinate of the drag window hotspot
  8213 │ │                * @param hot_y y coordinate of the drag window hotspot
  8214 │ │                */
  8215 │ │               set_hotspot(hot_x: number, hot_y: number): void;
  8216 │ │           }
  8217 │ │   
  8218 │ │           namespace DrawingContext {
  8219 │ │               // Signal signatures
  8220 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  8221 │ │                   'notify::clip': (pspec: GObject.ParamSpec) => void;
  8222 │ │                   'notify::window': (pspec: GObject.ParamSpec) => void;
  8223 │ │               }
  8224 │ │   
  8225 │ │               // Constructor properties interface
  8226 │ │   
  8227 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  8228 │ │                   clip: cairo.Region;
  8229 │ │                   window: Window;
  8230 │ │               }
  8231 │ │           }
  8232 │ │   
  8233 │ │           /**
  8234 │ │            * #GdkDrawingContext is an object that represents the current drawing
  8235 │ │            * state of a #GdkWindow.
  8236 │ │            *
  8237 │ │            * It's possible to use a #GdkDrawingContext to draw on a #GdkWindow
  8238 │ │            * via rendering API like Cairo or OpenGL.
  8239 │ │            *
  8240 │ │            * A #GdkDrawingContext can only be created by calling gdk_window_begin_draw_frame()
  8241 │ │            * and will be valid until a call to gdk_window_end_draw_frame().
  8242 │ │            *
  8243 │ │            * #GdkDrawingContext is available since GDK 3.22
  8244 │ │            */
  8245 │ │           class DrawingContext extends GObject.Object {
  8246 │ │               static $gtype: GObject.GType<DrawingContext>;
  8247 │ │   
  8248 │ │               // Properties
  8249 │ │   
  8250 │ │               /**
  8251 │ │                * The clip region applied to the drawing context.
  8252 │ │                */
  8253 │ │               get clip(): cairo.Region;
  8254 │ │               /**
  8255 │ │                * The #GdkWindow that created the drawing context.
  8256 │ │                */
  8257 │ │               get window(): Window;
  8258 │ │   
  8259 │ │               /**
  8260 │ │                * Compile-time signal type information.
  8261 │ │                *
  8262 │ │                * This instance property is generated only for TypeScript type checking.
  8263 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8264 │ │                * @internal
  8265 │ │                */
  8266 │ │               $signals: DrawingContext.SignalSignatures;
  8267 │ │   
  8268 │ │               // Constructors
  8269 │ │   
  8270 │ │               constructor(properties?: Partial<DrawingContext.ConstructorProps>, ...args: any[]);
  8271 │ │   
  8272 │ │               _init(...args: any[]): void;
  8273 │ │   
  8274 │ │               // Signals
  8275 │ │   
  8276 │ │               connect<K extends keyof DrawingContext.SignalSignatures>(
  8277 │ │                   signal: K,
  8278 │ │                   callback: GObject.SignalCallback<this, DrawingContext.SignalSignatures[K]>,
  8279 │ │               ): number;
  8280 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8281 │ │               connect_after<K extends keyof DrawingContext.SignalSignatures>(
  8282 │ │                   signal: K,
  8283 │ │                   callback: GObject.SignalCallback<this, DrawingContext.SignalSignatures[K]>,
  8284 │ │               ): number;
  8285 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8286 │ │               emit<K extends keyof DrawingContext.SignalSignatures>(
  8287 │ │                   signal: K,
  8288 │ │                   ...args: GObject.GjsParameters<DrawingContext.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8289 │ │               ): void;
  8290 │ │               emit(signal: string, ...args: any[]): void;
  8291 │ │   
  8292 │ │               // Methods
  8293 │ │   
  8294 │ │               /**
  8295 │ │                * Retrieves a Cairo context to be used to draw on the #GdkWindow
  8296 │ │                * that created the #GdkDrawingContext.
  8297 │ │                *
  8298 │ │                * The returned context is guaranteed to be valid as long as the
  8299 │ │                * #GdkDrawingContext is valid, that is between a call to
  8300 │ │                * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame().
  8301 │ │                * @returns a Cairo context to be used to draw   the contents of the #GdkWindow. The context is owned by the   #GdkDrawingContext and should not be destroyed
  8302 │ │                */
  8303 │ │               get_cairo_context(): cairo.Context;
  8304 │ │               /**
  8305 │ │                * Retrieves a copy of the clip region used when creating the `context`.
  8306 │ │                * @returns a Cairo region
  8307 │ │                */
  8308 │ │               get_clip(): cairo.Region | null;
  8309 │ │               /**
  8310 │ │                * Retrieves the window that created the drawing `context`.
  8311 │ │                * @returns a #GdkWindow
  8312 │ │                */
  8313 │ │               get_window(): Window;
  8314 │ │               /**
  8315 │ │                * Checks whether the given #GdkDrawingContext is valid.
  8316 │ │                * @returns %TRUE if the context is valid
  8317 │ │                */
  8318 │ │               is_valid(): boolean;
  8319 │ │           }
  8320 │ │   
  8321 │ │           namespace FrameClock {
  8322 │ │               // Signal signatures
  8323 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  8324 │ │                   'after-paint': () => void;
  8325 │ │                   'before-paint': () => void;
  8326 │ │                   'flush-events': () => void;
  8327 │ │                   layout: () => void;
  8328 │ │                   paint: () => void;
  8329 │ │                   'resume-events': () => void;
  8330 │ │                   update: () => void;
  8331 │ │               }
  8332 │ │   
  8333 │ │               // Constructor properties interface
  8334 │ │   
  8335 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {}
  8336 │ │           }
  8337 │ │   
  8338 │ │           /**
  8339 │ │            * A #GdkFrameClock tells the application when to update and repaint a
  8340 │ │            * window. This may be synced to the vertical refresh rate of the
  8341 │ │            * monitor, for example. Even when the frame clock uses a simple timer
  8342 │ │            * rather than a hardware-based vertical sync, the frame clock helps
  8343 │ │            * because it ensures everything paints at the same time (reducing the
  8344 │ │            * total number of frames). The frame clock can also automatically
  8345 │ │            * stop painting when it knows the frames will not be visible, or
  8346 │ │            * scale back animation framerates.
  8347 │ │            *
  8348 │ │            * #GdkFrameClock is designed to be compatible with an OpenGL-based
  8349 │ │            * implementation or with mozRequestAnimationFrame in Firefox,
  8350 │ │            * for example.
  8351 │ │            *
  8352 │ │            * A frame clock is idle until someone requests a frame with
  8353 │ │            * gdk_frame_clock_request_phase(). At some later point that makes
  8354 │ │            * sense for the synchronization being implemented, the clock will
  8355 │ │            * process a frame and emit signals for each phase that has been
  8356 │ │            * requested. (See the signals of the #GdkFrameClock class for
  8357 │ │            * documentation of the phases. %GDK_FRAME_CLOCK_PHASE_UPDATE and the
  8358 │ │            * #GdkFrameClock::update signal are most interesting for application
  8359 │ │            * writers, and are used to update the animations, using the frame time
  8360 │ │            * given by gdk_frame_clock_get_frame_time().
  8361 │ │            *
  8362 │ │            * The frame time is reported in microseconds and generally in the same
  8363 │ │            * timescale as g_get_monotonic_time(), however, it is not the same
  8364 │ │            * as g_get_monotonic_time(). The frame time does not advance during
  8365 │ │            * the time a frame is being painted, and outside of a frame, an attempt
  8366 │ │            * is made so that all calls to gdk_frame_clock_get_frame_time() that
  8367 │ │            * are called at a “similar” time get the same value. This means that
  8368 │ │            * if different animations are timed by looking at the difference in
  8369 │ │            * time between an initial value from gdk_frame_clock_get_frame_time()
  8370 │ │            * and the value inside the #GdkFrameClock::update signal of the clock,
  8371 │ │            * they will stay exactly synchronized.
  8372 │ │            */
  8373 │ │           abstract class FrameClock extends GObject.Object {
  8374 │ │               static $gtype: GObject.GType<FrameClock>;
  8375 │ │   
  8376 │ │               /**
  8377 │ │                * Compile-time signal type information.
  8378 │ │                *
  8379 │ │                * This instance property is generated only for TypeScript type checking.
  8380 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8381 │ │                * @internal
  8382 │ │                */
  8383 │ │               $signals: FrameClock.SignalSignatures;
  8384 │ │   
  8385 │ │               // Constructors
  8386 │ │   
  8387 │ │               constructor(properties?: Partial<FrameClock.ConstructorProps>, ...args: any[]);
  8388 │ │   
  8389 │ │               _init(...args: any[]): void;
  8390 │ │   
  8391 │ │               // Signals
  8392 │ │   
  8393 │ │               connect<K extends keyof FrameClock.SignalSignatures>(
  8394 │ │                   signal: K,
  8395 │ │                   callback: GObject.SignalCallback<this, FrameClock.SignalSignatures[K]>,
  8396 │ │               ): number;
  8397 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8398 │ │               connect_after<K extends keyof FrameClock.SignalSignatures>(
  8399 │ │                   signal: K,
  8400 │ │                   callback: GObject.SignalCallback<this, FrameClock.SignalSignatures[K]>,
  8401 │ │               ): number;
  8402 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8403 │ │               emit<K extends keyof FrameClock.SignalSignatures>(
  8404 │ │                   signal: K,
  8405 │ │                   ...args: GObject.GjsParameters<FrameClock.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8406 │ │               ): void;
  8407 │ │               emit(signal: string, ...args: any[]): void;
  8408 │ │   
  8409 │ │               // Methods
  8410 │ │   
  8411 │ │               /**
  8412 │ │                * Starts updates for an animation. Until a matching call to
  8413 │ │                * gdk_frame_clock_end_updating() is made, the frame clock will continually
  8414 │ │                * request a new frame with the %GDK_FRAME_CLOCK_PHASE_UPDATE phase.
  8415 │ │                * This function may be called multiple times and frames will be
  8416 │ │                * requested until gdk_frame_clock_end_updating() is called the same
  8417 │ │                * number of times.
  8418 │ │                */
  8419 │ │               begin_updating(): void;
  8420 │ │               /**
  8421 │ │                * Stops updates for an animation. See the documentation for
  8422 │ │                * gdk_frame_clock_begin_updating().
  8423 │ │                */
  8424 │ │               end_updating(): void;
  8425 │ │               /**
  8426 │ │                * Gets the frame timings for the current frame.
  8427 │ │                * @returns the #GdkFrameTimings for the  frame currently being processed, or even no frame is being  processed, for the previous frame. Before any frames have been  processed, returns %NULL.
  8428 │ │                */
  8429 │ │               get_current_timings(): FrameTimings | null;
  8430 │ │               /**
  8431 │ │                * A #GdkFrameClock maintains a 64-bit counter that increments for
  8432 │ │                * each frame drawn.
  8433 │ │                * @returns inside frame processing, the value of the frame counter  for the current frame. Outside of frame processing, the frame   counter for the last frame.
  8434 │ │                */
  8435 │ │               get_frame_counter(): number;
  8436 │ │               /**
  8437 │ │                * Gets the time that should currently be used for animations.  Inside
  8438 │ │                * the processing of a frame, it’s the time used to compute the
  8439 │ │                * animation position of everything in a frame. Outside of a frame, it's
  8440 │ │                * the time of the conceptual “previous frame,” which may be either
  8441 │ │                * the actual previous frame time, or if that’s too old, an updated
  8442 │ │                * time.
  8443 │ │                * @returns a timestamp in microseconds, in the timescale of  of g_get_monotonic_time().
  8444 │ │                */
  8445 │ │               get_frame_time(): number;
  8446 │ │               /**
  8447 │ │                * #GdkFrameClock internally keeps a history of #GdkFrameTimings
  8448 │ │                * objects for recent frames that can be retrieved with
  8449 │ │                * gdk_frame_clock_get_timings(). The set of stored frames
  8450 │ │                * is the set from the counter values given by
  8451 │ │                * gdk_frame_clock_get_history_start() and
  8452 │ │                * gdk_frame_clock_get_frame_counter(), inclusive.
  8453 │ │                * @returns the frame counter value for the oldest frame  that is available in the internal frame history of the  #GdkFrameClock.
  8454 │ │                */
  8455 │ │               get_history_start(): number;
  8456 │ │               /**
  8457 │ │                * Using the frame history stored in the frame clock, finds the last
  8458 │ │                * known presentation time and refresh interval, and assuming that
  8459 │ │                * presentation times are separated by the refresh interval,
  8460 │ │                * predicts a presentation time that is a multiple of the refresh
  8461 │ │                * interval after the last presentation time, and later than `base_time`.
  8462 │ │                * @param base_time base time for determining a presentaton time
  8463 │ │                */
  8464 │ │               get_refresh_info(base_time: number): [number, number];
  8465 │ │               /**
  8466 │ │                * Retrieves a #GdkFrameTimings object holding timing information
  8467 │ │                * for the current frame or a recent frame. The #GdkFrameTimings
  8468 │ │                * object may not yet be complete: see gdk_frame_timings_get_complete().
  8469 │ │                * @param frame_counter the frame counter value identifying the frame to  be received.
  8470 │ │                * @returns the #GdkFrameTimings object for  the specified frame, or %NULL if it is not available. See  gdk_frame_clock_get_history_start().
  8471 │ │                */
  8472 │ │               get_timings(frame_counter: number): FrameTimings | null;
  8473 │ │               /**
  8474 │ │                * Asks the frame clock to run a particular phase. The signal
  8475 │ │                * corresponding the requested phase will be emitted the next
  8476 │ │                * time the frame clock processes. Multiple calls to
  8477 │ │                * gdk_frame_clock_request_phase() will be combined together
  8478 │ │                * and only one frame processed. If you are displaying animated
  8479 │ │                * content and want to continually request the
  8480 │ │                * %GDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,
  8481 │ │                * you should use gdk_frame_clock_begin_updating() instead, since
  8482 │ │                * this allows GTK+ to adjust system parameters to get maximally
  8483 │ │                * smooth animations.
  8484 │ │                * @param phase the phase that is requested
  8485 │ │                */
  8486 │ │               request_phase(phase: FrameClockPhase | null): void;
  8487 │ │           }
  8488 │ │   
  8489 │ │           namespace GLContext {
  8490 │ │               // Signal signatures
  8491 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  8492 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  8493 │ │                   'notify::shared-context': (pspec: GObject.ParamSpec) => void;
  8494 │ │                   'notify::window': (pspec: GObject.ParamSpec) => void;
  8495 │ │               }
  8496 │ │   
  8497 │ │               // Constructor properties interface
  8498 │ │   
  8499 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  8500 │ │                   display: Display;
  8501 │ │                   shared_context: GLContext;
  8502 │ │                   sharedContext: GLContext;
  8503 │ │                   window: Window;
  8504 │ │               }
  8505 │ │           }
  8506 │ │   
  8507 │ │           /**
  8508 │ │            * #GdkGLContext is an object representing the platform-specific
  8509 │ │            * OpenGL drawing context.
  8510 │ │            *
  8511 │ │            * #GdkGLContexts are created for a #GdkWindow using
  8512 │ │            * gdk_window_create_gl_context(), and the context will match
  8513 │ │            * the #GdkVisual of the window.
  8514 │ │            *
  8515 │ │            * A #GdkGLContext is not tied to any particular normal framebuffer.
  8516 │ │            * For instance, it cannot draw to the #GdkWindow back buffer. The GDK
  8517 │ │            * repaint system is in full control of the painting to that. Instead,
  8518 │ │            * you can create render buffers or textures and use gdk_cairo_draw_from_gl()
  8519 │ │            * in the draw function of your widget to draw them. Then GDK will handle
  8520 │ │            * the integration of your rendering with that of other widgets.
  8521 │ │            *
  8522 │ │            * Support for #GdkGLContext is platform-specific, context creation
  8523 │ │            * can fail, returning %NULL context.
  8524 │ │            *
  8525 │ │            * A #GdkGLContext has to be made "current" in order to start using
  8526 │ │            * it, otherwise any OpenGL call will be ignored.
  8527 │ │            *
  8528 │ │            * ## Creating a new OpenGL context ##
  8529 │ │            *
  8530 │ │            * In order to create a new #GdkGLContext instance you need a
  8531 │ │            * #GdkWindow, which you typically get during the realize call
  8532 │ │            * of a widget.
  8533 │ │            *
  8534 │ │            * A #GdkGLContext is not realized until either gdk_gl_context_make_current(),
  8535 │ │            * or until it is realized using gdk_gl_context_realize(). It is possible to
  8536 │ │            * specify details of the GL context like the OpenGL version to be used, or
  8537 │ │            * whether the GL context should have extra state validation enabled after
  8538 │ │            * calling gdk_window_create_gl_context() by calling gdk_gl_context_realize().
  8539 │ │            * If the realization fails you have the option to change the settings of the
  8540 │ │            * #GdkGLContext and try again.
  8541 │ │            *
  8542 │ │            * ## Using a GdkGLContext ##
  8543 │ │            *
  8544 │ │            * You will need to make the #GdkGLContext the current context
  8545 │ │            * before issuing OpenGL calls; the system sends OpenGL commands to
  8546 │ │            * whichever context is current. It is possible to have multiple
  8547 │ │            * contexts, so you always need to ensure that the one which you
  8548 │ │            * want to draw with is the current one before issuing commands:
  8549 │ │            *
  8550 │ │            *
  8551 │ │            * ```c
  8552 │ │            *   gdk_gl_context_make_current (context);
  8553 │ │            * ```
  8554 │ │            *
  8555 │ │            *
  8556 │ │            * You can now perform your drawing using OpenGL commands.
  8557 │ │            *
  8558 │ │            * You can check which #GdkGLContext is the current one by using
  8559 │ │            * gdk_gl_context_get_current(); you can also unset any #GdkGLContext
  8560 │ │            * that is currently set by calling gdk_gl_context_clear_current().
  8561 │ │            */
  8562 │ │           abstract class GLContext extends GObject.Object {
  8563 │ │               static $gtype: GObject.GType<GLContext>;
  8564 │ │   
  8565 │ │               // Properties
  8566 │ │   
  8567 │ │               /**
  8568 │ │                * The #GdkDisplay used to create the #GdkGLContext.
  8569 │ │                */
  8570 │ │               get display(): Display;
  8571 │ │               /**
  8572 │ │                * The #GdkGLContext that this context is sharing data with, or %NULL
  8573 │ │                */
  8574 │ │               get shared_context(): GLContext;
  8575 │ │               /**
  8576 │ │                * The #GdkGLContext that this context is sharing data with, or %NULL
  8577 │ │                */
  8578 │ │               get sharedContext(): GLContext;
  8579 │ │               /**
  8580 │ │                * The #GdkWindow the gl context is bound to.
  8581 │ │                */
  8582 │ │               get window(): Window;
  8583 │ │   
  8584 │ │               /**
  8585 │ │                * Compile-time signal type information.
  8586 │ │                *
  8587 │ │                * This instance property is generated only for TypeScript type checking.
  8588 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8589 │ │                * @internal
  8590 │ │                */
  8591 │ │               $signals: GLContext.SignalSignatures;
  8592 │ │   
  8593 │ │               // Constructors
  8594 │ │   
  8595 │ │               constructor(properties?: Partial<GLContext.ConstructorProps>, ...args: any[]);
  8596 │ │   
  8597 │ │               _init(...args: any[]): void;
  8598 │ │   
  8599 │ │               // Signals
  8600 │ │   
  8601 │ │               connect<K extends keyof GLContext.SignalSignatures>(
  8602 │ │                   signal: K,
  8603 │ │                   callback: GObject.SignalCallback<this, GLContext.SignalSignatures[K]>,
  8604 │ │               ): number;
  8605 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8606 │ │               connect_after<K extends keyof GLContext.SignalSignatures>(
  8607 │ │                   signal: K,
  8608 │ │                   callback: GObject.SignalCallback<this, GLContext.SignalSignatures[K]>,
  8609 │ │               ): number;
  8610 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8611 │ │               emit<K extends keyof GLContext.SignalSignatures>(
  8612 │ │                   signal: K,
  8613 │ │                   ...args: GObject.GjsParameters<GLContext.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8614 │ │               ): void;
  8615 │ │               emit(signal: string, ...args: any[]): void;
  8616 │ │   
  8617 │ │               // Static methods
  8618 │ │   
  8619 │ │               /**
  8620 │ │                * Clears the current #GdkGLContext.
  8621 │ │                *
  8622 │ │                * Any OpenGL call after this function returns will be ignored
  8623 │ │                * until gdk_gl_context_make_current() is called.
  8624 │ │                */
  8625 │ │               static clear_current(): void;
  8626 │ │               /**
  8627 │ │                * Retrieves the current #GdkGLContext.
  8628 │ │                */
  8629 │ │               static get_current(): GLContext | null;
  8630 │ │   
  8631 │ │               // Methods
  8632 │ │   
  8633 │ │               /**
  8634 │ │                * Retrieves the value set using gdk_gl_context_set_debug_enabled().
  8635 │ │                * @returns %TRUE if debugging is enabled
  8636 │ │                */
  8637 │ │               get_debug_enabled(): boolean;
  8638 │ │               /**
  8639 │ │                * Retrieves the #GdkDisplay the `context` is created for
  8640 │ │                * @returns a #GdkDisplay or %NULL
  8641 │ │                */
  8642 │ │               get_display(): Display | null;
  8643 │ │               /**
  8644 │ │                * Retrieves the value set using gdk_gl_context_set_forward_compatible().
  8645 │ │                * @returns %TRUE if the context should be forward compatible
  8646 │ │                */
  8647 │ │               get_forward_compatible(): boolean;
  8648 │ │               /**
  8649 │ │                * Retrieves the major and minor version requested by calling
  8650 │ │                * gdk_gl_context_set_required_version().
  8651 │ │                */
  8652 │ │               get_required_version(): [number, number];
  8653 │ │               /**
  8654 │ │                * Retrieves the #GdkGLContext that this `context` share data with.
  8655 │ │                * @returns a #GdkGLContext or %NULL
  8656 │ │                */
  8657 │ │               get_shared_context(): GLContext | null;
  8658 │ │               /**
  8659 │ │                * Checks whether the `context` is using an OpenGL or OpenGL ES profile.
  8660 │ │                * @returns %TRUE if the #GdkGLContext is using an OpenGL ES profile
  8661 │ │                */
  8662 │ │               get_use_es(): boolean;
  8663 │ │               /**
  8664 │ │                * Retrieves the OpenGL version of the `context`.
  8665 │ │                *
  8666 │ │                * The `context` must be realized prior to calling this function.
  8667 │ │                */
  8668 │ │               get_version(): [number, number];
  8669 │ │               /**
  8670 │ │                * Retrieves the #GdkWindow used by the `context`.
  8671 │ │                * @returns a #GdkWindow or %NULL
  8672 │ │                */
  8673 │ │               get_window(): Window | null;
  8674 │ │               /**
  8675 │ │                * Whether the #GdkGLContext is in legacy mode or not.
  8676 │ │                *
  8677 │ │                * The #GdkGLContext must be realized before calling this function.
  8678 │ │                *
  8679 │ │                * When realizing a GL context, GDK will try to use the OpenGL 3.2 core
  8680 │ │                * profile; this profile removes all the OpenGL API that was deprecated
  8681 │ │                * prior to the 3.2 version of the specification. If the realization is
  8682 │ │                * successful, this function will return %FALSE.
  8683 │ │                *
  8684 │ │                * If the underlying OpenGL implementation does not support core profiles,
  8685 │ │                * GDK will fall back to a pre-3.2 compatibility profile, and this function
  8686 │ │                * will return %TRUE.
  8687 │ │                *
  8688 │ │                * You can use the value returned by this function to decide which kind
  8689 │ │                * of OpenGL API to use, or whether to do extension discovery, or what
  8690 │ │                * kind of shader programs to load.
  8691 │ │                * @returns %TRUE if the GL context is in legacy mode
  8692 │ │                */
  8693 │ │               is_legacy(): boolean;
  8694 │ │               /**
  8695 │ │                * Makes the `context` the current one.
  8696 │ │                */
  8697 │ │               make_current(): void;
  8698 │ │               /**
  8699 │ │                * Realizes the given #GdkGLContext.
  8700 │ │                *
  8701 │ │                * It is safe to call this function on a realized #GdkGLContext.
  8702 │ │                * @returns %TRUE if the context is realized
  8703 │ │                */
  8704 │ │               realize(): boolean;
  8705 │ │               /**
  8706 │ │                * Sets whether the #GdkGLContext should perform extra validations and
  8707 │ │                * run time checking. This is useful during development, but has
  8708 │ │                * additional overhead.
  8709 │ │                *
  8710 │ │                * The #GdkGLContext must not be realized or made current prior to
  8711 │ │                * calling this function.
  8712 │ │                * @param enabled whether to enable debugging in the context
  8713 │ │                */
  8714 │ │               set_debug_enabled(enabled: boolean): void;
  8715 │ │               /**
  8716 │ │                * Sets whether the #GdkGLContext should be forward compatible.
  8717 │ │                *
  8718 │ │                * Forward compatibile contexts must not support OpenGL functionality that
  8719 │ │                * has been marked as deprecated in the requested version; non-forward
  8720 │ │                * compatible contexts, on the other hand, must support both deprecated and
  8721 │ │                * non deprecated functionality.
  8722 │ │                *
  8723 │ │                * The #GdkGLContext must not be realized or made current prior to calling
  8724 │ │                * this function.
  8725 │ │                * @param compatible whether the context should be forward compatible
  8726 │ │                */
  8727 │ │               set_forward_compatible(compatible: boolean): void;
  8728 │ │               /**
  8729 │ │                * Sets the major and minor version of OpenGL to request.
  8730 │ │                *
  8731 │ │                * Setting `major` and `minor` to zero will use the default values.
  8732 │ │                *
  8733 │ │                * The #GdkGLContext must not be realized or made current prior to calling
  8734 │ │                * this function.
  8735 │ │                * @param major the major version to request
  8736 │ │                * @param minor the minor version to request
  8737 │ │                */
  8738 │ │               set_required_version(major: number, minor: number): void;
  8739 │ │               /**
  8740 │ │                * Requests that GDK create a OpenGL ES context instead of an OpenGL one,
  8741 │ │                * if the platform and windowing system allows it.
  8742 │ │                *
  8743 │ │                * The `context` must not have been realized.
  8744 │ │                *
  8745 │ │                * By default, GDK will attempt to automatically detect whether the
  8746 │ │                * underlying GL implementation is OpenGL or OpenGL ES once the `context`
  8747 │ │                * is realized.
  8748 │ │                *
  8749 │ │                * You should check the return value of gdk_gl_context_get_use_es() after
  8750 │ │                * calling gdk_gl_context_realize() to decide whether to use the OpenGL or
  8751 │ │                * OpenGL ES API, extensions, or shaders.
  8752 │ │                * @param use_es whether the context should use OpenGL ES instead of OpenGL,   or -1 to allow auto-detection
  8753 │ │                */
  8754 │ │               set_use_es(use_es: number): void;
  8755 │ │           }
  8756 │ │   
  8757 │ │           namespace Keymap {
  8758 │ │               // Signal signatures
  8759 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  8760 │ │                   'direction-changed': () => void;
  8761 │ │                   'keys-changed': () => void;
  8762 │ │                   'state-changed': () => void;
  8763 │ │               }
  8764 │ │   
  8765 │ │               // Constructor properties interface
  8766 │ │   
  8767 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {}
  8768 │ │           }
  8769 │ │   
  8770 │ │           /**
  8771 │ │            * A #GdkKeymap defines the translation from keyboard state
  8772 │ │            * (including a hardware key, a modifier mask, and active keyboard group)
  8773 │ │            * to a keyval. This translation has two phases. The first phase is
  8774 │ │            * to determine the effective keyboard group and level for the keyboard
  8775 │ │            * state; the second phase is to look up the keycode/group/level triplet
  8776 │ │            * in the keymap and see what keyval it corresponds to.
  8777 │ │            */
  8778 │ │           class Keymap extends GObject.Object {
  8779 │ │               static $gtype: GObject.GType<Keymap>;
  8780 │ │   
  8781 │ │               /**
  8782 │ │                * Compile-time signal type information.
  8783 │ │                *
  8784 │ │                * This instance property is generated only for TypeScript type checking.
  8785 │ │                * It is not defined at runtime and should not be accessed in JS code.
  8786 │ │                * @internal
  8787 │ │                */
  8788 │ │               $signals: Keymap.SignalSignatures;
  8789 │ │   
  8790 │ │               // Constructors
  8791 │ │   
  8792 │ │               constructor(properties?: Partial<Keymap.ConstructorProps>, ...args: any[]);
  8793 │ │   
  8794 │ │               _init(...args: any[]): void;
  8795 │ │   
  8796 │ │               // Signals
  8797 │ │   
  8798 │ │               connect<K extends keyof Keymap.SignalSignatures>(
  8799 │ │                   signal: K,
  8800 │ │                   callback: GObject.SignalCallback<this, Keymap.SignalSignatures[K]>,
  8801 │ │               ): number;
  8802 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  8803 │ │               connect_after<K extends keyof Keymap.SignalSignatures>(
  8804 │ │                   signal: K,
  8805 │ │                   callback: GObject.SignalCallback<this, Keymap.SignalSignatures[K]>,
  8806 │ │               ): number;
  8807 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  8808 │ │               emit<K extends keyof Keymap.SignalSignatures>(
  8809 │ │                   signal: K,
  8810 │ │                   ...args: GObject.GjsParameters<Keymap.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  8811 │ │               ): void;
  8812 │ │               emit(signal: string, ...args: any[]): void;
  8813 │ │   
  8814 │ │               // Static methods
  8815 │ │   
  8816 │ │               /**
  8817 │ │                * Returns the #GdkKeymap attached to the default display.
  8818 │ │                */
  8819 │ │               static get_default(): Keymap;
  8820 │ │               /**
  8821 │ │                * Returns the #GdkKeymap attached to `display`.
  8822 │ │                * @param display the #GdkDisplay.
  8823 │ │                */
  8824 │ │               static get_for_display(display: Display): Keymap;
  8825 │ │   
  8826 │ │               // Methods
  8827 │ │   
  8828 │ │               /**
  8829 │ │                * Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are set
  8830 │ │                * in `state` to the virtual modifiers (i.e. Super, Hyper and Meta) and
  8831 │ │                * set the corresponding bits in `state`.
  8832 │ │                *
  8833 │ │                * GDK already does this before delivering key events, but for
  8834 │ │                * compatibility reasons, it only sets the first virtual modifier
  8835 │ │                * it finds, whereas this function sets all matching virtual modifiers.
  8836 │ │                *
  8837 │ │                * This function is useful when matching key events against
  8838 │ │                * accelerators.
  8839 │ │                * @param state pointer to the modifier mask to change
  8840 │ │                */
  8841 │ │               add_virtual_modifiers(state: ModifierType | null): ModifierType;
  8842 │ │               /**
  8843 │ │                * Returns whether the Caps Lock modifer is locked.
  8844 │ │                * @returns %TRUE if Caps Lock is on
  8845 │ │                */
  8846 │ │               get_caps_lock_state(): boolean;
  8847 │ │               /**
  8848 │ │                * Returns the direction of effective layout of the keymap.
  8849 │ │                * @returns %PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL   if it can determine the direction. %PANGO_DIRECTION_NEUTRAL   otherwise.
  8850 │ │                */
  8851 │ │               get_direction(): Pango.Direction;
  8852 │ │               /**
  8853 │ │                * Returns the keyvals bound to `hardware_keycode`.
  8854 │ │                * The Nth #GdkKeymapKey in `keys` is bound to the Nth
  8855 │ │                * keyval in `keyvals`. Free the returned arrays with g_free().
  8856 │ │                * When a keycode is pressed by the user, the keyval from
  8857 │ │                * this list of entries is selected by considering the effective
  8858 │ │                * keyboard group and level. See gdk_keymap_translate_keyboard_state().
  8859 │ │                * @param hardware_keycode a keycode
  8860 │ │                * @returns %TRUE if there were any entries
  8861 │ │                */
  8862 │ │               get_entries_for_keycode(hardware_keycode: number): [boolean, KeymapKey[] | null, number[] | null];
  8863 │ │               /**
  8864 │ │                * Obtains a list of keycode/group/level combinations that will
  8865 │ │                * generate `keyval`. Groups and levels are two kinds of keyboard mode;
  8866 │ │                * in general, the level determines whether the top or bottom symbol
  8867 │ │                * on a key is used, and the group determines whether the left or
  8868 │ │                * right symbol is used. On US keyboards, the shift key changes the
  8869 │ │                * keyboard level, and there are no groups. A group switch key might
  8870 │ │                * convert a keyboard between Hebrew to English modes, for example.
  8871 │ │                * #GdkEventKey contains a %group field that indicates the active
  8872 │ │                * keyboard group. The level is computed from the modifier mask.
  8873 │ │                * The returned array should be freed
  8874 │ │                * with g_free().
  8875 │ │                * @param keyval a keyval, such as %GDK_KEY_a, %GDK_KEY_Up, %GDK_KEY_Return, etc.
  8876 │ │                * @returns %TRUE if keys were found and returned
  8877 │ │                */
  8878 │ │               get_entries_for_keyval(keyval: number): [boolean, KeymapKey[]];
  8879 │ │               /**
  8880 │ │                * Returns the modifier mask the `keymap’`s windowing system backend
  8881 │ │                * uses for a particular purpose.
  8882 │ │                *
  8883 │ │                * Note that this function always returns real hardware modifiers, not
  8884 │ │                * virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
  8885 │ │                * #GDK_META_MASK if the backend maps MOD1 to META), so there are use
  8886 │ │                * cases where the return value of this function has to be transformed
  8887 │ │                * by gdk_keymap_add_virtual_modifiers() in order to contain the
  8888 │ │                * expected result.
  8889 │ │                * @param intent the use case for the modifier mask
  8890 │ │                * @returns the modifier mask used for @intent.
  8891 │ │                */
  8892 │ │               get_modifier_mask(intent: ModifierIntent | null): ModifierType;
  8893 │ │               /**
  8894 │ │                * Returns the current modifier state.
  8895 │ │                * @returns the current modifier state.
  8896 │ │                */
  8897 │ │               get_modifier_state(): number;
  8898 │ │               /**
  8899 │ │                * Returns whether the Num Lock modifer is locked.
  8900 │ │                * @returns %TRUE if Num Lock is on
  8901 │ │                */
  8902 │ │               get_num_lock_state(): boolean;
  8903 │ │               /**
  8904 │ │                * Returns whether the Scroll Lock modifer is locked.
  8905 │ │                * @returns %TRUE if Scroll Lock is on
  8906 │ │                */
  8907 │ │               get_scroll_lock_state(): boolean;
  8908 │ │               /**
  8909 │ │                * Determines if keyboard layouts for both right-to-left and left-to-right
  8910 │ │                * languages are in use.
  8911 │ │                * @returns %TRUE if there are layouts in both directions, %FALSE otherwise
  8912 │ │                */
  8913 │ │               have_bidi_layouts(): boolean;
  8914 │ │               /**
  8915 │ │                * Looks up the keyval mapped to a keycode/group/level triplet.
  8916 │ │                * If no keyval is bound to `key,` returns 0. For normal user input,
  8917 │ │                * you want to use gdk_keymap_translate_keyboard_state() instead of
  8918 │ │                * this function, since the effective group/level may not be
  8919 │ │                * the same as the current keyboard state.
  8920 │ │                * @param key a #GdkKeymapKey with keycode, group, and level initialized
  8921 │ │                * @returns a keyval, or 0 if none was mapped to the given @key
  8922 │ │                */
  8923 │ │               lookup_key(key: KeymapKey): number;
  8924 │ │               /**
  8925 │ │                * Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
  8926 │ │                * are set in `state` to their non-virtual counterparts (i.e. Mod2,
  8927 │ │                * Mod3,...) and set the corresponding bits in `state`.
  8928 │ │                *
  8929 │ │                * This function is useful when matching key events against
  8930 │ │                * accelerators.
  8931 │ │                * @param state pointer to the modifier state to map
  8932 │ │                * @returns %FALSE if two virtual modifiers were mapped to the     same non-virtual modifier. Note that %FALSE is also returned     if a virtual modifier is mapped to a non-virtual modifier that     was already set in @state.
  8933 │ │                */
  8934 │ │               map_virtual_modifiers(state: ModifierType | null): [boolean, ModifierType];
  8935 │ │               /**
  8936 │ │                * Translates the contents of a #GdkEventKey into a keyval, effective
  8937 │ │                * group, and level. Modifiers that affected the translation and
  8938 │ │                * are thus unavailable for application use are returned in
  8939 │ │                * `consumed_modifiers`.
  8940 │ │                * See [Groups][key-group-explanation] for an explanation of
  8941 │ │                * groups and levels. The `effective_group` is the group that was
  8942 │ │                * actually used for the translation; some keys such as Enter are not
  8943 │ │                * affected by the active keyboard group. The `level` is derived from
  8944 │ │                * `state`. For convenience, #GdkEventKey already contains the translated
  8945 │ │                * keyval, so this function isn’t as useful as you might think.
  8946 │ │                *
  8947 │ │                * `consumed_modifiers` gives modifiers that should be masked outfrom `state`
  8948 │ │                * when comparing this key press to a hot key. For instance, on a US keyboard,
  8949 │ │                * the `plus` symbol is shifted, so when comparing a key press to a
  8950 │ │                * `<Control>plus` accelerator `<Shift>` should be masked out.
  8951 │ │                *
  8952 │ │                *
  8953 │ │                * ```c
  8954 │ │                * // We want to ignore irrelevant modifiers like ScrollLock
  8955 │ │                * #define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
  8956 │ │                * gdk_keymap_translate_keyboard_state (keymap, event->hardware_keycode,
  8957 │ │                *                                      event->state, event->group,
  8958 │ │                *                                      &keyval, NULL, NULL, &consumed);
  8959 │ │                * if (keyval == GDK_PLUS &&
  8960 │ │                *     (event->state & ~consumed & ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
  8961 │ │                *   // Control was pressed
  8962 │ │                * ```
  8963 │ │                *
  8964 │ │                *
  8965 │ │                * An older interpretation `consumed_modifiers` was that it contained
  8966 │ │                * all modifiers that might affect the translation of the key;
  8967 │ │                * this allowed accelerators to be stored with irrelevant consumed
  8968 │ │                * modifiers, by doing:
  8969 │ │                *
  8970 │ │                * ```c
  8971 │ │                * // XXX Don’t do this XXX
  8972 │ │                * if (keyval == accel_keyval &&
  8973 │ │                *     (event->state & ~consumed & ALL_ACCELS_MASK) == (accel_mods & ~consumed))
  8974 │ │                *   // Accelerator was pressed
  8975 │ │                * ```
  8976 │ │                *
  8977 │ │                *
  8978 │ │                * However, this did not work if multi-modifier combinations were
  8979 │ │                * used in the keymap, since, for instance, `<Control>` would be
  8980 │ │                * masked out even if only `<Control><Alt>` was used in the keymap.
  8981 │ │                * To support this usage as well as well as possible, all single
  8982 │ │                * modifier combinations that could affect the key for any combination
  8983 │ │                * of modifiers will be returned in `consumed_modifiers;` multi-modifier
  8984 │ │                * combinations are returned only when actually found in `state`. When
  8985 │ │                * you store accelerators, you should always store them with consumed
  8986 │ │                * modifiers removed. Store `<Control>plus`, not `<Control><Shift>plus`,
  8987 │ │                * @param hardware_keycode a keycode
  8988 │ │                * @param state a modifier state
  8989 │ │                * @param group active keyboard group
  8990 │ │                * @returns %TRUE if there was a keyval bound to the keycode/state/group
  8991 │ │                */
  8992 │ │               translate_keyboard_state(
  8993 │ │                   hardware_keycode: number,
  8994 │ │                   state: ModifierType | null,
  8995 │ │                   group: number,
  8996 │ │               ): [boolean, number, number, number, ModifierType | null];
  8997 │ │           }
  8998 │ │   
  8999 │ │           namespace Monitor {
  9000 │ │               // Signal signatures
  9001 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  9002 │ │                   invalidate: () => void;
  9003 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  9004 │ │                   'notify::geometry': (pspec: GObject.ParamSpec) => void;
  9005 │ │                   'notify::height-mm': (pspec: GObject.ParamSpec) => void;
  9006 │ │                   'notify::manufacturer': (pspec: GObject.ParamSpec) => void;
  9007 │ │                   'notify::model': (pspec: GObject.ParamSpec) => void;
  9008 │ │                   'notify::refresh-rate': (pspec: GObject.ParamSpec) => void;
  9009 │ │                   'notify::scale-factor': (pspec: GObject.ParamSpec) => void;
  9010 │ │                   'notify::subpixel-layout': (pspec: GObject.ParamSpec) => void;
  9011 │ │                   'notify::width-mm': (pspec: GObject.ParamSpec) => void;
  9012 │ │                   'notify::workarea': (pspec: GObject.ParamSpec) => void;
  9013 │ │               }
  9014 │ │   
  9015 │ │               // Constructor properties interface
  9016 │ │   
  9017 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  9018 │ │                   display: Display;
  9019 │ │                   geometry: Rectangle;
  9020 │ │                   height_mm: number;
  9021 │ │                   heightMm: number;
  9022 │ │                   manufacturer: string;
  9023 │ │                   model: string;
  9024 │ │                   refresh_rate: number;
  9025 │ │                   refreshRate: number;
  9026 │ │                   scale_factor: number;
  9027 │ │                   scaleFactor: number;
  9028 │ │                   subpixel_layout: SubpixelLayout;
  9029 │ │                   subpixelLayout: SubpixelLayout;
  9030 │ │                   width_mm: number;
  9031 │ │                   widthMm: number;
  9032 │ │                   workarea: Rectangle;
  9033 │ │               }
  9034 │ │           }
  9035 │ │   
  9036 │ │           /**
  9037 │ │            * GdkMonitor objects represent the individual outputs that are
  9038 │ │            * associated with a #GdkDisplay. GdkDisplay has APIs to enumerate
  9039 │ │            * monitors with gdk_display_get_n_monitors() and gdk_display_get_monitor(), and
  9040 │ │            * to find particular monitors with gdk_display_get_primary_monitor() or
  9041 │ │            * gdk_display_get_monitor_at_window().
  9042 │ │            *
  9043 │ │            * GdkMonitor was introduced in GTK+ 3.22 and supersedes earlier
  9044 │ │            * APIs in GdkScreen to obtain monitor-related information.
  9045 │ │            */
  9046 │ │           class Monitor extends GObject.Object {
  9047 │ │               static $gtype: GObject.GType<Monitor>;
  9048 │ │   
  9049 │ │               // Properties
  9050 │ │   
  9051 │ │               get display(): Display;
  9052 │ │               get geometry(): Rectangle;
  9053 │ │               get height_mm(): number;
  9054 │ │               get heightMm(): number;
  9055 │ │               get manufacturer(): string;
  9056 │ │               get model(): string;
  9057 │ │               get refresh_rate(): number;
  9058 │ │               get refreshRate(): number;
  9059 │ │               get scale_factor(): number;
  9060 │ │               get scaleFactor(): number;
  9061 │ │               get subpixel_layout(): SubpixelLayout;
  9062 │ │               get subpixelLayout(): SubpixelLayout;
  9063 │ │               get width_mm(): number;
  9064 │ │               get widthMm(): number;
  9065 │ │               get workarea(): Rectangle;
  9066 │ │   
  9067 │ │               /**
  9068 │ │                * Compile-time signal type information.
  9069 │ │                *
  9070 │ │                * This instance property is generated only for TypeScript type checking.
  9071 │ │                * It is not defined at runtime and should not be accessed in JS code.
  9072 │ │                * @internal
  9073 │ │                */
  9074 │ │               $signals: Monitor.SignalSignatures;
  9075 │ │   
  9076 │ │               // Constructors
  9077 │ │   
  9078 │ │               constructor(properties?: Partial<Monitor.ConstructorProps>, ...args: any[]);
  9079 │ │   
  9080 │ │               _init(...args: any[]): void;
  9081 │ │   
  9082 │ │               // Signals
  9083 │ │   
  9084 │ │               connect<K extends keyof Monitor.SignalSignatures>(
  9085 │ │                   signal: K,
  9086 │ │                   callback: GObject.SignalCallback<this, Monitor.SignalSignatures[K]>,
  9087 │ │               ): number;
  9088 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  9089 │ │               connect_after<K extends keyof Monitor.SignalSignatures>(
  9090 │ │                   signal: K,
  9091 │ │                   callback: GObject.SignalCallback<this, Monitor.SignalSignatures[K]>,
  9092 │ │               ): number;
  9093 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  9094 │ │               emit<K extends keyof Monitor.SignalSignatures>(
  9095 │ │                   signal: K,
  9096 │ │                   ...args: GObject.GjsParameters<Monitor.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  9097 │ │               ): void;
  9098 │ │               emit(signal: string, ...args: any[]): void;
  9099 │ │   
  9100 │ │               // Methods
  9101 │ │   
  9102 │ │               /**
  9103 │ │                * Gets the display that this monitor belongs to.
  9104 │ │                * @returns the display
  9105 │ │                */
  9106 │ │               get_display(): Display;
  9107 │ │               /**
  9108 │ │                * Retrieves the size and position of an individual monitor within the
  9109 │ │                * display coordinate space. The returned geometry is in  ”application pixels”,
  9110 │ │                * not in ”device pixels” (see gdk_monitor_get_scale_factor()).
  9111 │ │                */
  9112 │ │               get_geometry(): Rectangle;
  9113 │ │               /**
  9114 │ │                * Gets the height in millimeters of the monitor.
  9115 │ │                * @returns the physical height of the monitor
  9116 │ │                */
  9117 │ │               get_height_mm(): number;
  9118 │ │               /**
  9119 │ │                * Gets the name or PNP ID of the monitor's manufacturer, if available.
  9120 │ │                *
  9121 │ │                * Note that this value might also vary depending on actual
  9122 │ │                * display backend.
  9123 │ │                *
  9124 │ │                * PNP ID registry is located at https://uefi.org/pnp_id_list
  9125 │ │                * @returns the name of the manufacturer, or %NULL
  9126 │ │                */
  9127 │ │               get_manufacturer(): string | null;
  9128 │ │               /**
  9129 │ │                * Gets the a string identifying the monitor model, if available.
  9130 │ │                * @returns the monitor model, or %NULL
  9131 │ │                */
  9132 │ │               get_model(): string | null;
  9133 │ │               /**
  9134 │ │                * Gets the refresh rate of the monitor, if available.
  9135 │ │                *
  9136 │ │                * The value is in milli-Hertz, so a refresh rate of 60Hz
  9137 │ │                * is returned as 60000.
  9138 │ │                * @returns the refresh rate in milli-Hertz, or 0
  9139 │ │                */
  9140 │ │               get_refresh_rate(): number;
  9141 │ │               /**
  9142 │ │                * Gets the internal scale factor that maps from monitor coordinates
  9143 │ │                * to the actual device pixels. On traditional systems this is 1, but
  9144 │ │                * on very high density outputs this can be a higher value (often 2).
  9145 │ │                *
  9146 │ │                * This can be used if you want to create pixel based data for a
  9147 │ │                * particular monitor, but most of the time you’re drawing to a window
  9148 │ │                * where it is better to use gdk_window_get_scale_factor() instead.
  9149 │ │                * @returns the scale factor
  9150 │ │                */
  9151 │ │               get_scale_factor(): number;
  9152 │ │               /**
  9153 │ │                * Gets information about the layout of red, green and blue
  9154 │ │                * primaries for each pixel in this monitor, if available.
  9155 │ │                * @returns the subpixel layout
  9156 │ │                */
  9157 │ │               get_subpixel_layout(): SubpixelLayout;
  9158 │ │               /**
  9159 │ │                * Gets the width in millimeters of the monitor.
  9160 │ │                * @returns the physical width of the monitor
  9161 │ │                */
  9162 │ │               get_width_mm(): number;
  9163 │ │               /**
  9164 │ │                * Retrieves the size and position of the “work area” on a monitor
  9165 │ │                * within the display coordinate space. The returned geometry is in
  9166 │ │                * ”application pixels”, not in ”device pixels” (see
  9167 │ │                * gdk_monitor_get_scale_factor()).
  9168 │ │                *
  9169 │ │                * The work area should be considered when positioning menus and
  9170 │ │                * similar popups, to avoid placing them below panels, docks or other
  9171 │ │                * desktop components.
  9172 │ │                *
  9173 │ │                * Note that not all backends may have a concept of workarea. This
  9174 │ │                * function will return the monitor geometry if a workarea is not
  9175 │ │                * available, or does not apply.
  9176 │ │                */
  9177 │ │               get_workarea(): Rectangle;
  9178 │ │               /**
  9179 │ │                * Gets whether this monitor should be considered primary
  9180 │ │                * (see gdk_display_get_primary_monitor()).
  9181 │ │                * @returns %TRUE if @monitor is primary
  9182 │ │                */
  9183 │ │               is_primary(): boolean;
  9184 │ │           }
  9185 │ │   
  9186 │ │           namespace Screen {
  9187 │ │               // Signal signatures
  9188 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  9189 │ │                   'composited-changed': () => void;
  9190 │ │                   'monitors-changed': () => void;
  9191 │ │                   'size-changed': () => void;
  9192 │ │                   'notify::font-options': (pspec: GObject.ParamSpec) => void;
  9193 │ │                   'notify::resolution': (pspec: GObject.ParamSpec) => void;
  9194 │ │               }
  9195 │ │   
  9196 │ │               // Constructor properties interface
  9197 │ │   
  9198 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  9199 │ │                   font_options: any;
  9200 │ │                   fontOptions: any;
  9201 │ │                   resolution: number;
  9202 │ │               }
  9203 │ │           }
  9204 │ │   
  9205 │ │           /**
  9206 │ │            * #GdkScreen objects are the GDK representation of the screen on
  9207 │ │            * which windows can be displayed and on which the pointer moves.
  9208 │ │            * X originally identified screens with physical screens, but
  9209 │ │            * nowadays it is more common to have a single #GdkScreen which
  9210 │ │            * combines several physical monitors (see gdk_screen_get_n_monitors()).
  9211 │ │            *
  9212 │ │            * GdkScreen is used throughout GDK and GTK+ to specify which screen
  9213 │ │            * the top level windows are to be displayed on. it is also used to
  9214 │ │            * query the screen specification and default settings such as
  9215 │ │            * the default visual (gdk_screen_get_system_visual()), the dimensions
  9216 │ │            * of the physical monitors (gdk_screen_get_monitor_geometry()), etc.
  9217 │ │            */
  9218 │ │           class Screen extends GObject.Object {
  9219 │ │               static $gtype: GObject.GType<Screen>;
  9220 │ │   
  9221 │ │               // Properties
  9222 │ │   
  9223 │ │               get font_options(): any;
  9224 │ │               set font_options(val: any);
  9225 │ │               get fontOptions(): any;
  9226 │ │               set fontOptions(val: any);
  9227 │ │               get resolution(): number;
  9228 │ │               set resolution(val: number);
  9229 │ │   
  9230 │ │               /**
  9231 │ │                * Compile-time signal type information.
  9232 │ │                *
  9233 │ │                * This instance property is generated only for TypeScript type checking.
  9234 │ │                * It is not defined at runtime and should not be accessed in JS code.
  9235 │ │                * @internal
  9236 │ │                */
  9237 │ │               $signals: Screen.SignalSignatures;
  9238 │ │   
  9239 │ │               // Constructors
  9240 │ │   
  9241 │ │               constructor(properties?: Partial<Screen.ConstructorProps>, ...args: any[]);
  9242 │ │   
  9243 │ │               _init(...args: any[]): void;
  9244 │ │   
  9245 │ │               // Signals
  9246 │ │   
  9247 │ │               connect<K extends keyof Screen.SignalSignatures>(
  9248 │ │                   signal: K,
  9249 │ │                   callback: GObject.SignalCallback<this, Screen.SignalSignatures[K]>,
  9250 │ │               ): number;
  9251 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  9252 │ │               connect_after<K extends keyof Screen.SignalSignatures>(
  9253 │ │                   signal: K,
  9254 │ │                   callback: GObject.SignalCallback<this, Screen.SignalSignatures[K]>,
  9255 │ │               ): number;
  9256 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  9257 │ │               emit<K extends keyof Screen.SignalSignatures>(
  9258 │ │                   signal: K,
  9259 │ │                   ...args: GObject.GjsParameters<Screen.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  9260 │ │               ): void;
  9261 │ │               emit(signal: string, ...args: any[]): void;
  9262 │ │   
  9263 │ │               // Static methods
  9264 │ │   
  9265 │ │               /**
  9266 │ │                * Gets the default screen for the default display. (See
  9267 │ │                * gdk_display_get_default ()).
  9268 │ │                */
  9269 │ │               static get_default(): Screen | null;
  9270 │ │               /**
  9271 │ │                * Gets the height of the default screen in pixels. The returned
  9272 │ │                * size is in ”application pixels”, not in ”device pixels” (see
  9273 │ │                * gdk_screen_get_monitor_scale_factor()).
  9274 │ │                */
  9275 │ │               static height(): number;
  9276 │ │               /**
  9277 │ │                * Returns the height of the default screen in millimeters.
  9278 │ │                * Note that on many X servers this value will not be correct.
  9279 │ │                */
  9280 │ │               static height_mm(): number;
  9281 │ │               /**
  9282 │ │                * Gets the width of the default screen in pixels. The returned
  9283 │ │                * size is in ”application pixels”, not in ”device pixels” (see
  9284 │ │                * gdk_screen_get_monitor_scale_factor()).
  9285 │ │                */
  9286 │ │               static width(): number;
  9287 │ │               /**
  9288 │ │                * Returns the width of the default screen in millimeters.
  9289 │ │                * Note that on many X servers this value will not be correct.
  9290 │ │                */
  9291 │ │               static width_mm(): number;
  9292 │ │   
  9293 │ │               // Methods
  9294 │ │   
  9295 │ │               /**
  9296 │ │                * Returns the screen’s currently active window.
  9297 │ │                *
  9298 │ │                * On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
  9299 │ │                * on the root window, as described in the
  9300 │ │                * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
  9301 │ │                * If there is no currently currently active
  9302 │ │                * window, or the window manager does not support the
  9303 │ │                * _NET_ACTIVE_WINDOW hint, this function returns %NULL.
  9304 │ │                *
  9305 │ │                * On other platforms, this function may return %NULL, depending on whether
  9306 │ │                * it is implementable on that platform.
  9307 │ │                *
  9308 │ │                * The returned window should be unrefed using g_object_unref() when
  9309 │ │                * no longer needed.
  9310 │ │                * @returns the currently active window,   or %NULL.
  9311 │ │                */
  9312 │ │               get_active_window(): Window | null;
  9313 │ │               /**
  9314 │ │                * Gets the display to which the `screen` belongs.
  9315 │ │                * @returns the display to which @screen belongs
  9316 │ │                */
  9317 │ │               get_display(): Display;
  9318 │ │               /**
  9319 │ │                * Gets any options previously set with gdk_screen_set_font_options().
  9320 │ │                * @returns the current font options, or %NULL if no  default font options have been set.
  9321 │ │                */
  9322 │ │               get_font_options(): cairo.FontOptions | null;
  9323 │ │               /**
  9324 │ │                * Gets the height of `screen` in pixels. The returned size is in
  9325 │ │                * ”application pixels”, not in ”device pixels” (see
  9326 │ │                * gdk_screen_get_monitor_scale_factor()).
  9327 │ │                * @returns the height of @screen in pixels.
  9328 │ │                */
  9329 │ │               get_height(): number;
  9330 │ │               /**
  9331 │ │                * Returns the height of `screen` in millimeters.
  9332 │ │                *
  9333 │ │                * Note that this value is somewhat ill-defined when the screen
  9334 │ │                * has multiple monitors of different resolution. It is recommended
  9335 │ │                * to use the monitor dimensions instead.
  9336 │ │                * @returns the heigth of @screen in millimeters.
  9337 │ │                */
  9338 │ │               get_height_mm(): number;
  9339 │ │               /**
  9340 │ │                * Returns the monitor number in which the point (`x,``y)` is located.
  9341 │ │                * @param x the x coordinate in the virtual screen.
  9342 │ │                * @param y the y coordinate in the virtual screen.
  9343 │ │                * @returns the monitor number in which the point (@x,@y) lies, or   a monitor close to (@x,@y) if the point is not in any monitor.
  9344 │ │                */
  9345 │ │               get_monitor_at_point(x: number, y: number): number;
  9346 │ │               /**
  9347 │ │                * Returns the number of the monitor in which the largest area of the
  9348 │ │                * bounding rectangle of `window` resides.
  9349 │ │                * @param window a #GdkWindow
  9350 │ │                * @returns the monitor number in which most of @window is located,     or if @window does not intersect any monitors, a monitor,     close to @window.
  9351 │ │                */
  9352 │ │               get_monitor_at_window(window: Window): number;
  9353 │ │               /**
  9354 │ │                * Retrieves the #GdkRectangle representing the size and position of
  9355 │ │                * the individual monitor within the entire screen area. The returned
  9356 │ │                * geometry is in ”application pixels”, not in ”device pixels” (see
  9357 │ │                * gdk_screen_get_monitor_scale_factor()).
  9358 │ │                *
  9359 │ │                * Monitor numbers start at 0. To obtain the number of monitors of
  9360 │ │                * `screen,` use gdk_screen_get_n_monitors().
  9361 │ │                *
  9362 │ │                * Note that the size of the entire screen area can be retrieved via
  9363 │ │                * gdk_screen_get_width() and gdk_screen_get_height().
  9364 │ │                * @param monitor_num the monitor number
  9365 │ │                */
  9366 │ │               get_monitor_geometry(monitor_num: number): Rectangle | null;
  9367 │ │               /**
  9368 │ │                * Gets the height in millimeters of the specified monitor.
  9369 │ │                * @param monitor_num number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
  9370 │ │                * @returns the height of the monitor, or -1 if not available
  9371 │ │                */
  9372 │ │               get_monitor_height_mm(monitor_num: number): number;
  9373 │ │               /**
  9374 │ │                * Returns the output name of the specified monitor.
  9375 │ │                * Usually something like VGA, DVI, or TV, not the actual
  9376 │ │                * product name of the display device.
  9377 │ │                * @param monitor_num number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
  9378 │ │                * @returns a newly-allocated string containing the name   of the monitor, or %NULL if the name cannot be determined
  9379 │ │                */
  9380 │ │               get_monitor_plug_name(monitor_num: number): string | null;
  9381 │ │               /**
  9382 │ │                * Returns the internal scale factor that maps from monitor coordinates
  9383 │ │                * to the actual device pixels. On traditional systems this is 1, but
  9384 │ │                * on very high density outputs this can be a higher value (often 2).
  9385 │ │                *
  9386 │ │                * This can be used if you want to create pixel based data for a
  9387 │ │                * particular monitor, but most of the time you’re drawing to a window
  9388 │ │                * where it is better to use gdk_window_get_scale_factor() instead.
  9389 │ │                * @param monitor_num number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
  9390 │ │                * @returns the scale factor
  9391 │ │                */
  9392 │ │               get_monitor_scale_factor(monitor_num: number): number;
  9393 │ │               /**
  9394 │ │                * Gets the width in millimeters of the specified monitor, if available.
  9395 │ │                * @param monitor_num number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
  9396 │ │                * @returns the width of the monitor, or -1 if not available
  9397 │ │                */
  9398 │ │               get_monitor_width_mm(monitor_num: number): number;
  9399 │ │               /**
  9400 │ │                * Retrieves the #GdkRectangle representing the size and position of
  9401 │ │                * the “work area” on a monitor within the entire screen area. The returned
  9402 │ │                * geometry is in ”application pixels”, not in ”device pixels” (see
  9403 │ │                * gdk_screen_get_monitor_scale_factor()).
  9404 │ │                *
  9405 │ │                * The work area should be considered when positioning menus and
  9406 │ │                * similar popups, to avoid placing them below panels, docks or other
  9407 │ │                * desktop components.
  9408 │ │                *
  9409 │ │                * Note that not all backends may have a concept of workarea. This
  9410 │ │                * function will return the monitor geometry if a workarea is not
  9411 │ │                * available, or does not apply.
  9412 │ │                *
  9413 │ │                * Monitor numbers start at 0. To obtain the number of monitors of
  9414 │ │                * `screen,` use gdk_screen_get_n_monitors().
  9415 │ │                * @param monitor_num the monitor number
  9416 │ │                */
  9417 │ │               get_monitor_workarea(monitor_num: number): Rectangle | null;
  9418 │ │               /**
  9419 │ │                * Returns the number of monitors which `screen` consists of.
  9420 │ │                * @returns number of monitors which @screen consists of
  9421 │ │                */
  9422 │ │               get_n_monitors(): number;
  9423 │ │               /**
  9424 │ │                * Gets the index of `screen` among the screens in the display
  9425 │ │                * to which it belongs. (See gdk_screen_get_display())
  9426 │ │                * @returns the index
  9427 │ │                */
  9428 │ │               get_number(): number;
  9429 │ │               /**
  9430 │ │                * Gets the primary monitor for `screen`.  The primary monitor
  9431 │ │                * is considered the monitor where the “main desktop” lives.
  9432 │ │                * While normal application windows typically allow the window
  9433 │ │                * manager to place the windows, specialized desktop applications
  9434 │ │                * such as panels should place themselves on the primary monitor.
  9435 │ │                *
  9436 │ │                * If no primary monitor is configured by the user, the return value
  9437 │ │                * will be 0, defaulting to the first monitor.
  9438 │ │                * @returns An integer index for the primary monitor, or 0 if none is configured.
  9439 │ │                */
  9440 │ │               get_primary_monitor(): number;
  9441 │ │               /**
  9442 │ │                * Gets the resolution for font handling on the screen; see
  9443 │ │                * gdk_screen_set_resolution() for full details.
  9444 │ │                * @returns the current resolution, or -1 if no resolution has been set.
  9445 │ │                */
  9446 │ │               get_resolution(): number;
  9447 │ │               /**
  9448 │ │                * Gets a visual to use for creating windows with an alpha channel.
  9449 │ │                * The windowing system on which GTK+ is running
  9450 │ │                * may not support this capability, in which case %NULL will
  9451 │ │                * be returned. Even if a non-%NULL value is returned, its
  9452 │ │                * possible that the window’s alpha channel won’t be honored
  9453 │ │                * when displaying the window on the screen: in particular, for
  9454 │ │                * X an appropriate windowing manager and compositing manager
  9455 │ │                * must be running to provide appropriate display.
  9456 │ │                *
  9457 │ │                * This functionality is not implemented in the Windows backend.
  9458 │ │                *
  9459 │ │                * For setting an overall opacity for a top-level window, see
  9460 │ │                * gdk_window_set_opacity().
  9461 │ │                * @returns a visual to use for windows     with an alpha channel or %NULL if the capability is not     available.
  9462 │ │                */
  9463 │ │               get_rgba_visual(): Visual | null;
  9464 │ │               /**
  9465 │ │                * Gets the root window of `screen`.
  9466 │ │                * @returns the root window
  9467 │ │                */
  9468 │ │               get_root_window(): Window;
  9469 │ │               /**
  9470 │ │                * Retrieves a desktop-wide setting such as double-click time
  9471 │ │                * for the #GdkScreen `screen`.
  9472 │ │                *
  9473 │ │                * FIXME needs a list of valid settings here, or a link to
  9474 │ │                * more information.
  9475 │ │                * @param name the name of the setting
  9476 │ │                * @param value location to store the value of the setting
  9477 │ │                * @returns %TRUE if the setting existed and a value was stored   in @value, %FALSE otherwise.
  9478 │ │                */
  9479 │ │               get_setting(name: string, value: GObject.Value | any): boolean;
  9480 │ │               /**
  9481 │ │                * Get the system’s default visual for `screen`.
  9482 │ │                * This is the visual for the root window of the display.
  9483 │ │                * The return value should not be freed.
  9484 │ │                * @returns the system visual
  9485 │ │                */
  9486 │ │               get_system_visual(): Visual;
  9487 │ │               /**
  9488 │ │                * Obtains a list of all toplevel windows known to GDK on the screen `screen`.
  9489 │ │                * A toplevel window is a child of the root window (see
  9490 │ │                * gdk_get_default_root_window()).
  9491 │ │                *
  9492 │ │                * The returned list should be freed with g_list_free(), but
  9493 │ │                * its elements need not be freed.
  9494 │ │                * @returns list of toplevel windows, free with g_list_free()
  9495 │ │                */
  9496 │ │               get_toplevel_windows(): Window[];
  9497 │ │               /**
  9498 │ │                * Gets the width of `screen` in pixels. The returned size is in
  9499 │ │                * ”application pixels”, not in ”device pixels” (see
  9500 │ │                * gdk_screen_get_monitor_scale_factor()).
  9501 │ │                * @returns the width of @screen in pixels.
  9502 │ │                */
  9503 │ │               get_width(): number;
  9504 │ │               /**
  9505 │ │                * Gets the width of `screen` in millimeters.
  9506 │ │                *
  9507 │ │                * Note that this value is somewhat ill-defined when the screen
  9508 │ │                * has multiple monitors of different resolution. It is recommended
  9509 │ │                * to use the monitor dimensions instead.
  9510 │ │                * @returns the width of @screen in millimeters.
  9511 │ │                */
  9512 │ │               get_width_mm(): number;
  9513 │ │               /**
  9514 │ │                * Returns a #GList of #GdkWindows representing the current
  9515 │ │                * window stack.
  9516 │ │                *
  9517 │ │                * On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
  9518 │ │                * property on the root window, as described in the
  9519 │ │                * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
  9520 │ │                * If the window manager does not support the
  9521 │ │                * _NET_CLIENT_LIST_STACKING hint, this function returns %NULL.
  9522 │ │                *
  9523 │ │                * On other platforms, this function may return %NULL, depending on whether
  9524 │ │                * it is implementable on that platform.
  9525 │ │                *
  9526 │ │                * The returned list is newly allocated and owns references to the
  9527 │ │                * windows it contains, so it should be freed using g_list_free() and
  9528 │ │                * its windows unrefed using g_object_unref() when no longer needed.
  9529 │ │                * @returns a     list of #GdkWindows for the current window stack, or %NULL.
  9530 │ │                */
  9531 │ │               get_window_stack(): Window[] | null;
  9532 │ │               /**
  9533 │ │                * Returns whether windows with an RGBA visual can reasonably
  9534 │ │                * be expected to have their alpha channel drawn correctly on
  9535 │ │                * the screen.
  9536 │ │                *
  9537 │ │                * On X11 this function returns whether a compositing manager is
  9538 │ │                * compositing `screen`.
  9539 │ │                * @returns Whether windows with RGBA visuals can reasonably be expected to have their alpha channels drawn correctly on the screen.
  9540 │ │                */
  9541 │ │               is_composited(): boolean;
  9542 │ │               /**
  9543 │ │                * Lists the available visuals for the specified `screen`.
  9544 │ │                * A visual describes a hardware image data format.
  9545 │ │                * For example, a visual might support 24-bit color, or 8-bit color,
  9546 │ │                * and might expect pixels to be in a certain format.
  9547 │ │                *
  9548 │ │                * Call g_list_free() on the return value when you’re finished with it.
  9549 │ │                * @returns a list of visuals; the list must be freed, but not its contents
  9550 │ │                */
  9551 │ │               list_visuals(): Visual[];
  9552 │ │               /**
  9553 │ │                * Determines the name to pass to gdk_display_open() to get
  9554 │ │                * a #GdkDisplay with this screen as the default screen.
  9555 │ │                * @returns a newly allocated string, free with g_free()
  9556 │ │                */
  9557 │ │               make_display_name(): string;
  9558 │ │               /**
  9559 │ │                * Sets the default font options for the screen. These
  9560 │ │                * options will be set on any #PangoContext’s newly created
  9561 │ │                * with gdk_pango_context_get_for_screen(). Changing the
  9562 │ │                * default set of font options does not affect contexts that
  9563 │ │                * have already been created.
  9564 │ │                * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
  9565 │ │                */
  9566 │ │               set_font_options(options?: cairo.FontOptions | null): void;
  9567 │ │               /**
  9568 │ │                * Sets the resolution for font handling on the screen. This is a
  9569 │ │                * scale factor between points specified in a #PangoFontDescription
  9570 │ │                * and cairo units. The default value is 96, meaning that a 10 point
  9571 │ │                * font will be 13 units high. (10 * 96. / 72. = 13.3).
  9572 │ │                * @param dpi the resolution in “dots per inch”. (Physical inches aren’t actually   involved; the terminology is conventional.)
  9573 │ │                */
  9574 │ │               set_resolution(dpi: number): void;
  9575 │ │           }
  9576 │ │   
  9577 │ │           namespace Seat {
  9578 │ │               // Signal signatures
  9579 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  9580 │ │                   'device-added': (arg0: Device) => void;
  9581 │ │                   'device-removed': (arg0: Device) => void;
  9582 │ │                   'tool-added': (arg0: DeviceTool) => void;
  9583 │ │                   'tool-removed': (arg0: DeviceTool) => void;
  9584 │ │                   'notify::display': (pspec: GObject.ParamSpec) => void;
  9585 │ │               }
  9586 │ │   
  9587 │ │               // Constructor properties interface
  9588 │ │   
  9589 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  9590 │ │                   display: Display;
  9591 │ │               }
  9592 │ │           }
  9593 │ │   
  9594 │ │           /**
  9595 │ │            * The #GdkSeat object represents a collection of input devices
  9596 │ │            * that belong to a user.
  9597 │ │            */
  9598 │ │           abstract class Seat extends GObject.Object {
  9599 │ │               static $gtype: GObject.GType<Seat>;
  9600 │ │   
  9601 │ │               // Properties
  9602 │ │   
  9603 │ │               /**
  9604 │ │                * #GdkDisplay of this seat.
  9605 │ │                */
  9606 │ │               get display(): Display;
  9607 │ │   
  9608 │ │               /**
  9609 │ │                * Compile-time signal type information.
  9610 │ │                *
  9611 │ │                * This instance property is generated only for TypeScript type checking.
  9612 │ │                * It is not defined at runtime and should not be accessed in JS code.
  9613 │ │                * @internal
  9614 │ │                */
  9615 │ │               $signals: Seat.SignalSignatures;
  9616 │ │   
  9617 │ │               // Constructors
  9618 │ │   
  9619 │ │               constructor(properties?: Partial<Seat.ConstructorProps>, ...args: any[]);
  9620 │ │   
  9621 │ │               _init(...args: any[]): void;
  9622 │ │   
  9623 │ │               // Signals
  9624 │ │   
  9625 │ │               connect<K extends keyof Seat.SignalSignatures>(
  9626 │ │                   signal: K,
  9627 │ │                   callback: GObject.SignalCallback<this, Seat.SignalSignatures[K]>,
  9628 │ │               ): number;
  9629 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  9630 │ │               connect_after<K extends keyof Seat.SignalSignatures>(
  9631 │ │                   signal: K,
  9632 │ │                   callback: GObject.SignalCallback<this, Seat.SignalSignatures[K]>,
  9633 │ │               ): number;
  9634 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  9635 │ │               emit<K extends keyof Seat.SignalSignatures>(
  9636 │ │                   signal: K,
  9637 │ │                   ...args: GObject.GjsParameters<Seat.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  9638 │ │               ): void;
  9639 │ │               emit(signal: string, ...args: any[]): void;
  9640 │ │   
  9641 │ │               // Methods
  9642 │ │   
  9643 │ │               /**
  9644 │ │                * Returns the capabilities this #GdkSeat currently has.
  9645 │ │                * @returns the seat capabilities
  9646 │ │                */
  9647 │ │               get_capabilities(): SeatCapabilities;
  9648 │ │               /**
  9649 │ │                * Returns the #GdkDisplay this seat belongs to.
  9650 │ │                * @returns a #GdkDisplay. This object is owned by GTK+          and must not be freed.
  9651 │ │                */
  9652 │ │               get_display(): Display;
  9653 │ │               /**
  9654 │ │                * Returns the master device that routes keyboard events.
  9655 │ │                * @returns a master #GdkDevice with keyboard          capabilities. This object is owned by GTK+ and must not be freed.
  9656 │ │                */
  9657 │ │               get_keyboard(): Device | null;
  9658 │ │               /**
  9659 │ │                * Returns the master device that routes pointer events.
  9660 │ │                * @returns a master #GdkDevice with pointer          capabilities. This object is owned by GTK+ and must not be freed.
  9661 │ │                */
  9662 │ │               get_pointer(): Device | null;
  9663 │ │               /**
  9664 │ │                * Returns the slave devices that match the given capabilities.
  9665 │ │                * @param capabilities capabilities to get devices for
  9666 │ │                * @returns A list of #GdkDevices.          The list must be freed with g_list_free(), the elements are owned          by GDK and must not be freed.
  9667 │ │                */
  9668 │ │               get_slaves(capabilities: SeatCapabilities | null): Device[];
  9669 │ │               /**
  9670 │ │                * Grabs the seat so that all events corresponding to the given `capabilities`
  9671 │ │                * are passed to this application until the seat is ungrabbed with gdk_seat_ungrab(),
  9672 │ │                * or the window becomes hidden. This overrides any previous grab on the
  9673 │ │                * seat by this client.
  9674 │ │                *
  9675 │ │                * As a rule of thumb, if a grab is desired over %GDK_SEAT_CAPABILITY_POINTER,
  9676 │ │                * all other "pointing" capabilities (eg. %GDK_SEAT_CAPABILITY_TOUCH) should
  9677 │ │                * be grabbed too, so the user is able to interact with all of those while
  9678 │ │                * the grab holds, you should thus use %GDK_SEAT_CAPABILITY_ALL_POINTING most
  9679 │ │                * commonly.
  9680 │ │                *
  9681 │ │                * Grabs are used for operations which need complete control over the
  9682 │ │                * events corresponding to the given capabilities. For example in GTK+ this
  9683 │ │                * is used for Drag and Drop operations, popup menus and such.
  9684 │ │                *
  9685 │ │                * Note that if the event mask of a #GdkWindow has selected both button press
  9686 │ │                * and button release events, or touch begin and touch end, then a press event
  9687 │ │                * will cause an automatic grab until the button is released, equivalent to a
  9688 │ │                * grab on the window with `owner_events` set to %TRUE. This is done because most
  9689 │ │                * applications expect to receive paired press and release events.
  9690 │ │                *
  9691 │ │                * If you set up anything at the time you take the grab that needs to be
  9692 │ │                * cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
  9693 │ │                * events that are emitted when the grab ends unvoluntarily.
  9694 │ │                * @param window the #GdkWindow which will own the grab
  9695 │ │                * @param capabilities capabilities that will be grabbed
  9696 │ │                * @param owner_events if %FALSE then all device events are reported with respect to                @window and are only reported if selected by @event_mask. If                %TRUE then pointer events for this application are reported                as normal, but pointer events outside this application are                reported with respect to @window and only if selected by                @event_mask. In either mode, unreported events are discarded.
  9697 │ │                * @param cursor the cursor to display while the grab is active. If          this is %NULL then the normal cursors are used for          @window and its descendants, and the cursor for @window is used          elsewhere.
  9698 │ │                * @param event the event that is triggering the grab, or %NULL if none         is available.
  9699 │ │                * @param prepare_func function to                prepare the window to be grabbed, it can be %NULL if @window is                visible before this call.
  9700 │ │                * @returns %GDK_GRAB_SUCCESS if the grab was successful.
  9701 │ │                */
  9702 │ │               grab(
  9703 │ │                   window: Window,
  9704 │ │                   capabilities: SeatCapabilities | null,
  9705 │ │                   owner_events: boolean,
  9706 │ │                   cursor?: Cursor | null,
  9707 │ │                   event?: Event | null,
  9708 │ │                   prepare_func?: SeatGrabPrepareFunc | null,
  9709 │ │               ): GrabStatus;
  9710 │ │               /**
  9711 │ │                * Releases a grab added through gdk_seat_grab().
  9712 │ │                */
  9713 │ │               ungrab(): void;
  9714 │ │           }
  9715 │ │   
  9716 │ │           namespace Visual {
  9717 │ │               // Signal signatures
  9718 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {}
  9719 │ │   
  9720 │ │               // Constructor properties interface
  9721 │ │   
  9722 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {}
  9723 │ │           }
  9724 │ │   
  9725 │ │           /**
  9726 │ │            * A #GdkVisual contains information about
  9727 │ │            * a particular visual.
  9728 │ │            */
  9729 │ │           class Visual extends GObject.Object {
  9730 │ │               static $gtype: GObject.GType<Visual>;
  9731 │ │   
  9732 │ │               /**
  9733 │ │                * Compile-time signal type information.
  9734 │ │                *
  9735 │ │                * This instance property is generated only for TypeScript type checking.
  9736 │ │                * It is not defined at runtime and should not be accessed in JS code.
  9737 │ │                * @internal
  9738 │ │                */
  9739 │ │               $signals: Visual.SignalSignatures;
  9740 │ │   
  9741 │ │               // Constructors
  9742 │ │   
  9743 │ │               constructor(properties?: Partial<Visual.ConstructorProps>, ...args: any[]);
  9744 │ │   
  9745 │ │               _init(...args: any[]): void;
  9746 │ │   
  9747 │ │               // Signals
  9748 │ │   
  9749 │ │               connect<K extends keyof Visual.SignalSignatures>(
  9750 │ │                   signal: K,
  9751 │ │                   callback: GObject.SignalCallback<this, Visual.SignalSignatures[K]>,
  9752 │ │               ): number;
  9753 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  9754 │ │               connect_after<K extends keyof Visual.SignalSignatures>(
  9755 │ │                   signal: K,
  9756 │ │                   callback: GObject.SignalCallback<this, Visual.SignalSignatures[K]>,
  9757 │ │               ): number;
  9758 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  9759 │ │               emit<K extends keyof Visual.SignalSignatures>(
  9760 │ │                   signal: K,
  9761 │ │                   ...args: GObject.GjsParameters<Visual.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  9762 │ │               ): void;
  9763 │ │               emit(signal: string, ...args: any[]): void;
  9764 │ │   
  9765 │ │               // Static methods
  9766 │ │   
  9767 │ │               /**
  9768 │ │                * Get the visual with the most available colors for the default
  9769 │ │                * GDK screen. The return value should not be freed.
  9770 │ │                */
  9771 │ │               static get_best(): Visual;
  9772 │ │               /**
  9773 │ │                * Get the best available depth for the default GDK screen.  “Best”
  9774 │ │                * means “largest,” i.e. 32 preferred over 24 preferred over 8 bits
  9775 │ │                * per pixel.
  9776 │ │                */
  9777 │ │               static get_best_depth(): number;
  9778 │ │               /**
  9779 │ │                * Return the best available visual type for the default GDK screen.
  9780 │ │                */
  9781 │ │               static get_best_type(): VisualType;
  9782 │ │               /**
  9783 │ │                * Combines gdk_visual_get_best_with_depth() and
  9784 │ │                * gdk_visual_get_best_with_type().
  9785 │ │                * @param depth a bit depth
  9786 │ │                * @param visual_type a visual type
  9787 │ │                */
  9788 │ │               static get_best_with_both(depth: number, visual_type: VisualType): Visual | null;
  9789 │ │               /**
  9790 │ │                * Get the best visual with depth `depth` for the default GDK screen.
  9791 │ │                * Color visuals and visuals with mutable colormaps are preferred
  9792 │ │                * over grayscale or fixed-colormap visuals. The return value should
  9793 │ │                * not be freed. %NULL may be returned if no visual supports `depth`.
  9794 │ │                * @param depth a bit depth
  9795 │ │                */
  9796 │ │               static get_best_with_depth(depth: number): Visual;
  9797 │ │               /**
  9798 │ │                * Get the best visual of the given `visual_type` for the default GDK screen.
  9799 │ │                * Visuals with higher color depths are considered better. The return value
  9800 │ │                * should not be freed. %NULL may be returned if no visual has type
  9801 │ │                * `visual_type`.
  9802 │ │                * @param visual_type a visual type
  9803 │ │                */
  9804 │ │               static get_best_with_type(visual_type: VisualType): Visual;
  9805 │ │               /**
  9806 │ │                * Get the system’s default visual for the default GDK screen.
  9807 │ │                * This is the visual for the root window of the display.
  9808 │ │                * The return value should not be freed.
  9809 │ │                */
  9810 │ │               static get_system(): Visual;
  9811 │ │   
  9812 │ │               // Methods
  9813 │ │   
  9814 │ │               /**
  9815 │ │                * Returns the number of significant bits per red, green and blue value.
  9816 │ │                *
  9817 │ │                * Not all GDK backend provide a meaningful value for this function.
  9818 │ │                * @returns The number of significant bits per color value for @visual.
  9819 │ │                */
  9820 │ │               get_bits_per_rgb(): number;
  9821 │ │               /**
  9822 │ │                * Obtains values that are needed to calculate blue pixel values in TrueColor
  9823 │ │                * and DirectColor. The “mask” is the significant bits within the pixel.
  9824 │ │                * The “shift” is the number of bits left we must shift a primary for it
  9825 │ │                * to be in position (according to the "mask"). Finally, "precision" refers
  9826 │ │                * to how much precision the pixel value contains for a particular primary.
  9827 │ │                */
  9828 │ │               get_blue_pixel_details(): [number, number, number];
  9829 │ │               /**
  9830 │ │                * Returns the byte order of this visual.
  9831 │ │                *
  9832 │ │                * The information returned by this function is only relevant
  9833 │ │                * when working with XImages, and not all backends return
  9834 │ │                * meaningful information for this.
  9835 │ │                * @returns A #GdkByteOrder stating the byte order of @visual.
  9836 │ │                */
  9837 │ │               get_byte_order(): ByteOrder;
  9838 │ │               /**
  9839 │ │                * Returns the size of a colormap for this visual.
  9840 │ │                *
  9841 │ │                * You have to use platform-specific APIs to manipulate colormaps.
  9842 │ │                * @returns The size of a colormap that is suitable for @visual.
  9843 │ │                */
  9844 │ │               get_colormap_size(): number;
  9845 │ │               /**
  9846 │ │                * Returns the bit depth of this visual.
  9847 │ │                * @returns The bit depth of this visual.
  9848 │ │                */
  9849 │ │               get_depth(): number;
  9850 │ │               /**
  9851 │ │                * Obtains values that are needed to calculate green pixel values in TrueColor
  9852 │ │                * and DirectColor. The “mask” is the significant bits within the pixel.
  9853 │ │                * The “shift” is the number of bits left we must shift a primary for it
  9854 │ │                * to be in position (according to the "mask"). Finally, "precision" refers
  9855 │ │                * to how much precision the pixel value contains for a particular primary.
  9856 │ │                */
  9857 │ │               get_green_pixel_details(): [number, number, number];
  9858 │ │               /**
  9859 │ │                * Obtains values that are needed to calculate red pixel values in TrueColor
  9860 │ │                * and DirectColor. The “mask” is the significant bits within the pixel.
  9861 │ │                * The “shift” is the number of bits left we must shift a primary for it
  9862 │ │                * to be in position (according to the "mask"). Finally, "precision" refers
  9863 │ │                * to how much precision the pixel value contains for a particular primary.
  9864 │ │                */
  9865 │ │               get_red_pixel_details(): [number, number, number];
  9866 │ │               /**
  9867 │ │                * Gets the screen to which this visual belongs
  9868 │ │                * @returns the screen to which this visual belongs.
  9869 │ │                */
  9870 │ │               get_screen(): Screen;
  9871 │ │               /**
  9872 │ │                * Returns the type of visual this is (PseudoColor, TrueColor, etc).
  9873 │ │                * @returns A #GdkVisualType stating the type of @visual.
  9874 │ │                */
  9875 │ │               get_visual_type(): VisualType;
  9876 │ │           }
  9877 │ │   
  9878 │ │           namespace Window {
  9879 │ │               // Signal signatures
  9880 │ │               interface SignalSignatures extends GObject.Object.SignalSignatures {
  9881 │ │                   'create-surface': (arg0: number, arg1: number) => cairo.Surface;
  9882 │ │                   'from-embedder': (arg0: number, arg1: number, arg2: number, arg3: number) => void;
  9883 │ │                   'moved-to-rect': (arg0: any | null, arg1: any | null, arg2: boolean, arg3: boolean) => void;
  9884 │ │                   'pick-embedded-child': (arg0: number, arg1: number) => Window | null;
  9885 │ │                   'to-embedder': (arg0: number, arg1: number, arg2: number, arg3: number) => void;
  9886 │ │                   'notify::cursor': (pspec: GObject.ParamSpec) => void;
  9887 │ │               }
  9888 │ │   
  9889 │ │               // Constructor properties interface
  9890 │ │   
  9891 │ │               interface ConstructorProps extends GObject.Object.ConstructorProps {
  9892 │ │                   cursor: Cursor;
  9893 │ │               }
  9894 │ │           }
  9895 │ │   
  9896 │ │           abstract class Window extends GObject.Object {
  9897 │ │               static $gtype: GObject.GType<Window>;
  9898 │ │   
  9899 │ │               // Properties
  9900 │ │   
  9901 │ │               /**
  9902 │ │                * The mouse pointer for a #GdkWindow. See gdk_window_set_cursor() and
  9903 │ │                * gdk_window_get_cursor() for details.
  9904 │ │                */
  9905 │ │               get cursor(): Cursor;
  9906 │ │               set cursor(val: Cursor);
  9907 │ │   
  9908 │ │               /**
  9909 │ │                * Compile-time signal type information.
  9910 │ │                *
  9911 │ │                * This instance property is generated only for TypeScript type checking.
  9912 │ │                * It is not defined at runtime and should not be accessed in JS code.
  9913 │ │                * @internal
  9914 │ │                */
  9915 │ │               $signals: Window.SignalSignatures;
  9916 │ │   
  9917 │ │               // Constructors
  9918 │ │   
  9919 │ │               constructor(properties?: Partial<Window.ConstructorProps>, ...args: any[]);
  9920 │ │   
  9921 │ │               _init(...args: any[]): void;
  9922 │ │   
  9923 │ │               static ['new'](
  9924 │ │                   parent: Window | null,
  9925 │ │                   attributes: WindowAttr,
  9926 │ │                   attributes_mask: WindowAttributesType,
  9927 │ │               ): Window;
  9928 │ │   
  9929 │ │               // Signals
  9930 │ │   
  9931 │ │               connect<K extends keyof Window.SignalSignatures>(
  9932 │ │                   signal: K,
  9933 │ │                   callback: GObject.SignalCallback<this, Window.SignalSignatures[K]>,
  9934 │ │               ): number;
  9935 │ │               connect(signal: string, callback: (...args: any[]) => any): number;
  9936 │ │               connect_after<K extends keyof Window.SignalSignatures>(
  9937 │ │                   signal: K,
  9938 │ │                   callback: GObject.SignalCallback<this, Window.SignalSignatures[K]>,
  9939 │ │               ): number;
  9940 │ │               connect_after(signal: string, callback: (...args: any[]) => any): number;
  9941 │ │               emit<K extends keyof Window.SignalSignatures>(
  9942 │ │                   signal: K,
  9943 │ │                   ...args: GObject.GjsParameters<Window.SignalSignatures[K]> extends [any, ...infer Q] ? Q : never
  9944 │ │               ): void;
  9945 │ │               emit(signal: string, ...args: any[]): void;
  9946 │ │   
  9947 │ │               // Static methods
  9948 │ │   
  9949 │ │               /**
  9950 │ │                * Obtains the window underneath the mouse pointer, returning the
  9951 │ │                * location of that window in `win_x,` `win_y`. Returns %NULL if the
  9952 │ │                * window under the mouse pointer is not known to GDK (if the window
  9953 │ │                * belongs to another application and a #GdkWindow hasn’t been created
  9954 │ │                * for it with gdk_window_foreign_new())
  9955 │ │                *
  9956 │ │                * NOTE: For multihead-aware widgets or applications use
  9957 │ │                * gdk_display_get_window_at_pointer() instead.
  9958 │ │                */
  9959 │ │               static at_pointer(): [Window, number, number];
  9960 │ │               /**
  9961 │ │                * Constrains a desired width and height according to a
  9962 │ │                * set of geometry hints (such as minimum and maximum size).
  9963 │ │                * @param geometry a #GdkGeometry structure
  9964 │ │                * @param flags a mask indicating what portions of @geometry are set
  9965 │ │                * @param width desired width of window
  9966 │ │                * @param height desired height of the window
  9967 │ │                */
  9968 │ │               static constrain_size(
  9969 │ │                   geometry: Geometry,
  9970 │ │                   flags: WindowHints,
  9971 │ │                   width: number,
  9972 │ │                   height: number,
  9973 │ │               ): [number, number];
  9974 │ │               /**
  9975 │ │                * Calls gdk_window_process_updates() for all windows (see #GdkWindow)
  9976 │ │                * in the application.
  9977 │ │                */
  9978 │ │               static process_all_updates(): void;
  9979 │ │               /**
  9980 │ │                * With update debugging enabled, calls to
  9981 │ │                * gdk_window_invalidate_region() clear the invalidated region of the
  9982 │ │                * screen to a noticeable color, and GDK pauses for a short time
  9983 │ │                * before sending exposes to windows during
  9984 │ │                * gdk_window_process_updates().  The net effect is that you can see
  9985 │ │                * the invalid region for each window and watch redraws as they
  9986 │ │                * occur. This allows you to diagnose inefficiencies in your application.
  9987 │ │                *
  9988 │ │                * In essence, because the GDK rendering model prevents all flicker,
  9989 │ │                * if you are redrawing the same region 400 times you may never
  9990 │ │                * notice, aside from noticing a speed problem. Enabling update
  9991 │ │                * debugging causes GTK to flicker slowly and noticeably, so you can
  9992 │ │                * see exactly what’s being redrawn when, in what order.
  9993 │ │                *
  9994 │ │                * The --gtk-debug=updates command line option passed to GTK+ programs
  9995 │ │                * enables this debug option at application startup time. That's
  9996 │ │                * usually more useful than calling gdk_window_set_debug_updates()
  9997 │ │                * yourself, though you might want to use this function to enable
  9998 │ │                * updates sometime after application startup time.
  9999 │ │                * @param setting %TRUE to turn on update debugging
 10000 │ │                */
 10001 │ │               static set_debug_updates(setting: boolean): void;
 10002 │ │   
 10003 │ │               // Virtual methods
 10004 │ │   
 10005 │ │               vfunc_create_surface(width: number, height: number): cairo.Surface;
 10006 │ │               vfunc_from_embedder(embedder_x: number, embedder_y: number, offscreen_x: number, offscreen_y: number): void;
 10007 │ │               vfunc_to_embedder(offscreen_x: number, offscreen_y: number, embedder_x: number, embedder_y: number): void;
 10008 │ │   
 10009 │ │               // Methods
 10010 │ │   
 10011 │ │               /**
 10012 │ │                * Emits a short beep associated to `window` in the appropriate
 10013 │ │                * display, if supported. Otherwise, emits a short beep on
 10014 │ │                * the display just as gdk_display_beep().
 10015 │ │                */
 10016 │ │               beep(): void;
 10017 │ │               /**
 10018 │ │                * Indicates that you are beginning the process of redrawing `region`
 10019 │ │                * on `window,` and provides you with a #GdkDrawingContext.
 10020 │ │                *
 10021 │ │                * If `window` is a top level #GdkWindow, backed by a native window
 10022 │ │                * implementation, a backing store (offscreen buffer) large enough to
 10023 │ │                * contain `region` will be created. The backing store will be initialized
 10024 │ │                * with the background color or background surface for `window`. Then, all
 10025 │ │                * drawing operations performed on `window` will be diverted to the
 10026 │ │                * backing store. When you call gdk_window_end_frame(), the contents of
 10027 │ │                * the backing store will be copied to `window,` making it visible
 10028 │ │                * on screen. Only the part of `window` contained in `region` will be
 10029 │ │                * modified; that is, drawing operations are clipped to `region`.
 10030 │ │                *
 10031 │ │                * The net result of all this is to remove flicker, because the user
 10032 │ │                * sees the finished product appear all at once when you call
 10033 │ │                * gdk_window_end_draw_frame(). If you draw to `window` directly without
 10034 │ │                * calling gdk_window_begin_draw_frame(), the user may see flicker
 10035 │ │                * as individual drawing operations are performed in sequence.
 10036 │ │                *
 10037 │ │                * When using GTK+, the widget system automatically places calls to
 10038 │ │                * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() around
 10039 │ │                * emissions of the `GtkWidget::draw` signal. That is, if you’re
 10040 │ │                * drawing the contents of the widget yourself, you can assume that the
 10041 │ │                * widget has a cleared background, is already set as the clip region,
 10042 │ │                * and already has a backing store. Therefore in most cases, application
 10043 │ │                * code in GTK does not need to call gdk_window_begin_draw_frame()
 10044 │ │                * explicitly.
 10045 │ │                * @param region a Cairo region
 10046 │ │                * @returns a #GdkDrawingContext context that should be   used to draw the contents of the window; the returned context is owned   by GDK.
 10047 │ │                */
 10048 │ │               begin_draw_frame(region: cairo.Region): DrawingContext;
 10049 │ │               /**
 10050 │ │                * Begins a window move operation (for a toplevel window).
 10051 │ │                *
 10052 │ │                * This function assumes that the drag is controlled by the
 10053 │ │                * client pointer device, use gdk_window_begin_move_drag_for_device()
 10054 │ │                * to begin a drag with a different device.
 10055 │ │                * @param button the button being used to drag, or 0 for a keyboard-initiated drag
 10056 │ │                * @param root_x root window X coordinate of mouse click that began the drag
 10057 │ │                * @param root_y root window Y coordinate of mouse click that began the drag
 10058 │ │                * @param timestamp timestamp of mouse click that began the drag
 10059 │ │                */
 10060 │ │               begin_move_drag(button: number, root_x: number, root_y: number, timestamp: number): void;
 10061 │ │               /**
 10062 │ │                * Begins a window move operation (for a toplevel window).
 10063 │ │                * You might use this function to implement a “window move grip,” for
 10064 │ │                * example. The function works best with window managers that support the
 10065 │ │                * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
 10066 │ │                * but has a fallback implementation for other window managers.
 10067 │ │                * @param device the device used for the operation
 10068 │ │                * @param button the button being used to drag, or 0 for a keyboard-initiated drag
 10069 │ │                * @param root_x root window X coordinate of mouse click that began the drag
 10070 │ │                * @param root_y root window Y coordinate of mouse click that began the drag
 10071 │ │                * @param timestamp timestamp of mouse click that began the drag
 10072 │ │                */
 10073 │ │               begin_move_drag_for_device(
 10074 │ │                   device: Device,
 10075 │ │                   button: number,
 10076 │ │                   root_x: number,
 10077 │ │                   root_y: number,
 10078 │ │                   timestamp: number,
 10079 │ │               ): void;
 10080 │ │               /**
 10081 │ │                * A convenience wrapper around gdk_window_begin_paint_region() which
 10082 │ │                * creates a rectangular region for you. See
 10083 │ │                * gdk_window_begin_paint_region() for details.
 10084 │ │                * @param rectangle rectangle you intend to draw to
 10085 │ │                */
 10086 │ │               begin_paint_rect(rectangle: Rectangle): void;
 10087 │ │               /**
 10088 │ │                * Indicates that you are beginning the process of redrawing `region`.
 10089 │ │                * A backing store (offscreen buffer) large enough to contain `region`
 10090 │ │                * will be created. The backing store will be initialized with the
 10091 │ │                * background color or background surface for `window`. Then, all
 10092 │ │                * drawing operations performed on `window` will be diverted to the
 10093 │ │                * backing store.  When you call gdk_window_end_paint(), the backing
 10094 │ │                * store will be copied to `window,` making it visible onscreen. Only
 10095 │ │                * the part of `window` contained in `region` will be modified; that is,
 10096 │ │                * drawing operations are clipped to `region`.
 10097 │ │                *
 10098 │ │                * The net result of all this is to remove flicker, because the user
 10099 │ │                * sees the finished product appear all at once when you call
 10100 │ │                * gdk_window_end_paint(). If you draw to `window` directly without
 10101 │ │                * calling gdk_window_begin_paint_region(), the user may see flicker
 10102 │ │                * as individual drawing operations are performed in sequence.  The
 10103 │ │                * clipping and background-initializing features of
 10104 │ │                * gdk_window_begin_paint_region() are conveniences for the
 10105 │ │                * programmer, so you can avoid doing that work yourself.
 10106 │ │                *
 10107 │ │                * When using GTK+, the widget system automatically places calls to
 10108 │ │                * gdk_window_begin_paint_region() and gdk_window_end_paint() around
 10109 │ │                * emissions of the expose_event signal. That is, if you’re writing an
 10110 │ │                * expose event handler, you can assume that the exposed area in
 10111 │ │                * #GdkEventExpose has already been cleared to the window background,
 10112 │ │                * is already set as the clip region, and already has a backing store.
 10113 │ │                * Therefore in most cases, application code need not call
 10114 │ │                * gdk_window_begin_paint_region(). (You can disable the automatic
 10115 │ │                * calls around expose events on a widget-by-widget basis by calling
 10116 │ │                * gtk_widget_set_double_buffered().)
 10117 │ │                *
 10118 │ │                * If you call this function multiple times before calling the
 10119 │ │                * matching gdk_window_end_paint(), the backing stores are pushed onto
 10120 │ │                * a stack. gdk_window_end_paint() copies the topmost backing store
 10121 │ │                * onscreen, subtracts the topmost region from all other regions in
 10122 │ │                * the stack, and pops the stack. All drawing operations affect only
 10123 │ │                * the topmost backing store in the stack. One matching call to
 10124 │ │                * gdk_window_end_paint() is required for each call to
 10125 │ │                * gdk_window_begin_paint_region().
 10126 │ │                * @param region region you intend to draw to
 10127 │ │                */
 10128 │ │               begin_paint_region(region: cairo.Region): void;
 10129 │ │               /**
 10130 │ │                * Begins a window resize operation (for a toplevel window).
 10131 │ │                *
 10132 │ │                * This function assumes that the drag is controlled by the
 10133 │ │                * client pointer device, use gdk_window_begin_resize_drag_for_device()
 10134 │ │                * to begin a drag with a different device.
 10135 │ │                * @param edge the edge or corner from which the drag is started
 10136 │ │                * @param button the button being used to drag, or 0 for a keyboard-initiated drag
 10137 │ │                * @param root_x root window X coordinate of mouse click that began the drag
 10138 │ │                * @param root_y root window Y coordinate of mouse click that began the drag
 10139 │ │                * @param timestamp timestamp of mouse click that began the drag (use gdk_event_get_time())
 10140 │ │                */
 10141 │ │               begin_resize_drag(
 10142 │ │                   edge: WindowEdge | null,
 10143 │ │                   button: number,
 10144 │ │                   root_x: number,
 10145 │ │                   root_y: number,
 10146 │ │                   timestamp: number,
 10147 │ │               ): void;
 10148 │ │               /**
 10149 │ │                * Begins a window resize operation (for a toplevel window).
 10150 │ │                * You might use this function to implement a “window resize grip,” for
 10151 │ │                * example; in fact #GtkStatusbar uses it. The function works best
 10152 │ │                * with window managers that support the
 10153 │ │                * [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
 10154 │ │                * but has a fallback implementation for other window managers.
 10155 │ │                * @param edge the edge or corner from which the drag is started
 10156 │ │                * @param device the device used for the operation
 10157 │ │                * @param button the button being used to drag, or 0 for a keyboard-initiated drag
 10158 │ │                * @param root_x root window X coordinate of mouse click that began the drag
 10159 │ │                * @param root_y root window Y coordinate of mouse click that began the drag
 10160 │ │                * @param timestamp timestamp of mouse click that began the drag (use gdk_event_get_time())
 10161 │ │                */
 10162 │ │               begin_resize_drag_for_device(
 10163 │ │                   edge: WindowEdge | null,
 10164 │ │                   device: Device,
 10165 │ │                   button: number,
 10166 │ │                   root_x: number,
 10167 │ │                   root_y: number,
 10168 │ │                   timestamp: number,
 10169 │ │               ): void;
 10170 │ │               /**
 10171 │ │                * Does nothing, present only for compatiblity.
 10172 │ │                */
 10173 │ │               configure_finished(): void;
 10174 │ │               /**
 10175 │ │                * Transforms window coordinates from a parent window to a child
 10176 │ │                * window, where the parent window is the normal parent as returned by
 10177 │ │                * gdk_window_get_parent() for normal windows, and the window's
 10178 │ │                * embedder as returned by gdk_offscreen_window_get_embedder() for
 10179 │ │                * offscreen windows.
 10180 │ │                *
 10181 │ │                * For normal windows, calling this function is equivalent to subtracting
 10182 │ │                * the return values of gdk_window_get_position() from the parent coordinates.
 10183 │ │                * For offscreen windows however (which can be arbitrarily transformed),
 10184 │ │                * this function calls the GdkWindow::from-embedder: signal to translate
 10185 │ │                * the coordinates.
 10186 │ │                *
 10187 │ │                * You should always use this function when writing generic code that
 10188 │ │                * walks down a window hierarchy.
 10189 │ │                *
 10190 │ │                * See also: gdk_window_coords_to_parent()
 10191 │ │                * @param parent_x X coordinate in parent’s coordinate system
 10192 │ │                * @param parent_y Y coordinate in parent’s coordinate system
 10193 │ │                */
 10194 │ │               coords_from_parent(parent_x: number, parent_y: number): [number, number];
 10195 │ │               /**
 10196 │ │                * Transforms window coordinates from a child window to its parent
 10197 │ │                * window, where the parent window is the normal parent as returned by
 10198 │ │                * gdk_window_get_parent() for normal windows, and the window's
 10199 │ │                * embedder as returned by gdk_offscreen_window_get_embedder() for
 10200 │ │                * offscreen windows.
 10201 │ │                *
 10202 │ │                * For normal windows, calling this function is equivalent to adding
 10203 │ │                * the return values of gdk_window_get_position() to the child coordinates.
 10204 │ │                * For offscreen windows however (which can be arbitrarily transformed),
 10205 │ │                * this function calls the GdkWindow::to-embedder: signal to translate
 10206 │ │                * the coordinates.
 10207 │ │                *
 10208 │ │                * You should always use this function when writing generic code that
 10209 │ │                * walks up a window hierarchy.
 10210 │ │                *
 10211 │ │                * See also: gdk_window_coords_from_parent()
 10212 │ │                * @param x X coordinate in child’s coordinate system
 10213 │ │                * @param y Y coordinate in child’s coordinate system
 10214 │ │                */
 10215 │ │               coords_to_parent(x: number, y: number): [number, number];
 10216 │ │               /**
 10217 │ │                * Creates a new #GdkGLContext matching the
 10218 │ │                * framebuffer format to the visual of the #GdkWindow. The context
 10219 │ │                * is disconnected from any particular window or surface.
 10220 │ │                *
 10221 │ │                * If the creation of the #GdkGLContext failed, `error` will be set.
 10222 │ │                *
 10223 │ │                * Before using the returned #GdkGLContext, you will need to
 10224 │ │                * call gdk_gl_context_make_current() or gdk_gl_context_realize().
 10225 │ │                * @returns the newly created #GdkGLContext, or %NULL on error
 10226 │ │                */
 10227 │ │               create_gl_context(): GLContext;
 10228 │ │               /**
 10229 │ │                * Create a new image surface that is efficient to draw on the
 10230 │ │                * given `window`.
 10231 │ │                *
 10232 │ │                * Initially the surface contents are all 0 (transparent if contents
 10233 │ │                * have transparency, black otherwise.)
 10234 │ │                *
 10235 │ │                * The `width` and `height` of the new surface are not affected by
 10236 │ │                * the scaling factor of the `window,` or by the `scale` argument; they
 10237 │ │                * are the size of the surface in device pixels. If you wish to create
 10238 │ │                * an image surface capable of holding the contents of `window` you can
 10239 │ │                * use:
 10240 │ │                *
 10241 │ │                *
 10242 │ │                * ```c
 10243 │ │                *   int scale = gdk_window_get_scale_factor (window);
 10244 │ │                *   int width = gdk_window_get_width (window) * scale;
 10245 │ │                *   int height = gdk_window_get_height (window) * scale;
 10246 │ │                *
 10247 │ │                *   // format is set elsewhere
 10248 │ │                *   cairo_surface_t *surface =
 10249 │ │                *     gdk_window_create_similar_image_surface (window,
 10250 │ │                *                                              format,
 10251 │ │                *                                              width, height,
 10252 │ │                *                                              scale);
 10253 │ │                * ```
 10254 │ │                *
 10255 │ │                *
 10256 │ │                * Note that unlike cairo_surface_create_similar_image(), the new
 10257 │ │                * surface's device scale is set to `scale,` or to the scale factor of
 10258 │ │                * `window` if `scale` is 0.
 10259 │ │                * @param format the format for the new surface
 10260 │ │                * @param width width of the new surface
 10261 │ │                * @param height height of the new surface
 10262 │ │                * @param scale the scale of the new surface, or 0 to use same as @window
 10263 │ │                * @returns a pointer to the newly allocated surface. The caller owns the surface and should call cairo_surface_destroy() when done with it. This function always returns a valid pointer, but it will return a pointer to a “nil” surface if @other is already in an error state or any other error occurs.
 10264 │ │                */
 10265 │ │               create_similar_image_surface(
 10266 │ │                   format: cairo.Format | null,
 10267 │ │                   width: number,
 10268 │ │                   height: number,
 10269 │ │                   scale: number,
 10270 │ │               ): cairo.Surface;
 10271 │ │               /**
 10272 │ │                * Create a new surface that is as compatible as possible with the
 10273 │ │                * given `window`. For example the new surface will have the same
 10274 │ │                * fallback resolution and font options as `window`. Generally, the new
 10275 │ │                * surface will also use the same backend as `window,` unless that is
 10276 │ │                * not possible for some reason. The type of the returned surface may
 10277 │ │                * be examined with cairo_surface_get_type().
 10278 │ │                *
 10279 │ │                * Initially the surface contents are all 0 (transparent if contents
 10280 │ │                * have transparency, black otherwise.)
 10281 │ │                * @param content the content for the new surface
 10282 │ │                * @param width width of the new surface
 10283 │ │                * @param height height of the new surface
 10284 │ │                * @returns a pointer to the newly allocated surface. The caller owns the surface and should call cairo_surface_destroy() when done with it. This function always returns a valid pointer, but it will return a pointer to a “nil” surface if @other is already in an error state or any other error occurs.
 10285 │ │                */
 10286 │ │               create_similar_surface(content: cairo.Content | null, width: number, height: number): cairo.Surface;
 10287 │ │               /**
 10288 │ │                * Attempt to deiconify (unminimize) `window`. On X11 the window manager may
 10289 │ │                * choose to ignore the request to deiconify. When using GTK+,
 10290 │ │                * use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
 10291 │ │                * you probably want to use gtk_window_present_with_time(), which raises the window, focuses it,
 10292 │ │                * unminimizes it, and puts it on the current desktop.
 10293 │ │                */
 10294 │ │               deiconify(): void;
 10295 │ │               /**
 10296 │ │                * Destroys the window system resources associated with `window` and decrements `window'`s
 10297 │ │                * reference count. The window system resources for all children of `window` are also
 10298 │ │                * destroyed, but the children’s reference counts are not decremented.
 10299 │ │                *
 10300 │ │                * Note that a window will not be destroyed automatically when its reference count
 10301 │ │                * reaches zero. You must call this function yourself before that happens.
 10302 │ │                */
 10303 │ │               destroy(): void;
 10304 │ │               destroy_notify(): void;
 10305 │ │               /**
 10306 │ │                * Does nothing, present only for compatiblity.
 10307 │ │                */
 10308 │ │               enable_synchronized_configure(): void;
 10309 │ │               /**
 10310 │ │                * Indicates that the drawing of the contents of `window` started with
 10311 │ │                * gdk_window_begin_frame() has been completed.
 10312 │ │                *
 10313 │ │                * This function will take care of destroying the #GdkDrawingContext.
 10314 │ │                *
 10315 │ │                * It is an error to call this function without a matching
 10316 │ │                * gdk_window_begin_frame() first.
 10317 │ │                * @param context the #GdkDrawingContext created by gdk_window_begin_draw_frame()
 10318 │ │                */
 10319 │ │               end_draw_frame(context: DrawingContext): void;
 10320 │ │               /**
 10321 │ │                * Indicates that the backing store created by the most recent call
 10322 │ │                * to gdk_window_begin_paint_region() should be copied onscreen and
 10323 │ │                * deleted, leaving the next-most-recent backing store or no backing
 10324 │ │                * store at all as the active paint region. See
 10325 │ │                * gdk_window_begin_paint_region() for full details.
 10326 │ │                *
 10327 │ │                * It is an error to call this function without a matching
 10328 │ │                * gdk_window_begin_paint_region() first.
 10329 │ │                */
 10330 │ │               end_paint(): void;
 10331 │ │               /**
 10332 │ │                * Tries to ensure that there is a window-system native window for this
 10333 │ │                * GdkWindow. This may fail in some situations, returning %FALSE.
 10334 │ │                *
 10335 │ │                * Offscreen window and children of them can never have native windows.
 10336 │ │                *
 10337 │ │                * Some backends may not support native child windows.
 10338 │ │                * @returns %TRUE if the window has a native window, %FALSE otherwise
 10339 │ │                */
 10340 │ │               ensure_native(): boolean;
 10341 │ │               /**
 10342 │ │                * This function does nothing.
 10343 │ │                */
 10344 │ │               flush(): void;
 10345 │ │               /**
 10346 │ │                * Sets keyboard focus to `window`. In most cases, gtk_window_present_with_time()
 10347 │ │                * should be used on a #GtkWindow, rather than calling this function.
 10348 │ │                * @param timestamp timestamp of the event triggering the window focus
 10349 │ │                */
 10350 │ │               focus(timestamp: number): void;
 10351 │ │               /**
 10352 │ │                * Temporarily freezes a window and all its descendants such that it won't
 10353 │ │                * receive expose events.  The window will begin receiving expose events
 10354 │ │                * again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
 10355 │ │                * gdk_window_freeze_toplevel_updates_libgtk_only()
 10356 │ │                * has been called more than once,
 10357 │ │                * gdk_window_thaw_toplevel_updates_libgtk_only() must be called
 10358 │ │                * an equal number of times to begin processing exposes.
 10359 │ │                *
 10360 │ │                * This function is not part of the GDK public API and is only
 10361 │ │                * for use by GTK+.
 10362 │ │                */
 10363 │ │               freeze_toplevel_updates_libgtk_only(): void;
 10364 │ │               /**
 10365 │ │                * Temporarily freezes a window such that it won’t receive expose
 10366 │ │                * events.  The window will begin receiving expose events again when
 10367 │ │                * gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
 10368 │ │                * has been called more than once, gdk_window_thaw_updates() must be called
 10369 │ │                * an equal number of times to begin processing exposes.
 10370 │ │                */
 10371 │ │               freeze_updates(): void;
 10372 │ │               /**
 10373 │ │                * Moves the window into fullscreen mode. This means the
 10374 │ │                * window covers the entire screen and is above any panels
 10375 │ │                * or task bars.
 10376 │ │                *
 10377 │ │                * If the window was already fullscreen, then this function does nothing.
 10378 │ │                *
 10379 │ │                * On X11, asks the window manager to put `window` in a fullscreen
 10380 │ │                * state, if the window manager supports this operation. Not all
 10381 │ │                * window managers support this, and some deliberately ignore it or
 10382 │ │                * don’t have a concept of “fullscreen”; so you can’t rely on the
 10383 │ │                * fullscreenification actually happening. But it will happen with
 10384 │ │                * most standard window managers, and GDK makes a best effort to get
 10385 │ │                * it to happen.
 10386 │ │                */
 10387 │ │               fullscreen(): void;
 10388 │ │               /**
 10389 │ │                * Moves the window into fullscreen mode on the given monitor. This means
 10390 │ │                * the window covers the entire screen and is above any panels or task bars.
 10391 │ │                *
 10392 │ │                * If the window was already fullscreen, then this function does nothing.
 10393 │ │                * @param monitor Which monitor to display fullscreen on.
 10394 │ │                */
 10395 │ │               fullscreen_on_monitor(monitor: number): void;
 10396 │ │               /**
 10397 │ │                * This function informs GDK that the geometry of an embedded
 10398 │ │                * offscreen window has changed. This is necessary for GDK to keep
 10399 │ │                * track of which offscreen window the pointer is in.
 10400 │ │                */
 10401 │ │               geometry_changed(): void;
 10402 │ │               /**
 10403 │ │                * Determines whether or not the desktop environment shuld be hinted that
 10404 │ │                * the window does not want to receive input focus.
 10405 │ │                * @returns whether or not the window should receive input focus.
 10406 │ │                */
 10407 │ │               get_accept_focus(): boolean;
 10408 │ │               /**
 10409 │ │                * Gets the pattern used to clear the background on `window`.
 10410 │ │                * @returns The pattern to use for the background or %NULL if there is no background.
 10411 │ │                */
 10412 │ │               get_background_pattern(): cairo.Pattern | null;
 10413 │ │               /**
 10414 │ │                * Gets the list of children of `window` known to GDK.
 10415 │ │                * This function only returns children created via GDK,
 10416 │ │                * so for example it’s useless when used with the root window;
 10417 │ │                * it only returns windows an application created itself.
 10418 │ │                *
 10419 │ │                * The returned list must be freed, but the elements in the
 10420 │ │                * list need not be.
 10421 │ │                * @returns list of child windows inside @window
 10422 │ │                */
 10423 │ │               get_children(): Window[];
 10424 │ │               /**
 10425 │ │                * Gets the list of children of `window` known to GDK with a
 10426 │ │                * particular `user_data` set on it.
 10427 │ │                *
 10428 │ │                * The returned list must be freed, but the elements in the
 10429 │ │                * list need not be.
 10430 │ │                *
 10431 │ │                * The list is returned in (relative) stacking order, i.e. the
 10432 │ │                * lowest window is first.
 10433 │ │                * @param user_data user data to look for
 10434 │ │                * @returns list of child windows inside @window
 10435 │ │                */
 10436 │ │               get_children_with_user_data(user_data?: any | null): Window[];
 10437 │ │               /**
 10438 │ │                * Computes the region of a window that potentially can be written
 10439 │ │                * to by drawing primitives. This region may not take into account
 10440 │ │                * other factors such as if the window is obscured by other windows,
 10441 │ │                * but no area outside of this region will be affected by drawing
 10442 │ │                * primitives.
 10443 │ │                * @returns a #cairo_region_t. This must be freed with cairo_region_destroy()          when you are done.
 10444 │ │                */
 10445 │ │               get_clip_region(): cairo.Region;
 10446 │ │               /**
 10447 │ │                * Determines whether `window` is composited.
 10448 │ │                *
 10449 │ │                * See gdk_window_set_composited().
 10450 │ │                * @returns %TRUE if the window is composited.
 10451 │ │                */
 10452 │ │               get_composited(): boolean;
 10453 │ │               /**
 10454 │ │                * Retrieves a #GdkCursor pointer for the cursor currently set on the
 10455 │ │                * specified #GdkWindow, or %NULL.  If the return value is %NULL then
 10456 │ │                * there is no custom cursor set on the specified window, and it is
 10457 │ │                * using the cursor for its parent window.
 10458 │ │                * @returns a #GdkCursor, or %NULL. The   returned object is owned by the #GdkWindow and should not be   unreferenced directly. Use gdk_window_set_cursor() to unset the   cursor of the window
 10459 │ │                */
 10460 │ │               get_cursor(): Cursor | null;
 10461 │ │               /**
 10462 │ │                * Returns the decorations set on the GdkWindow with
 10463 │ │                * gdk_window_set_decorations().
 10464 │ │                * @returns %TRUE if the window has decorations set, %FALSE otherwise.
 10465 │ │                */
 10466 │ │               get_decorations(): [boolean, WMDecoration];
 10467 │ │               /**
 10468 │ │                * Retrieves a #GdkCursor pointer for the `device` currently set on the
 10469 │ │                * specified #GdkWindow, or %NULL.  If the return value is %NULL then
 10470 │ │                * there is no custom cursor set on the specified window, and it is
 10471 │ │                * using the cursor for its parent window.
 10472 │ │                * @param device a master, pointer #GdkDevice.
 10473 │ │                * @returns a #GdkCursor, or %NULL. The   returned object is owned by the #GdkWindow and should not be   unreferenced directly. Use gdk_window_set_cursor() to unset the   cursor of the window
 10474 │ │                */
 10475 │ │               get_device_cursor(device: Device): Cursor | null;
 10476 │ │               /**
 10477 │ │                * Returns the event mask for `window` corresponding to an specific device.
 10478 │ │                * @param device a #GdkDevice.
 10479 │ │                * @returns device event mask for @window
 10480 │ │                */
 10481 │ │               get_device_events(device: Device): EventMask;
 10482 │ │               /**
 10483 │ │                * Obtains the current device position and modifier state.
 10484 │ │                * The position is given in coordinates relative to the upper left
 10485 │ │                * corner of `window`.
 10486 │ │                *
 10487 │ │                * Use gdk_window_get_device_position_double() if you need subpixel precision.
 10488 │ │                * @param device pointer #GdkDevice to query to.
 10489 │ │                * @returns The window underneath @device (as with gdk_device_get_window_at_position()), or %NULL if the window is not known to GDK.
 10490 │ │                */
 10491 │ │               get_device_position(device: Device): [Window | null, number, number, ModifierType | null];
 10492 │ │               /**
 10493 │ │                * Obtains the current device position in doubles and modifier state.
 10494 │ │                * The position is given in coordinates relative to the upper left
 10495 │ │                * corner of `window`.
 10496 │ │                * @param device pointer #GdkDevice to query to.
 10497 │ │                * @returns The window underneath @device (as with gdk_device_get_window_at_position()), or %NULL if the window is not known to GDK.
 10498 │ │                */
 10499 │ │               get_device_position_double(device: Device): [Window | null, number, number, ModifierType | null];
 10500 │ │               /**
 10501 │ │                * Gets the #GdkDisplay associated with a #GdkWindow.
 10502 │ │                * @returns the #GdkDisplay associated with @window
 10503 │ │                */
 10504 │ │               get_display(): Display;
 10505 │ │               /**
 10506 │ │                * Finds out the DND protocol supported by a window.
 10507 │ │                * @returns the supported DND protocol.
 10508 │ │                */
 10509 │ │               get_drag_protocol(): [DragProtocol, Window | null];
 10510 │ │               /**
 10511 │ │                * Obtains the parent of `window,` as known to GDK. Works like
 10512 │ │                * gdk_window_get_parent() for normal windows, but returns the
 10513 │ │                * window’s embedder for offscreen windows.
 10514 │ │                *
 10515 │ │                * See also: gdk_offscreen_window_get_embedder()
 10516 │ │                * @returns effective parent of @window
 10517 │ │                */
 10518 │ │               get_effective_parent(): Window;
 10519 │ │               /**
 10520 │ │                * Gets the toplevel window that’s an ancestor of `window`.
 10521 │ │                *
 10522 │ │                * Works like gdk_window_get_toplevel(), but treats an offscreen window's
 10523 │ │                * embedder as its parent, using gdk_window_get_effective_parent().
 10524 │ │                *
 10525 │ │                * See also: gdk_offscreen_window_get_embedder()
 10526 │ │                * @returns the effective toplevel window containing @window
 10527 │ │                */
 10528 │ │               get_effective_toplevel(): Window;
 10529 │ │               /**
 10530 │ │                * Get the current event compression setting for this window.
 10531 │ │                * @returns %TRUE if motion events will be compressed
 10532 │ │                */
 10533 │ │               get_event_compression(): boolean;
 10534 │ │               /**
 10535 │ │                * Gets the event mask for `window` for all master input devices. See
 10536 │ │                * gdk_window_set_events().
 10537 │ │                * @returns event mask for @window
 10538 │ │                */
 10539 │ │               get_events(): EventMask;
 10540 │ │               /**
 10541 │ │                * Determines whether or not the desktop environment should be hinted that the
 10542 │ │                * window does not want to receive input focus when it is mapped.
 10543 │ │                * @returns whether or not the window wants to receive input focus when it is mapped.
 10544 │ │                */
 10545 │ │               get_focus_on_map(): boolean;
 10546 │ │               /**
 10547 │ │                * Gets the frame clock for the window. The frame clock for a window
 10548 │ │                * never changes unless the window is reparented to a new toplevel
 10549 │ │                * window.
 10550 │ │                * @returns the frame clock
 10551 │ │                */
 10552 │ │               get_frame_clock(): FrameClock;
 10553 │ │               /**
 10554 │ │                * Obtains the bounding box of the window, including window manager
 10555 │ │                * titlebar/borders if any. The frame position is given in root window
 10556 │ │                * coordinates. To get the position of the window itself (rather than
 10557 │ │                * the frame) in root window coordinates, use gdk_window_get_origin().
 10558 │ │                */
 10559 │ │               get_frame_extents(): Rectangle;
 10560 │ │               /**
 10561 │ │                * Obtains the #GdkFullscreenMode of the `window`.
 10562 │ │                * @returns The #GdkFullscreenMode applied to the window when fullscreen.
 10563 │ │                */
 10564 │ │               get_fullscreen_mode(): FullscreenMode;
 10565 │ │               /**
 10566 │ │                * Any of the return location arguments to this function may be %NULL,
 10567 │ │                * if you aren’t interested in getting the value of that field.
 10568 │ │                *
 10569 │ │                * The X and Y coordinates returned are relative to the parent window
 10570 │ │                * of `window,` which for toplevels usually means relative to the
 10571 │ │                * window decorations (titlebar, etc.) rather than relative to the
 10572 │ │                * root window (screen-size background window).
 10573 │ │                *
 10574 │ │                * On the X11 platform, the geometry is obtained from the X server,
 10575 │ │                * so reflects the latest position of `window;` this may be out-of-sync
 10576 │ │                * with the position of `window` delivered in the most-recently-processed
 10577 │ │                * #GdkEventConfigure. gdk_window_get_position() in contrast gets the
 10578 │ │                * position from the most recent configure event.
 10579 │ │                *
 10580 │ │                * Note: If `window` is not a toplevel, it is much better
 10581 │ │                * to call gdk_window_get_position(), gdk_window_get_width() and
 10582 │ │                * gdk_window_get_height() instead, because it avoids the roundtrip to
 10583 │ │                * the X server and because these functions support the full 32-bit
 10584 │ │                * coordinate space, whereas gdk_window_get_geometry() is restricted to
 10585 │ │                * the 16-bit coordinates of X11.
 10586 │ │                */
 10587 │ │               get_geometry(): [number, number, number, number];
 10588 │ │               /**
 10589 │ │                * Returns the group leader window for `window`. See gdk_window_set_group().
 10590 │ │                * @returns the group leader window for @window
 10591 │ │                */
 10592 │ │               get_group(): Window;
 10593 │ │               /**
 10594 │ │                * Returns the height of the given `window`.
 10595 │ │                *
 10596 │ │                * On the X11 platform the returned size is the size reported in the
 10597 │ │                * most-recently-processed configure event, rather than the current
 10598 │ │                * size on the X server.
 10599 │ │                * @returns The height of @window
 10600 │ │                */
 10601 │ │               get_height(): number;
 10602 │ │               /**
 10603 │ │                * Determines whether or not the window manager is hinted that `window`
 10604 │ │                * has modal behaviour.
 10605 │ │                * @returns whether or not the window has the modal hint set.
 10606 │ │                */
 10607 │ │               get_modal_hint(): boolean;
 10608 │ │               /**
 10609 │ │                * Obtains the position of a window in root window coordinates.
 10610 │ │                * (Compare with gdk_window_get_position() and
 10611 │ │                * gdk_window_get_geometry() which return the position of a window
 10612 │ │                * relative to its parent window.)
 10613 │ │                * @returns not meaningful, ignore
 10614 │ │                */
 10615 │ │               get_origin(): [number, number, number];
 10616 │ │               /**
 10617 │ │                * Obtains the parent of `window,` as known to GDK. Does not query the
 10618 │ │                * X server; thus this returns the parent as passed to gdk_window_new(),
 10619 │ │                * not the actual parent. This should never matter unless you’re using
 10620 │ │                * Xlib calls mixed with GDK calls on the X11 platform. It may also
 10621 │ │                * matter for toplevel windows, because the window manager may choose
 10622 │ │                * to reparent them.
 10623 │ │                *
 10624 │ │                * Note that you should use gdk_window_get_effective_parent() when
 10625 │ │                * writing generic code that walks up a window hierarchy, because
 10626 │ │                * gdk_window_get_parent() will most likely not do what you expect if
 10627 │ │                * there are offscreen windows in the hierarchy.
 10628 │ │                * @returns parent of @window
 10629 │ │                */
 10630 │ │               get_parent(): Window;
 10631 │ │               /**
 10632 │ │                * Returns whether input to the window is passed through to the window
 10633 │ │                * below.
 10634 │ │                *
 10635 │ │                * See gdk_window_set_pass_through() for details
 10636 │ │                */
 10637 │ │               get_pass_through(): boolean;
 10638 │ │               /**
 10639 │ │                * Obtains the current pointer position and modifier state.
 10640 │ │                * The position is given in coordinates relative to the upper left
 10641 │ │                * corner of `window`.
 10642 │ │                * @returns the window containing the pointer (as with gdk_window_at_pointer()), or %NULL if the window containing the pointer isn’t known to GDK
 10643 │ │                */
 10644 │ │               get_pointer(): [Window | null, number, number, ModifierType | null];
 10645 │ │               /**
 10646 │ │                * Obtains the position of the window as reported in the
 10647 │ │                * most-recently-processed #GdkEventConfigure. Contrast with
 10648 │ │                * gdk_window_get_geometry() which queries the X server for the
 10649 │ │                * current window position, regardless of which events have been
 10650 │ │                * received or processed.
 10651 │ │                *
 10652 │ │                * The position coordinates are relative to the window’s parent window.
 10653 │ │                */
 10654 │ │               get_position(): [number, number];
 10655 │ │               /**
 10656 │ │                * Obtains the position of a window position in root
 10657 │ │                * window coordinates. This is similar to
 10658 │ │                * gdk_window_get_origin() but allows you to pass
 10659 │ │                * in any position in the window, not just the origin.
 10660 │ │                * @param x X coordinate in window
 10661 │ │                * @param y Y coordinate in window
 10662 │ │                */
 10663 │ │               get_root_coords(x: number, y: number): [number, number];
 10664 │ │               /**
 10665 │ │                * Obtains the top-left corner of the window manager frame in root
 10666 │ │                * window coordinates.
 10667 │ │                */
 10668 │ │               get_root_origin(): [number, number];
 10669 │ │               /**
 10670 │ │                * Returns the internal scale factor that maps from window coordiantes
 10671 │ │                * to the actual device pixels. On traditional systems this is 1, but
 10672 │ │                * on very high density outputs this can be a higher value (often 2).
 10673 │ │                *
 10674 │ │                * A higher value means that drawing is automatically scaled up to
 10675 │ │                * a higher resolution, so any code doing drawing will automatically look
 10676 │ │                * nicer. However, if you are supplying pixel-based data the scale
 10677 │ │                * value can be used to determine whether to use a pixel resource
 10678 │ │                * with higher resolution data.
 10679 │ │                *
 10680 │ │                * The scale of a window may change during runtime, if this happens
 10681 │ │                * a configure event will be sent to the toplevel window.
 10682 │ │                * @returns the scale factor
 10683 │ │                */
 10684 │ │               get_scale_factor(): number;
 10685 │ │               /**
 10686 │ │                * Gets the #GdkScreen associated with a #GdkWindow.
 10687 │ │                * @returns the #GdkScreen associated with @window
 10688 │ │                */
 10689 │ │               get_screen(): Screen;
 10690 │ │               /**
 10691 │ │                * Returns the event mask for `window` corresponding to the device class specified
 10692 │ │                * by `source`.
 10693 │ │                * @param source a #GdkInputSource to define the source class.
 10694 │ │                * @returns source event mask for @window
 10695 │ │                */
 10696 │ │               get_source_events(source: InputSource | null): EventMask;
 10697 │ │               /**
 10698 │ │                * Gets the bitwise OR of the currently active window state flags,
 10699 │ │                * from the #GdkWindowState enumeration.
 10700 │ │                * @returns window state bitfield
 10701 │ │                */
 10702 │ │               get_state(): WindowState;
 10703 │ │               /**
 10704 │ │                * Returns %TRUE if the window is aware of the existence of multiple
 10705 │ │                * devices.
 10706 │ │                * @returns %TRUE if the window handles multidevice features.
 10707 │ │                */
 10708 │ │               get_support_multidevice(): boolean;
 10709 │ │               /**
 10710 │ │                * Gets the toplevel window that’s an ancestor of `window`.
 10711 │ │                *
 10712 │ │                * Any window type but %GDK_WINDOW_CHILD is considered a
 10713 │ │                * toplevel window, as is a %GDK_WINDOW_CHILD window that
 10714 │ │                * has a root window as parent.
 10715 │ │                *
 10716 │ │                * Note that you should use gdk_window_get_effective_toplevel() when
 10717 │ │                * you want to get to a window’s toplevel as seen on screen, because
 10718 │ │                * gdk_window_get_toplevel() will most likely not do what you expect
 10719 │ │                * if there are offscreen windows in the hierarchy.
 10720 │ │                * @returns the toplevel window containing @window
 10721 │ │                */
 10722 │ │               get_toplevel(): Window;
 10723 │ │               /**
 10724 │ │                * This function returns the type hint set for a window.
 10725 │ │                * @returns The type hint set for @window
 10726 │ │                */
 10727 │ │               get_type_hint(): WindowTypeHint;
 10728 │ │               /**
 10729 │ │                * Transfers ownership of the update area from `window` to the caller
 10730 │ │                * of the function. That is, after calling this function, `window` will
 10731 │ │                * no longer have an invalid/dirty region; the update area is removed
 10732 │ │                * from `window` and handed to you. If a window has no update area,
 10733 │ │                * gdk_window_get_update_area() returns %NULL. You are responsible for
 10734 │ │                * calling cairo_region_destroy() on the returned region if it’s non-%NULL.
 10735 │ │                * @returns the update area for @window
 10736 │ │                */
 10737 │ │               get_update_area(): cairo.Region;
 10738 │ │               /**
 10739 │ │                * Retrieves the user data for `window,` which is normally the widget
 10740 │ │                * that `window` belongs to. See gdk_window_set_user_data().
 10741 │ │                */
 10742 │ │               get_user_data(): any;
 10743 │ │               /**
 10744 │ │                * Computes the region of the `window` that is potentially visible.
 10745 │ │                * This does not necessarily take into account if the window is
 10746 │ │                * obscured by other windows, but no area outside of this region
 10747 │ │                * is visible.
 10748 │ │                * @returns a #cairo_region_t. This must be freed with cairo_region_destroy()          when you are done.
 10749 │ │                */
 10750 │ │               get_visible_region(): cairo.Region;
 10751 │ │               /**
 10752 │ │                * Gets the #GdkVisual describing the pixel format of `window`.
 10753 │ │                * @returns a #GdkVisual
 10754 │ │                */
 10755 │ │               get_visual(): Visual;
 10756 │ │               /**
 10757 │ │                * Returns the width of the given `window`.
 10758 │ │                *
 10759 │ │                * On the X11 platform the returned size is the size reported in the
 10760 │ │                * most-recently-processed configure event, rather than the current
 10761 │ │                * size on the X server.
 10762 │ │                * @returns The width of @window
 10763 │ │                */
 10764 │ │               get_width(): number;
 10765 │ │               /**
 10766 │ │                * Gets the type of the window. See #GdkWindowType.
 10767 │ │                * @returns type of window
 10768 │ │                */
 10769 │ │               get_window_type(): WindowType;
 10770 │ │               /**
 10771 │ │                * Checks whether the window has a native window or not. Note that
 10772 │ │                * you can use gdk_window_ensure_native() if a native window is needed.
 10773 │ │                * @returns %TRUE if the @window has a native window, %FALSE otherwise.
 10774 │ │                */
 10775 │ │               has_native(): boolean;
 10776 │ │               /**
 10777 │ │                * For toplevel windows, withdraws them, so they will no longer be
 10778 │ │                * known to the window manager; for all windows, unmaps them, so
 10779 │ │                * they won’t be displayed. Normally done automatically as
 10780 │ │                * part of gtk_widget_hide().
 10781 │ │                */
 10782 │ │               hide(): void;
 10783 │ │               /**
 10784 │ │                * Asks to iconify (minimize) `window`. The window manager may choose
 10785 │ │                * to ignore the request, but normally will honor it. Using
 10786 │ │                * gtk_window_iconify() is preferred, if you have a #GtkWindow widget.
 10787 │ │                *
 10788 │ │                * This function only makes sense when `window` is a toplevel window.
 10789 │ │                */
 10790 │ │               iconify(): void;
 10791 │ │               /**
 10792 │ │                * Like gdk_window_shape_combine_region(), but the shape applies
 10793 │ │                * only to event handling. Mouse events which happen while
 10794 │ │                * the pointer position corresponds to an unset bit in the
 10795 │ │                * mask will be passed on the window below `window`.
 10796 │ │                *
 10797 │ │                * An input shape is typically used with RGBA windows.
 10798 │ │                * The alpha channel of the window defines which pixels are
 10799 │ │                * invisible and allows for nicely antialiased borders,
 10800 │ │                * and the input shape controls where the window is
 10801 │ │                * “clickable”.
 10802 │ │                *
 10803 │ │                * On the X11 platform, this requires version 1.1 of the
 10804 │ │                * shape extension.
 10805 │ │                *
 10806 │ │                * On the Win32 platform, this functionality is not present and the
 10807 │ │                * function does nothing.
 10808 │ │                * @param shape_region region of window to be non-transparent
 10809 │ │                * @param offset_x X position of @shape_region in @window coordinates
 10810 │ │                * @param offset_y Y position of @shape_region in @window coordinates
 10811 │ │                */
 10812 │ │               input_shape_combine_region(shape_region: cairo.Region, offset_x: number, offset_y: number): void;
 10813 │ │               /**
 10814 │ │                * Adds `region` to the update area for `window`. The update area is the
 10815 │ │                * region that needs to be redrawn, or “dirty region.” The call
 10816 │ │                * gdk_window_process_updates() sends one or more expose events to the
 10817 │ │                * window, which together cover the entire update area. An
 10818 │ │                * application would normally redraw the contents of `window` in
 10819 │ │                * response to those expose events.
 10820 │ │                *
 10821 │ │                * GDK will call gdk_window_process_all_updates() on your behalf
 10822 │ │                * whenever your program returns to the main loop and becomes idle, so
 10823 │ │                * normally there’s no need to do that manually, you just need to
 10824 │ │                * invalidate regions that you know should be redrawn.
 10825 │ │                *
 10826 │ │                * The `child_func` parameter controls whether the region of
 10827 │ │                * each child window that intersects `region` will also be invalidated.
 10828 │ │                * Only children for which `child_func` returns #TRUE will have the area
 10829 │ │                * invalidated.
 10830 │ │                * @param region a #cairo_region_t
 10831 │ │                * @param child_func function to use to decide if to     recurse to a child, %NULL means never recurse.
 10832 │ │                */
 10833 │ │               invalidate_maybe_recurse(region: cairo.Region, child_func?: WindowChildFunc | null): void;
 10834 │ │               /**
 10835 │ │                * A convenience wrapper around gdk_window_invalidate_region() which
 10836 │ │                * invalidates a rectangular region. See
 10837 │ │                * gdk_window_invalidate_region() for details.
 10838 │ │                * @param rect rectangle to invalidate or %NULL to invalidate the whole      window
 10839 │ │                * @param invalidate_children whether to also invalidate child windows
 10840 │ │                */
 10841 │ │               invalidate_rect(rect: Rectangle | null, invalidate_children: boolean): void;
 10842 │ │               /**
 10843 │ │                * Adds `region` to the update area for `window`. The update area is the
 10844 │ │                * region that needs to be redrawn, or “dirty region.” The call
 10845 │ │                * gdk_window_process_updates() sends one or more expose events to the
 10846 │ │                * window, which together cover the entire update area. An
 10847 │ │                * application would normally redraw the contents of `window` in
 10848 │ │                * response to those expose events.
 10849 │ │                *
 10850 │ │                * GDK will call gdk_window_process_all_updates() on your behalf
 10851 │ │                * whenever your program returns to the main loop and becomes idle, so
 10852 │ │                * normally there’s no need to do that manually, you just need to
 10853 │ │                * invalidate regions that you know should be redrawn.
 10854 │ │                *
 10855 │ │                * The `invalidate_children` parameter controls whether the region of
 10856 │ │                * each child window that intersects `region` will also be invalidated.
 10857 │ │                * If %FALSE, then the update area for child windows will remain
 10858 │ │                * unaffected. See gdk_window_invalidate_maybe_recurse if you need
 10859 │ │                * fine grained control over which children are invalidated.
 10860 │ │                * @param region a #cairo_region_t
 10861 │ │                * @param invalidate_children %TRUE to also invalidate child windows
 10862 │ │                */
 10863 │ │               invalidate_region(region: cairo.Region, invalidate_children: boolean): void;
 10864 │ │               /**
 10865 │ │                * Check to see if a window is destroyed..
 10866 │ │                * @returns %TRUE if the window is destroyed
 10867 │ │                */
 10868 │ │               is_destroyed(): boolean;
 10869 │ │               /**
 10870 │ │                * Determines whether or not the window is an input only window.
 10871 │ │                * @returns %TRUE if @window is input only
 10872 │ │                */
 10873 │ │               is_input_only(): boolean;
 10874 │ │               /**
 10875 │ │                * Determines whether or not the window is shaped.
 10876 │ │                * @returns %TRUE if @window is shaped
 10877 │ │                */
 10878 │ │               is_shaped(): boolean;
 10879 │ │               /**
 10880 │ │                * Check if the window and all ancestors of the window are
 10881 │ │                * mapped. (This is not necessarily "viewable" in the X sense, since
 10882 │ │                * we only check as far as we have GDK window parents, not to the root
 10883 │ │                * window.)
 10884 │ │                * @returns %TRUE if the window is viewable
 10885 │ │                */
 10886 │ │               is_viewable(): boolean;
 10887 │ │               /**
 10888 │ │                * Checks whether the window has been mapped (with gdk_window_show() or
 10889 │ │                * gdk_window_show_unraised()).
 10890 │ │                * @returns %TRUE if the window is mapped
 10891 │ │                */
 10892 │ │               is_visible(): boolean;
 10893 │ │               /**
 10894 │ │                * Lowers `window` to the bottom of the Z-order (stacking order), so that
 10895 │ │                * other windows with the same parent window appear above `window`.
 10896 │ │                * This is true whether or not the other windows are visible.
 10897 │ │                *
 10898 │ │                * If `window` is a toplevel, the window manager may choose to deny the
 10899 │ │                * request to move the window in the Z-order, gdk_window_lower() only
 10900 │ │                * requests the restack, does not guarantee it.
 10901 │ │                *
 10902 │ │                * Note that gdk_window_show() raises the window again, so don’t call this
 10903 │ │                * function before gdk_window_show(). (Try gdk_window_show_unraised().)
 10904 │ │                */
 10905 │ │               lower(): void;
 10906 │ │               /**
 10907 │ │                * If you call this during a paint (e.g. between gdk_window_begin_paint_region()
 10908 │ │                * and gdk_window_end_paint() then GDK will mark the current clip region of the
 10909 │ │                * window as being drawn. This is required when mixing GL rendering via
 10910 │ │                * gdk_cairo_draw_from_gl() and cairo rendering, as otherwise GDK has no way
 10911 │ │                * of knowing when something paints over the GL-drawn regions.
 10912 │ │                *
 10913 │ │                * This is typically called automatically by GTK+ and you don't need
 10914 │ │                * to care about this.
 10915 │ │                * @param cr a #cairo_t
 10916 │ │                */
 10917 │ │               mark_paint_from_clip(cr: cairo.Context): void;
 10918 │ │               /**
 10919 │ │                * Maximizes the window. If the window was already maximized, then
 10920 │ │                * this function does nothing.
 10921 │ │                *
 10922 │ │                * On X11, asks the window manager to maximize `window,` if the window
 10923 │ │                * manager supports this operation. Not all window managers support
 10924 │ │                * this, and some deliberately ignore it or don’t have a concept of
 10925 │ │                * “maximized”; so you can’t rely on the maximization actually
 10926 │ │                * happening. But it will happen with most standard window managers,
 10927 │ │                * and GDK makes a best effort to get it to happen.
 10928 │ │                *
 10929 │ │                * On Windows, reliably maximizes the window.
 10930 │ │                */
 10931 │ │               maximize(): void;
 10932 │ │               /**
 10933 │ │                * Merges the input shape masks for any child windows into the
 10934 │ │                * input shape mask for `window`. i.e. the union of all input masks
 10935 │ │                * for `window` and its children will become the new input mask
 10936 │ │                * for `window`. See gdk_window_input_shape_combine_region().
 10937 │ │                *
 10938 │ │                * This function is distinct from gdk_window_set_child_input_shapes()
 10939 │ │                * because it includes `window’`s input shape mask in the set of
 10940 │ │                * shapes to be merged.
 10941 │ │                */
 10942 │ │               merge_child_input_shapes(): void;
 10943 │ │               /**
 10944 │ │                * Merges the shape masks for any child windows into the
 10945 │ │                * shape mask for `window`. i.e. the union of all masks
 10946 │ │                * for `window` and its children will become the new mask
 10947 │ │                * for `window`. See gdk_window_shape_combine_region().
 10948 │ │                *
 10949 │ │                * This function is distinct from gdk_window_set_child_shapes()
 10950 │ │                * because it includes `window’`s shape mask in the set of shapes to
 10951 │ │                * be merged.
 10952 │ │                */
 10953 │ │               merge_child_shapes(): void;
 10954 │ │               /**
 10955 │ │                * Repositions a window relative to its parent window.
 10956 │ │                * For toplevel windows, window managers may ignore or modify the move;
 10957 │ │                * you should probably use gtk_window_move() on a #GtkWindow widget
 10958 │ │                * anyway, instead of using GDK functions. For child windows,
 10959 │ │                * the move will reliably succeed.
 10960 │ │                *
 10961 │ │                * If you’re also planning to resize the window, use gdk_window_move_resize()
 10962 │ │                * to both move and resize simultaneously, for a nicer visual effect.
 10963 │ │                * @param x X coordinate relative to window’s parent
 10964 │ │                * @param y Y coordinate relative to window’s parent
 10965 │ │                */
 10966 │ │               move(x: number, y: number): void;
 10967 │ │               /**
 10968 │ │                * Move the part of `window` indicated by `region` by `dy` pixels in the Y
 10969 │ │                * direction and `dx` pixels in the X direction. The portions of `region`
 10970 │ │                * that not covered by the new position of `region` are invalidated.
 10971 │ │                *
 10972 │ │                * Child windows are not moved.
 10973 │ │                * @param region The #cairo_region_t to move
 10974 │ │                * @param dx Amount to move in the X direction
 10975 │ │                * @param dy Amount to move in the Y direction
 10976 │ │                */
 10977 │ │               move_region(region: cairo.Region, dx: number, dy: number): void;
 10978 │ │               /**
 10979 │ │                * Equivalent to calling gdk_window_move() and gdk_window_resize(),
 10980 │ │                * except that both operations are performed at once, avoiding strange
 10981 │ │                * visual effects. (i.e. the user may be able to see the window first
 10982 │ │                * move, then resize, if you don’t use gdk_window_move_resize().)
 10983 │ │                * @param x new X position relative to window’s parent
 10984 │ │                * @param y new Y position relative to window’s parent
 10985 │ │                * @param width new width
 10986 │ │                * @param height new height
 10987 │ │                */
 10988 │ │               move_resize(x: number, y: number, width: number, height: number): void;
 10989 │ │               /**
 10990 │ │                * Moves `window` to `rect,` aligning their anchor points.
 10991 │ │                *
 10992 │ │                * `rect` is relative to the top-left corner of the window that `window` is
 10993 │ │                * transient for. `rect_anchor` and `window_anchor` determine anchor points on
 10994 │ │                * `rect` and `window` to pin together. `rect'`s anchor point can optionally be
 10995 │ │                * offset by `rect_anchor_dx` and `rect_anchor_dy,` which is equivalent to
 10996 │ │                * offsetting the position of `window`.
 10997 │ │                *
 10998 │ │                * `anchor_hints` determines how `window` will be moved if the anchor points cause
 10999 │ │                * it to move off-screen. For example, %GDK_ANCHOR_FLIP_X will replace
 11000 │ │                * %GDK_GRAVITY_NORTH_WEST with %GDK_GRAVITY_NORTH_EAST and vice versa if
 11001 │ │                * `window` extends beyond the left or right edges of the monitor.
 11002 │ │                *
 11003 │ │                * Connect to the #GdkWindow::moved-to-rect signal to find out how it was
 11004 │ │                * actually positioned.
 11005 │ │                * @param rect the destination #GdkRectangle to align @window with
 11006 │ │                * @param rect_anchor the point on @rect to align with @window's anchor point
 11007 │ │                * @param window_anchor the point on @window to align with @rect's anchor point
 11008 │ │                * @param anchor_hints positioning hints to use when limited on space
 11009 │ │                * @param rect_anchor_dx horizontal offset to shift @window, i.e. @rect's anchor                  point
 11010 │ │                * @param rect_anchor_dy vertical offset to shift @window, i.e. @rect's anchor point
 11011 │ │                */
 11012 │ │               move_to_rect(
 11013 │ │                   rect: Rectangle,
 11014 │ │                   rect_anchor: Gravity | null,
 11015 │ │                   window_anchor: Gravity | null,
 11016 │ │                   anchor_hints: AnchorHints | null,
 11017 │ │                   rect_anchor_dx: number,
 11018 │ │                   rect_anchor_dy: number,
 11019 │ │               ): void;
 11020 │ │               /**
 11021 │ │                * Like gdk_window_get_children(), but does not copy the list of
 11022 │ │                * children, so the list does not need to be freed.
 11023 │ │                * @returns a reference to the list of child windows in @window
 11024 │ │                */
 11025 │ │               peek_children(): Window[];
 11026 │ │               /**
 11027 │ │                * Sends one or more expose events to `window`. The areas in each
 11028 │ │                * expose event will cover the entire update area for the window (see
 11029 │ │                * gdk_window_invalidate_region() for details). Normally GDK calls
 11030 │ │                * gdk_window_process_all_updates() on your behalf, so there’s no
 11031 │ │                * need to call this function unless you want to force expose events
 11032 │ │                * to be delivered immediately and synchronously (vs. the usual
 11033 │ │                * case, where GDK delivers them in an idle handler). Occasionally
 11034 │ │                * this is useful to produce nicer scrolling behavior, for example.
 11035 │ │                * @param update_children whether to also process updates for child windows
 11036 │ │                */
 11037 │ │               process_updates(update_children: boolean): void;
 11038 │ │               /**
 11039 │ │                * Raises `window` to the top of the Z-order (stacking order), so that
 11040 │ │                * other windows with the same parent window appear below `window`.
 11041 │ │                * This is true whether or not the windows are visible.
 11042 │ │                *
 11043 │ │                * If `window` is a toplevel, the window manager may choose to deny the
 11044 │ │                * request to move the window in the Z-order, gdk_window_raise() only
 11045 │ │                * requests the restack, does not guarantee it.
 11046 │ │                */
 11047 │ │               raise(): void;
 11048 │ │               /**
 11049 │ │                * Registers a window as a potential drop destination.
 11050 │ │                */
 11051 │ │               register_dnd(): void;
 11052 │ │               /**
 11053 │ │                * Reparents `window` into the given `new_parent`. The window being
 11054 │ │                * reparented will be unmapped as a side effect.
 11055 │ │                * @param new_parent new parent to move @window into
 11056 │ │                * @param x X location inside the new parent
 11057 │ │                * @param y Y location inside the new parent
 11058 │ │                */
 11059 │ │               reparent(new_parent: Window, x: number, y: number): void;
 11060 │ │               /**
 11061 │ │                * Resizes `window;` for toplevel windows, asks the window manager to resize
 11062 │ │                * the window. The window manager may not allow the resize. When using GTK+,
 11063 │ │                * use gtk_window_resize() instead of this low-level GDK function.
 11064 │ │                *
 11065 │ │                * Windows may not be resized below 1x1.
 11066 │ │                *
 11067 │ │                * If you’re also planning to move the window, use gdk_window_move_resize()
 11068 │ │                * to both move and resize simultaneously, for a nicer visual effect.
 11069 │ │                * @param width new width of the window
 11070 │ │                * @param height new height of the window
 11071 │ │                */
 11072 │ │               resize(width: number, height: number): void;
 11073 │ │               /**
 11074 │ │                * Changes the position of  `window` in the Z-order (stacking order), so that
 11075 │ │                * it is above `sibling` (if `above` is %TRUE) or below `sibling` (if `above` is
 11076 │ │                * %FALSE).
 11077 │ │                *
 11078 │ │                * If `sibling` is %NULL, then this either raises (if `above` is %TRUE) or
 11079 │ │                * lowers the window.
 11080 │ │                *
 11081 │ │                * If `window` is a toplevel, the window manager may choose to deny the
 11082 │ │                * request to move the window in the Z-order, gdk_window_restack() only
 11083 │ │                * requests the restack, does not guarantee it.
 11084 │ │                * @param sibling a #GdkWindow that is a sibling of @window, or %NULL
 11085 │ │                * @param above a boolean
 11086 │ │                */
 11087 │ │               restack(sibling: Window | null, above: boolean): void;
 11088 │ │               /**
 11089 │ │                * Scroll the contents of `window,` both pixels and children, by the
 11090 │ │                * given amount. `window` itself does not move. Portions of the window
 11091 │ │                * that the scroll operation brings in from offscreen areas are
 11092 │ │                * invalidated. The invalidated region may be bigger than what would
 11093 │ │                * strictly be necessary.
 11094 │ │                *
 11095 │ │                * For X11, a minimum area will be invalidated if the window has no
 11096 │ │                * subwindows, or if the edges of the window’s parent do not extend
 11097 │ │                * beyond the edges of the window. In other cases, a multi-step process
 11098 │ │                * is used to scroll the window which may produce temporary visual
 11099 │ │                * artifacts and unnecessary invalidations.
 11100 │ │                * @param dx Amount to scroll in the X direction
 11101 │ │                * @param dy Amount to scroll in the Y direction
 11102 │ │                */
 11103 │ │               scroll(dx: number, dy: number): void;
 11104 │ │               /**
 11105 │ │                * Setting `accept_focus` to %FALSE hints the desktop environment that the
 11106 │ │                * window doesn’t want to receive input focus.
 11107 │ │                *
 11108 │ │                * On X, it is the responsibility of the window manager to interpret this
 11109 │ │                * hint. ICCCM-compliant window manager usually respect it.
 11110 │ │                * @param accept_focus %TRUE if the window should receive input focus
 11111 │ │                */
 11112 │ │               set_accept_focus(accept_focus: boolean): void;
 11113 │ │               /**
 11114 │ │                * Sets the background color of `window`.
 11115 │ │                *
 11116 │ │                * However, when using GTK+, influence the background of a widget
 11117 │ │                * using a style class or CSS — if you’re an application — or with
 11118 │ │                * gtk_style_context_set_background() — if you're implementing a
 11119 │ │                * custom widget.
 11120 │ │                * @param color a #GdkColor
 11121 │ │                */
 11122 │ │               set_background(color: Color): void;
 11123 │ │               /**
 11124 │ │                * Sets the background of `window`.
 11125 │ │                *
 11126 │ │                * A background of %NULL means that the window won't have any background. On the
 11127 │ │                * X11 backend it's also possible to inherit the background from the parent
 11128 │ │                * window using gdk_x11_get_parent_relative_pattern().
 11129 │ │                *
 11130 │ │                * The windowing system will normally fill a window with its background
 11131 │ │                * when the window is obscured then exposed.
 11132 │ │                * @param pattern a pattern to use, or %NULL
 11133 │ │                */
 11134 │ │               set_background_pattern(pattern?: cairo.Pattern | null): void;
 11135 │ │               /**
 11136 │ │                * Sets the background color of `window`.
 11137 │ │                *
 11138 │ │                * See also gdk_window_set_background_pattern().
 11139 │ │                * @param rgba a #GdkRGBA color
 11140 │ │                */
 11141 │ │               set_background_rgba(rgba: RGBA): void;
 11142 │ │               /**
 11143 │ │                * Sets the input shape mask of `window` to the union of input shape masks
 11144 │ │                * for all children of `window,` ignoring the input shape mask of `window`
 11145 │ │                * itself. Contrast with gdk_window_merge_child_input_shapes() which includes
 11146 │ │                * the input shape mask of `window` in the masks to be merged.
 11147 │ │                */
 11148 │ │               set_child_input_shapes(): void;
 11149 │ │               /**
 11150 │ │                * Sets the shape mask of `window` to the union of shape masks
 11151 │ │                * for all children of `window,` ignoring the shape mask of `window`
 11152 │ │                * itself. Contrast with gdk_window_merge_child_shapes() which includes
 11153 │ │                * the shape mask of `window` in the masks to be merged.
 11154 │ │                */
 11155 │ │               set_child_shapes(): void;
 11156 │ │               /**
 11157 │ │                * Sets a #GdkWindow as composited, or unsets it. Composited
 11158 │ │                * windows do not automatically have their contents drawn to
 11159 │ │                * the screen. Drawing is redirected to an offscreen buffer
 11160 │ │                * and an expose event is emitted on the parent of the composited
 11161 │ │                * window. It is the responsibility of the parent’s expose handler
 11162 │ │                * to manually merge the off-screen content onto the screen in
 11163 │ │                * whatever way it sees fit.
 11164 │ │                *
 11165 │ │                * It only makes sense for child windows to be composited; see
 11166 │ │                * gdk_window_set_opacity() if you need translucent toplevel
 11167 │ │                * windows.
 11168 │ │                *
 11169 │ │                * An additional effect of this call is that the area of this
 11170 │ │                * window is no longer clipped from regions marked for
 11171 │ │                * invalidation on its parent. Draws done on the parent
 11172 │ │                * window are also no longer clipped by the child.
 11173 │ │                *
 11174 │ │                * This call is only supported on some systems (currently,
 11175 │ │                * only X11 with new enough Xcomposite and Xdamage extensions).
 11176 │ │                * You must call gdk_display_supports_composite() to check if
 11177 │ │                * setting a window as composited is supported before
 11178 │ │                * attempting to do so.
 11179 │ │                * @param composited %TRUE to set the window as composited
 11180 │ │                */
 11181 │ │               set_composited(composited: boolean): void;
 11182 │ │               /**
 11183 │ │                * Sets the default mouse pointer for a #GdkWindow.
 11184 │ │                *
 11185 │ │                * Note that `cursor` must be for the same display as `window`.
 11186 │ │                *
 11187 │ │                * Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to
 11188 │ │                * create the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR.
 11189 │ │                * Passing %NULL for the `cursor` argument to gdk_window_set_cursor() means
 11190 │ │                * that `window` will use the cursor of its parent window. Most windows
 11191 │ │                * should use this default.
 11192 │ │                * @param cursor a cursor
 11193 │ │                */
 11194 │ │               set_cursor(cursor?: Cursor | null): void;
 11195 │ │               /**
 11196 │ │                * “Decorations” are the features the window manager adds to a toplevel #GdkWindow.
 11197 │ │                * This function sets the traditional Motif window manager hints that tell the
 11198 │ │                * window manager which decorations you would like your window to have.
 11199 │ │                * Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
 11200 │ │                * using the GDK function directly.
 11201 │ │                *
 11202 │ │                * The `decorations` argument is the logical OR of the fields in
 11203 │ │                * the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
 11204 │ │                * mask, the other bits indicate which decorations should be turned off.
 11205 │ │                * If #GDK_DECOR_ALL is not included, then the other bits indicate
 11206 │ │                * which decorations should be turned on.
 11207 │ │                *
 11208 │ │                * Most window managers honor a decorations hint of 0 to disable all decorations,
 11209 │ │                * but very few honor all possible combinations of bits.
 11210 │ │                * @param decorations decoration hint mask
 11211 │ │                */
 11212 │ │               set_decorations(decorations: WMDecoration | null): void;
 11213 │ │               /**
 11214 │ │                * Sets a specific #GdkCursor for a given device when it gets inside `window`.
 11215 │ │                * Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
 11216 │ │                * the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
 11217 │ │                * %NULL for the `cursor` argument to gdk_window_set_cursor() means that
 11218 │ │                * `window` will use the cursor of its parent window. Most windows should
 11219 │ │                * use this default.
 11220 │ │                * @param device a master, pointer #GdkDevice
 11221 │ │                * @param cursor a #GdkCursor
 11222 │ │                */
 11223 │ │               set_device_cursor(device: Device, cursor: Cursor): void;
 11224 │ │               /**
 11225 │ │                * Sets the event mask for a given device (Normally a floating device, not
 11226 │ │                * attached to any visible pointer) to `window`. For example, an event mask
 11227 │ │                * including #GDK_BUTTON_PRESS_MASK means the window should report button
 11228 │ │                * press events. The event mask is the bitwise OR of values from the
 11229 │ │                * #GdkEventMask enumeration.
 11230 │ │                *
 11231 │ │                * See the [input handling overview][event-masks] for details.
 11232 │ │                * @param device #GdkDevice to enable events for.
 11233 │ │                * @param event_mask event mask for @window
 11234 │ │                */
 11235 │ │               set_device_events(device: Device, event_mask: EventMask | null): void;
 11236 │ │               /**
 11237 │ │                * Determines whether or not extra unprocessed motion events in
 11238 │ │                * the event queue can be discarded. If %TRUE only the most recent
 11239 │ │                * event will be delivered.
 11240 │ │                *
 11241 │ │                * Some types of applications, e.g. paint programs, need to see all
 11242 │ │                * motion events and will benefit from turning off event compression.
 11243 │ │                *
 11244 │ │                * By default, event compression is enabled.
 11245 │ │                * @param event_compression %TRUE if motion events should be compressed
 11246 │ │                */
 11247 │ │               set_event_compression(event_compression: boolean): void;
 11248 │ │               /**
 11249 │ │                * The event mask for a window determines which events will be reported
 11250 │ │                * for that window from all master input devices. For example, an event mask
 11251 │ │                * including #GDK_BUTTON_PRESS_MASK means the window should report button
 11252 │ │                * press events. The event mask is the bitwise OR of values from the
 11253 │ │                * #GdkEventMask enumeration.
 11254 │ │                *
 11255 │ │                * See the [input handling overview][event-masks] for details.
 11256 │ │                * @param event_mask event mask for @window
 11257 │ │                */
 11258 │ │               set_events(event_mask: EventMask | null): void;
 11259 │ │               /**
 11260 │ │                * Setting `focus_on_map` to %FALSE hints the desktop environment that the
 11261 │ │                * window doesn’t want to receive input focus when it is mapped.
 11262 │ │                * focus_on_map should be turned off for windows that aren’t triggered
 11263 │ │                * interactively (such as popups from network activity).
 11264 │ │                *
 11265 │ │                * On X, it is the responsibility of the window manager to interpret
 11266 │ │                * this hint. Window managers following the freedesktop.org window
 11267 │ │                * manager extension specification should respect it.
 11268 │ │                * @param focus_on_map %TRUE if the window should receive input focus when mapped
 11269 │ │                */
 11270 │ │               set_focus_on_map(focus_on_map: boolean): void;
 11271 │ │               /**
 11272 │ │                * Specifies whether the `window` should span over all monitors (in a multi-head
 11273 │ │                * setup) or only the current monitor when in fullscreen mode.
 11274 │ │                *
 11275 │ │                * The `mode` argument is from the #GdkFullscreenMode enumeration.
 11276 │ │                * If #GDK_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen `window` will
 11277 │ │                * span over all monitors from the #GdkScreen.
 11278 │ │                *
 11279 │ │                * On X11, searches through the list of monitors from the #GdkScreen the ones
 11280 │ │                * which delimit the 4 edges of the entire #GdkScreen and will ask the window
 11281 │ │                * manager to span the `window` over these monitors.
 11282 │ │                *
 11283 │ │                * If the XINERAMA extension is not available or not usable, this function
 11284 │ │                * has no effect.
 11285 │ │                *
 11286 │ │                * Not all window managers support this, so you can’t rely on the fullscreen
 11287 │ │                * window to span over the multiple monitors when #GDK_FULLSCREEN_ON_ALL_MONITORS
 11288 │ │                * is specified.
 11289 │ │                * @param mode fullscreen mode
 11290 │ │                */
 11291 │ │               set_fullscreen_mode(mode: FullscreenMode | null): void;
 11292 │ │               /**
 11293 │ │                * Sets hints about the window management functions to make available
 11294 │ │                * via buttons on the window frame.
 11295 │ │                *
 11296 │ │                * On the X backend, this function sets the traditional Motif window
 11297 │ │                * manager hint for this purpose. However, few window managers do
 11298 │ │                * anything reliable or interesting with this hint. Many ignore it
 11299 │ │                * entirely.
 11300 │ │                *
 11301 │ │                * The `functions` argument is the logical OR of values from the
 11302 │ │                * #GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
 11303 │ │                * then the other bits indicate which functions to disable; if
 11304 │ │                * it doesn’t include #GDK_FUNC_ALL, it indicates which functions to
 11305 │ │                * enable.
 11306 │ │                * @param functions bitmask of operations to allow on @window
 11307 │ │                */
 11308 │ │               set_functions(functions: WMFunction | null): void;
 11309 │ │               /**
 11310 │ │                * Sets the geometry hints for `window`. Hints flagged in `geom_mask`
 11311 │ │                * are set, hints not flagged in `geom_mask` are unset.
 11312 │ │                * To unset all hints, use a `geom_mask` of 0 and a `geometry` of %NULL.
 11313 │ │                *
 11314 │ │                * This function provides hints to the windowing system about
 11315 │ │                * acceptable sizes for a toplevel window. The purpose of
 11316 │ │                * this is to constrain user resizing, but the windowing system
 11317 │ │                * will typically  (but is not required to) also constrain the
 11318 │ │                * current size of the window to the provided values and
 11319 │ │                * constrain programatic resizing via gdk_window_resize() or
 11320 │ │                * gdk_window_move_resize().
 11321 │ │                *
 11322 │ │                * Note that on X11, this effect has no effect on windows
 11323 │ │                * of type %GDK_WINDOW_TEMP or windows where override redirect
 11324 │ │                * has been turned on via gdk_window_set_override_redirect()
 11325 │ │                * since these windows are not resizable by the user.
 11326 │ │                *
 11327 │ │                * Since you can’t count on the windowing system doing the
 11328 │ │                * constraints for programmatic resizes, you should generally
 11329 │ │                * call gdk_window_constrain_size() yourself to determine
 11330 │ │                * appropriate sizes.
 11331 │ │                * @param geometry geometry hints
 11332 │ │                * @param geom_mask bitmask indicating fields of @geometry to pay attention to
 11333 │ │                */
 11334 │ │               set_geometry_hints(geometry: Geometry, geom_mask: WindowHints | null): void;
 11335 │ │               /**
 11336 │ │                * Sets the group leader window for `window`. By default,
 11337 │ │                * GDK sets the group leader for all toplevel windows
 11338 │ │                * to a global window implicitly created by GDK. With this function
 11339 │ │                * you can override this default.
 11340 │ │                *
 11341 │ │                * The group leader window allows the window manager to distinguish
 11342 │ │                * all windows that belong to a single application. It may for example
 11343 │ │                * allow users to minimize/unminimize all windows belonging to an
 11344 │ │                * application at once. You should only set a non-default group window
 11345 │ │                * if your application pretends to be multiple applications.
 11346 │ │                * @param leader group leader window, or %NULL to restore the default group leader window
 11347 │ │                */
 11348 │ │               set_group(leader?: Window | null): void;
 11349 │ │               /**
 11350 │ │                * Sets a list of icons for the window. One of these will be used
 11351 │ │                * to represent the window when it has been iconified. The icon is
 11352 │ │                * usually shown in an icon box or some sort of task bar. Which icon
 11353 │ │                * size is shown depends on the window manager. The window manager
 11354 │ │                * can scale the icon  but setting several size icons can give better
 11355 │ │                * image quality since the window manager may only need to scale the
 11356 │ │                * icon by a small amount or not at all.
 11357 │ │                *
 11358 │ │                * Note that some platforms don't support window icons.
 11359 │ │                * @param pixbufs A list of pixbufs, of different sizes.
 11360 │ │                */
 11361 │ │               set_icon_list(pixbufs: GdkPixbuf.Pixbuf[]): void;
 11362 │ │               /**
 11363 │ │                * Windows may have a name used while minimized, distinct from the
 11364 │ │                * name they display in their titlebar. Most of the time this is a bad
 11365 │ │                * idea from a user interface standpoint. But you can set such a name
 11366 │ │                * with this function, if you like.
 11367 │ │                *
 11368 │ │                * After calling this with a non-%NULL `name,` calls to gdk_window_set_title()
 11369 │ │                * will not update the icon title.
 11370 │ │                *
 11371 │ │                * Using %NULL for `name` unsets the icon title; further calls to
 11372 │ │                * gdk_window_set_title() will again update the icon title as well.
 11373 │ │                *
 11374 │ │                * Note that some platforms don't support window icons.
 11375 │ │                * @param name name of window while iconified (minimized)
 11376 │ │                */
 11377 │ │               set_icon_name(name?: string | null): void;
 11378 │ │               /**
 11379 │ │                * Set if `window` must be kept above other windows. If the
 11380 │ │                * window was already above, then this function does nothing.
 11381 │ │                *
 11382 │ │                * On X11, asks the window manager to keep `window` above, if the window
 11383 │ │                * manager supports this operation. Not all window managers support
 11384 │ │                * this, and some deliberately ignore it or don’t have a concept of
 11385 │ │                * “keep above”; so you can’t rely on the window being kept above.
 11386 │ │                * But it will happen with most standard window managers,
 11387 │ │                * and GDK makes a best effort to get it to happen.
 11388 │ │                * @param setting whether to keep @window above other windows
 11389 │ │                */
 11390 │ │               set_keep_above(setting: boolean): void;
 11391 │ │               /**
 11392 │ │                * Set if `window` must be kept below other windows. If the
 11393 │ │                * window was already below, then this function does nothing.
 11394 │ │                *
 11395 │ │                * On X11, asks the window manager to keep `window` below, if the window
 11396 │ │                * manager supports this operation. Not all window managers support
 11397 │ │                * this, and some deliberately ignore it or don’t have a concept of
 11398 │ │                * “keep below”; so you can’t rely on the window being kept below.
 11399 │ │                * But it will happen with most standard window managers,
 11400 │ │                * and GDK makes a best effort to get it to happen.
 11401 │ │                * @param setting whether to keep @window below other windows
 11402 │ │                */
 11403 │ │               set_keep_below(setting: boolean): void;
 11404 │ │               /**
 11405 │ │                * The application can use this hint to tell the window manager
 11406 │ │                * that a certain window has modal behaviour. The window manager
 11407 │ │                * can use this information to handle modal windows in a special
 11408 │ │                * way.
 11409 │ │                *
 11410 │ │                * You should only use this on windows for which you have
 11411 │ │                * previously called gdk_window_set_transient_for()
 11412 │ │                * @param modal %TRUE if the window is modal, %FALSE otherwise.
 11413 │ │                */
 11414 │ │               set_modal_hint(modal: boolean): void;
 11415 │ │               /**
 11416 │ │                * Set `window` to render as partially transparent,
 11417 │ │                * with opacity 0 being fully transparent and 1 fully opaque. (Values
 11418 │ │                * of the opacity parameter are clamped to the [0,1] range.)
 11419 │ │                *
 11420 │ │                * For toplevel windows this depends on support from the windowing system
 11421 │ │                * that may not always be there. For instance, On X11, this works only on
 11422 │ │                * X screens with a compositing manager running. On Wayland, there is no
 11423 │ │                * per-window opacity value that the compositor would apply. Instead, use
 11424 │ │                * `gdk_window_set_opaque_region (window, NULL)` to tell the compositor
 11425 │ │                * that the entire window is (potentially) non-opaque, and draw your content
 11426 │ │                * with alpha, or use gtk_widget_set_opacity() to set an overall opacity
 11427 │ │                * for your widgets.
 11428 │ │                *
 11429 │ │                * For child windows this function only works for non-native windows.
 11430 │ │                *
 11431 │ │                * For setting up per-pixel alpha topelevels, see gdk_screen_get_rgba_visual(),
 11432 │ │                * and for non-toplevels, see gdk_window_set_composited().
 11433 │ │                *
 11434 │ │                * Support for non-toplevel windows was added in 3.8.
 11435 │ │                * @param opacity opacity
 11436 │ │                */
 11437 │ │               set_opacity(opacity: number): void;
 11438 │ │               /**
 11439 │ │                * For optimisation purposes, compositing window managers may
 11440 │ │                * like to not draw obscured regions of windows, or turn off blending
 11441 │ │                * during for these regions. With RGB windows with no transparency,
 11442 │ │                * this is just the shape of the window, but with ARGB32 windows, the
 11443 │ │                * compositor does not know what regions of the window are transparent
 11444 │ │                * or not.
 11445 │ │                *
 11446 │ │                * This function only works for toplevel windows.
 11447 │ │                *
 11448 │ │                * GTK+ will update this property automatically if
 11449 │ │                * the `window` background is opaque, as we know where the opaque regions
 11450 │ │                * are. If your window background is not opaque, please update this
 11451 │ │                * property in your #GtkWidget::style-updated handler.
 11452 │ │                * @param region a region, or %NULL
 11453 │ │                */
 11454 │ │               set_opaque_region(region?: cairo.Region | null): void;
 11455 │ │               /**
 11456 │ │                * An override redirect window is not under the control of the window manager.
 11457 │ │                * This means it won’t have a titlebar, won’t be minimizable, etc. - it will
 11458 │ │                * be entirely under the control of the application. The window manager
 11459 │ │                * can’t see the override redirect window at all.
 11460 │ │                *
 11461 │ │                * Override redirect should only be used for short-lived temporary
 11462 │ │                * windows, such as popup menus. #GtkMenu uses an override redirect
 11463 │ │                * window in its implementation, for example.
 11464 │ │                * @param override_redirect %TRUE if window should be override redirect
 11465 │ │                */
 11466 │ │               set_override_redirect(override_redirect: boolean): void;
 11467 │ │               /**
 11468 │ │                * Sets whether input to the window is passed through to the window
 11469 │ │                * below.
 11470 │ │                *
 11471 │ │                * The default value of this is %FALSE, which means that pointer
 11472 │ │                * events that happen inside the window are send first to the window,
 11473 │ │                * but if the event is not selected by the event mask then the event
 11474 │ │                * is sent to the parent window, and so on up the hierarchy.
 11475 │ │                *
 11476 │ │                * If `pass_through` is %TRUE then such pointer events happen as if the
 11477 │ │                * window wasn't there at all, and thus will be sent first to any
 11478 │ │                * windows below `window`. This is useful if the window is used in a
 11479 │ │                * transparent fashion. In the terminology of the web this would be called
 11480 │ │                * "pointer-events: none".
 11481 │ │                *
 11482 │ │                * Note that a window with `pass_through` %TRUE can still have a subwindow
 11483 │ │                * without pass through, so you can get events on a subset of a window. And in
 11484 │ │                * that cases you would get the in-between related events such as the pointer
 11485 │ │                * enter/leave events on its way to the destination window.
 11486 │ │                * @param pass_through a boolean
 11487 │ │                */
 11488 │ │               set_pass_through(pass_through: boolean): void;
 11489 │ │               /**
 11490 │ │                * When using GTK+, typically you should use gtk_window_set_role() instead
 11491 │ │                * of this low-level function.
 11492 │ │                *
 11493 │ │                * The window manager and session manager use a window’s role to
 11494 │ │                * distinguish it from other kinds of window in the same application.
 11495 │ │                * When an application is restarted after being saved in a previous
 11496 │ │                * session, all windows with the same title and role are treated as
 11497 │ │                * interchangeable.  So if you have two windows with the same title
 11498 │ │                * that should be distinguished for session management purposes, you
 11499 │ │                * should set the role on those windows. It doesn’t matter what string
 11500 │ │                * you use for the role, as long as you have a different role for each
 11501 │ │                * non-interchangeable kind of window.
 11502 │ │                * @param role a string indicating its role
 11503 │ │                */
 11504 │ │               set_role(role: string): void;
 11505 │ │               /**
 11506 │ │                * Newer GTK+ windows using client-side decorations use extra geometry
 11507 │ │                * around their frames for effects like shadows and invisible borders.
 11508 │ │                * Window managers that want to maximize windows or snap to edges need
 11509 │ │                * to know where the extents of the actual frame lie, so that users
 11510 │ │                * don’t feel like windows are snapping against random invisible edges.
 11511 │ │                *
 11512 │ │                * Note that this property is automatically updated by GTK+, so this
 11513 │ │                * function should only be used by applications which do not use GTK+
 11514 │ │                * to create toplevel windows.
 11515 │ │                * @param left The left extent
 11516 │ │                * @param right The right extent
 11517 │ │                * @param top The top extent
 11518 │ │                * @param bottom The bottom extent
 11519 │ │                */
 11520 │ │               set_shadow_width(left: number, right: number, top: number, bottom: number): void;
 11521 │ │               /**
 11522 │ │                * Toggles whether a window should appear in a pager (workspace
 11523 │ │                * switcher, or other desktop utility program that displays a small
 11524 │ │                * thumbnail representation of the windows on the desktop). If a
 11525 │ │                * window’s semantic type as specified with gdk_window_set_type_hint()
 11526 │ │                * already fully describes the window, this function should
 11527 │ │                * not be called in addition, instead you should
 11528 │ │                * allow the window to be treated according to standard policy for
 11529 │ │                * its semantic type.
 11530 │ │                * @param skips_pager %TRUE to skip the pager
 11531 │ │                */
 11532 │ │               set_skip_pager_hint(skips_pager: boolean): void;
 11533 │ │               /**
 11534 │ │                * Toggles whether a window should appear in a task list or window
 11535 │ │                * list. If a window’s semantic type as specified with
 11536 │ │                * gdk_window_set_type_hint() already fully describes the window, this
 11537 │ │                * function should not be called in addition,
 11538 │ │                * instead you should allow the window to be treated according to
 11539 │ │                * standard policy for its semantic type.
 11540 │ │                * @param skips_taskbar %TRUE to skip the taskbar
 11541 │ │                */
 11542 │ │               set_skip_taskbar_hint(skips_taskbar: boolean): void;
 11543 │ │               /**
 11544 │ │                * Sets the event mask for any floating device (i.e. not attached to any
 11545 │ │                * visible pointer) that has the source defined as `source`. This event
 11546 │ │                * mask will be applied both to currently existing, newly added devices
 11547 │ │                * after this call, and devices being attached/detached.
 11548 │ │                * @param source a #GdkInputSource to define the source class.
 11549 │ │                * @param event_mask event mask for @window
 11550 │ │                */
 11551 │ │               set_source_events(source: InputSource | null, event_mask: EventMask | null): void;
 11552 │ │               /**
 11553 │ │                * When using GTK+, typically you should use gtk_window_set_startup_id()
 11554 │ │                * instead of this low-level function.
 11555 │ │                * @param startup_id a string with startup-notification identifier
 11556 │ │                */
 11557 │ │               set_startup_id(startup_id: string): void;
 11558 │ │               /**
 11559 │ │                * Used to set the bit gravity of the given window to static, and flag
 11560 │ │                * it so all children get static subwindow gravity. This is used if you
 11561 │ │                * are implementing scary features that involve deep knowledge of the
 11562 │ │                * windowing system. Don’t worry about it.
 11563 │ │                * @param use_static %TRUE to turn on static gravity
 11564 │ │                * @returns %FALSE
 11565 │ │                */
 11566 │ │               set_static_gravities(use_static: boolean): boolean;
 11567 │ │               /**
 11568 │ │                * This function will enable multidevice features in `window`.
 11569 │ │                *
 11570 │ │                * Multidevice aware windows will need to handle properly multiple,
 11571 │ │                * per device enter/leave events, device grabs and grab ownerships.
 11572 │ │                * @param support_multidevice %TRUE to enable multidevice support in @window.
 11573 │ │                */
 11574 │ │               set_support_multidevice(support_multidevice: boolean): void;
 11575 │ │               /**
 11576 │ │                * Sets the title of a toplevel window, to be displayed in the titlebar.
 11577 │ │                * If you haven’t explicitly set the icon name for the window
 11578 │ │                * (using gdk_window_set_icon_name()), the icon name will be set to
 11579 │ │                * `title` as well. `title` must be in UTF-8 encoding (as with all
 11580 │ │                * user-readable strings in GDK/GTK+). `title` may not be %NULL.
 11581 │ │                * @param title title of @window
 11582 │ │                */
 11583 │ │               set_title(title: string): void;
 11584 │ │               /**
 11585 │ │                * Indicates to the window manager that `window` is a transient dialog
 11586 │ │                * associated with the application window `parent`. This allows the
 11587 │ │                * window manager to do things like center `window` on `parent` and
 11588 │ │                * keep `window` above `parent`.
 11589 │ │                *
 11590 │ │                * See gtk_window_set_transient_for() if you’re using #GtkWindow or
 11591 │ │                * #GtkDialog.
 11592 │ │                * @param parent another toplevel #GdkWindow
 11593 │ │                */
 11594 │ │               set_transient_for(parent: Window): void;
 11595 │ │               /**
 11596 │ │                * The application can use this call to provide a hint to the window
 11597 │ │                * manager about the functionality of a window. The window manager
 11598 │ │                * can use this information when determining the decoration and behaviour
 11599 │ │                * of the window.
 11600 │ │                *
 11601 │ │                * The hint must be set before the window is mapped.
 11602 │ │                * @param hint A hint of the function this window will have
 11603 │ │                */
 11604 │ │               set_type_hint(hint: WindowTypeHint | null): void;
 11605 │ │               /**
 11606 │ │                * Toggles whether a window needs the user's
 11607 │ │                * urgent attention.
 11608 │ │                * @param urgent %TRUE if the window is urgent
 11609 │ │                */
 11610 │ │               set_urgency_hint(urgent: boolean): void;
 11611 │ │               /**
 11612 │ │                * For most purposes this function is deprecated in favor of
 11613 │ │                * g_object_set_data(). However, for historical reasons GTK+ stores
 11614 │ │                * the #GtkWidget that owns a #GdkWindow as user data on the
 11615 │ │                * #GdkWindow. So, custom widget implementations should use
 11616 │ │                * this function for that. If GTK+ receives an event for a #GdkWindow,
 11617 │ │                * and the user data for the window is non-%NULL, GTK+ will assume the
 11618 │ │                * user data is a #GtkWidget, and forward the event to that widget.
 11619 │ │                * @param user_data user data
 11620 │ │                */
 11621 │ │               set_user_data(user_data?: GObject.Object | null): void;
 11622 │ │               /**
 11623 │ │                * Makes pixels in `window` outside `shape_region` be transparent,
 11624 │ │                * so that the window may be nonrectangular.
 11625 │ │                *
 11626 │ │                * If `shape_region` is %NULL, the shape will be unset, so the whole
 11627 │ │                * window will be opaque again. `offset_x` and `offset_y` are ignored
 11628 │ │                * if `shape_region` is %NULL.
 11629 │ │                *
 11630 │ │                * On the X11 platform, this uses an X server extension which is
 11631 │ │                * widely available on most common platforms, but not available on
 11632 │ │                * very old X servers, and occasionally the implementation will be
 11633 │ │                * buggy. On servers without the shape extension, this function
 11634 │ │                * will do nothing.
 11635 │ │                *
 11636 │ │                * This function works on both toplevel and child windows.
 11637 │ │                * @param shape_region region of window to be non-transparent
 11638 │ │                * @param offset_x X position of @shape_region in @window coordinates
 11639 │ │                * @param offset_y Y position of @shape_region in @window coordinates
 11640 │ │                */
 11641 │ │               shape_combine_region(shape_region: cairo.Region | null, offset_x: number, offset_y: number): void;
 11642 │ │               /**
 11643 │ │                * Like gdk_window_show_unraised(), but also raises the window to the
 11644 │ │                * top of the window stack (moves the window to the front of the
 11645 │ │                * Z-order).
 11646 │ │                *
 11647 │ │                * This function maps a window so it’s visible onscreen. Its opposite
 11648 │ │                * is gdk_window_hide().
 11649 │ │                *
 11650 │ │                * When implementing a #GtkWidget, you should call this function on the widget's
 11651 │ │                * #GdkWindow as part of the “map” method.
 11652 │ │                */
 11653 │ │               show(): void;
 11654 │ │               /**
 11655 │ │                * Shows a #GdkWindow onscreen, but does not modify its stacking
 11656 │ │                * order. In contrast, gdk_window_show() will raise the window
 11657 │ │                * to the top of the window stack.
 11658 │ │                *
 11659 │ │                * On the X11 platform, in Xlib terms, this function calls
 11660 │ │                * XMapWindow() (it also updates some internal GDK state, which means
 11661 │ │                * that you can’t really use XMapWindow() directly on a GDK window).
 11662 │ │                */
 11663 │ │               show_unraised(): void;
 11664 │ │               /**
 11665 │ │                * Asks the windowing system to show the window menu. The window menu
 11666 │ │                * is the menu shown when right-clicking the titlebar on traditional
 11667 │ │                * windows managed by the window manager. This is useful for windows
 11668 │ │                * using client-side decorations, activating it with a right-click
 11669 │ │                * on the window decorations.
 11670 │ │                * @param event a #GdkEvent to show the menu for
 11671 │ │                * @returns %TRUE if the window menu was shown and %FALSE otherwise.
 11672 │ │                */
 11673 │ │               show_window_menu(event: Event): boolean;
 11674 │ │               /**
 11675 │ │                * “Pins” a window such that it’s on all workspaces and does not scroll
 11676 │ │                * with viewports, for window managers that have scrollable viewports.
 11677 │ │                * (When using #GtkWindow, gtk_window_stick() may be more useful.)
 11678 │ │                *
 11679 │ │                * On the X11 platform, this function depends on window manager
 11680 │ │                * support, so may have no effect with many window managers. However,
 11681 │ │                * GDK will do the best it can to convince the window manager to stick
 11682 │ │                * the window. For window managers that don’t support this operation,
 11683 │ │                * there’s nothing you can do to force it to happen.
 11684 │ │                */
 11685 │ │               stick(): void;
 11686 │ │               /**
 11687 │ │                * Thaws a window frozen with
 11688 │ │                * gdk_window_freeze_toplevel_updates_libgtk_only().
 11689 │ │                *
 11690 │ │                * This function is not part of the GDK public API and is only
 11691 │ │                * for use by GTK+.
 11692 │ │                */
 11693 │ │               thaw_toplevel_updates_libgtk_only(): void;
 11694 │ │               /**
 11695 │ │                * Thaws a window frozen with gdk_window_freeze_updates().
 11696 │ │                */
 11697 │ │               thaw_updates(): void;
 11698 │ │               /**
 11699 │ │                * Moves the window out of fullscreen mode. If the window was not
 11700 │ │                * fullscreen, does nothing.
 11701 │ │                *
 11702 │ │                * On X11, asks the window manager to move `window` out of the fullscreen
 11703 │ │                * state, if the window manager supports this operation. Not all
 11704 │ │                * window managers support this, and some deliberately ignore it or
 11705 │ │                * don’t have a concept of “fullscreen”; so you can’t rely on the
 11706 │ │                * unfullscreenification actually happening. But it will happen with
 11707 │ │                * most standard window managers, and GDK makes a best effort to get
 11708 │ │                * it to happen.
 11709 │ │                */
 11710 │ │               unfullscreen(): void;
 11711 │ │               /**
 11712 │ │                * Unmaximizes the window. If the window wasn’t maximized, then this
 11713 │ │                * function does nothing.
 11714 │ │                *
 11715 │ │                * On X11, asks the window manager to unmaximize `window,` if the
 11716 │ │                * window manager supports this operation. Not all window managers
 11717 │ │                * support this, and some deliberately ignore it or don’t have a
 11718 │ │                * concept of “maximized”; so you can’t rely on the unmaximization
 11719 │ │                * actually happening. But it will happen with most standard window
 11720 │ │                * managers, and GDK makes a best effort to get it to happen.
 11721 │ │                *
 11722 │ │                * On Windows, reliably unmaximizes the window.
 11723 │ │                */
 11724 │ │               unmaximize(): void;
 11725 │ │               /**
 11726 │ │                * Reverse operation for gdk_window_stick(); see gdk_window_stick(),
 11727 │ │                * and gtk_window_unstick().
 11728 │ │                */
 11729 │ │               unstick(): void;
 11730 │ │               /**
 11731 │ │                * Withdraws a window (unmaps it and asks the window manager to forget about it).
 11732 │ │                * This function is not really useful as gdk_window_hide() automatically
 11733 │ │                * withdraws toplevel windows before hiding them.
 11734 │ │                */
 11735 │ │               withdraw(): void;
 11736 │ │           }
 11737 │ │   
 11738 │ │           /**
 11739 │ │            * An opaque type representing a string as an index into a table
 11740 │ │            * of strings on the X server.
 11741 │ │            */
 11742 │ │           abstract class Atom {
 11743 │ │               static $gtype: GObject.GType<Atom>;
 11744 │ │   
 11745 │ │               // Constructors
 11746 │ │   
 11747 │ │               _init(...args: any[]): void;
 11748 │ │   
 11749 │ │               // Static methods
 11750 │ │   
 11751 │ │               /**
 11752 │ │                * Finds or creates an atom corresponding to a given string.
 11753 │ │                * @param atom_name a string.
 11754 │ │                * @param only_if_exists if %TRUE, GDK is allowed to not create a new atom, but   just return %GDK_NONE if the requested atom doesn’t already   exists. Currently, the flag is ignored, since checking the   existance of an atom is as expensive as creating it.
 11755 │ │                */
 11756 │ │               static intern(atom_name: string, only_if_exists: boolean): Atom;
 11757 │ │               /**
 11758 │ │                * Finds or creates an atom corresponding to a given string.
 11759 │ │                *
 11760 │ │                * Note that this function is identical to gdk_atom_intern() except
 11761 │ │                * that if a new #GdkAtom is created the string itself is used rather
 11762 │ │                * than a copy. This saves memory, but can only be used if the string
 11763 │ │                * will always exist. It can be used with statically
 11764 │ │                * allocated strings in the main program, but not with statically
 11765 │ │                * allocated memory in dynamically loaded modules, if you expect to
 11766 │ │                * ever unload the module again (e.g. do not use this function in
 11767 │ │                * GTK+ theme engines).
 11768 │ │                * @param atom_name a static string
 11769 │ │                */
 11770 │ │               static intern_static_string(atom_name: string): Atom;
 11771 │ │   
 11772 │ │               // Methods
 11773 │ │   
 11774 │ │               /**
 11775 │ │                * Determines the string corresponding to an atom.
 11776 │ │                * @returns a newly-allocated string containing the string   corresponding to @atom. When you are done with the   return value, you should free it using g_free().
 11777 │ │                */
 11778 │ │               name(): string;
 11779 │ │           }
 11780 │ │   
 11781 │ │           /**
 11782 │ │            * A #GdkColor is used to describe a color,
 11783 │ │            * similar to the XColor struct used in the X11 drawing API.
 11784 │ │            */
 11785 │ │           class Color {
 11786 │ │               static $gtype: GObject.GType<Color>;
 11787 │ │   
 11788 │ │               // Fields
 11789 │ │   
 11790 │ │               pixel: number;
 11791 │ │               red: number;
 11792 │ │               green: number;
 11793 │ │               blue: number;
 11794 │ │   
 11795 │ │               // Constructors
 11796 │ │   
 11797 │ │               constructor(
 11798 │ │                   properties?: Partial<{
 11799 │ │                       pixel: number;
 11800 │ │                       red: number;
 11801 │ │                       green: number;
 11802 │ │                       blue: number;
 11803 │ │                   }>,
 11804 │ │               );
 11805 │ │               _init(...args: any[]): void;
 11806 │ │   
 11807 │ │               // Static methods
 11808 │ │   
 11809 │ │               /**
 11810 │ │                * Parses a textual specification of a color and fill in the
 11811 │ │                * `red,` `green,` and `blue` fields of a #GdkColor.
 11812 │ │                *
 11813 │ │                * The string can either one of a large set of standard names
 11814 │ │                * (taken from the X11 `rgb.txt` file), or it can be a hexadecimal
 11815 │ │                * value in the form “\#rgb” “\#rrggbb”, “\#rrrgggbbb” or
 11816 │ │                * “\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits of
 11817 │ │                * the red, green, and blue components of the color, respectively.
 11818 │ │                * (White in the four forms is “\#fff”, “\#ffffff”, “\#fffffffff”
 11819 │ │                * and “\#ffffffffffff”).
 11820 │ │                * @param spec the string specifying the color
 11821 │ │                */
 11822 │ │               static parse(spec: string): [boolean, Color];
 11823 │ │   
 11824 │ │               // Methods
 11825 │ │   
 11826 │ │               /**
 11827 │ │                * Makes a copy of a #GdkColor.
 11828 │ │                *
 11829 │ │                * The result must be freed using gdk_color_free().
 11830 │ │                * @returns a copy of @color
 11831 │ │                */
 11832 │ │               copy(): Color;
 11833 │ │               /**
 11834 │ │                * Compares two colors.
 11835 │ │                * @param colorb another #GdkColor
 11836 │ │                * @returns %TRUE if the two colors compare equal
 11837 │ │                */
 11838 │ │               equal(colorb: Color): boolean;
 11839 │ │               /**
 11840 │ │                * Frees a #GdkColor created with gdk_color_copy().
 11841 │ │                */
 11842 │ │               free(): void;
 11843 │ │               /**
 11844 │ │                * A hash function suitable for using for a hash
 11845 │ │                * table that stores #GdkColors.
 11846 │ │                * @returns The hash function applied to @color
 11847 │ │                */
 11848 │ │               hash(): number;
 11849 │ │               /**
 11850 │ │                * Returns a textual specification of `color` in the hexadecimal
 11851 │ │                * form “\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits
 11852 │ │                * representing the red, green and blue components respectively.
 11853 │ │                *
 11854 │ │                * The returned string can be parsed by gdk_color_parse().
 11855 │ │                * @returns a newly-allocated text string
 11856 │ │                */
 11857 │ │               to_string(): string;
 11858 │ │           }
 11859 │ │   
 11860 │ │           type DevicePadInterface = typeof DevicePad;
 11861 │ │           type DrawingContextClass = typeof DrawingContext;
 11862 │ │           /**
 11863 │ │            * Contains the fields which are common to all event structs.
 11864 │ │            * Any event pointer can safely be cast to a pointer to a #GdkEventAny to
 11865 │ │            * access these fields.
 11866 │ │            */
 11867 │ │           class EventAny {
 11868 │ │               static $gtype: GObject.GType<EventAny>;
 11869 │ │   
 11870 │ │               // Fields
 11871 │ │   
 11872 │ │               type: EventType;
 11873 │ │               window: Window;
 11874 │ │               send_event: number;
 11875 │ │   
 11876 │ │               // Constructors
 11877 │ │   
 11878 │ │               _init(...args: any[]): void;
 11879 │ │           }
 11880 │ │   
 11881 │ │           /**
 11882 │ │            * Used for button press and button release events. The
 11883 │ │            * `type` field will be one of %GDK_BUTTON_PRESS,
 11884 │ │            * %GDK_2BUTTON_PRESS, %GDK_3BUTTON_PRESS or %GDK_BUTTON_RELEASE,
 11885 │ │            *
 11886 │ │            * Double and triple-clicks result in a sequence of events being received.
 11887 │ │            * For double-clicks the order of events will be:
 11888 │ │            *
 11889 │ │            * - %GDK_BUTTON_PRESS
 11890 │ │            * - %GDK_BUTTON_RELEASE
 11891 │ │            * - %GDK_BUTTON_PRESS
 11892 │ │            * - %GDK_2BUTTON_PRESS
 11893 │ │            * - %GDK_BUTTON_RELEASE
 11894 │ │            *
 11895 │ │            * Note that the first click is received just like a normal
 11896 │ │            * button press, while the second click results in a %GDK_2BUTTON_PRESS
 11897 │ │            * being received just after the %GDK_BUTTON_PRESS.
 11898 │ │            *
 11899 │ │            * Triple-clicks are very similar to double-clicks, except that
 11900 │ │            * %GDK_3BUTTON_PRESS is inserted after the third click. The order of the
 11901 │ │            * events is:
 11902 │ │            *
 11903 │ │            * - %GDK_BUTTON_PRESS
 11904 │ │            * - %GDK_BUTTON_RELEASE
 11905 │ │            * - %GDK_BUTTON_PRESS
 11906 │ │            * - %GDK_2BUTTON_PRESS
 11907 │ │            * - %GDK_BUTTON_RELEASE
 11908 │ │            * - %GDK_BUTTON_PRESS
 11909 │ │            * - %GDK_3BUTTON_PRESS
 11910 │ │            * - %GDK_BUTTON_RELEASE
 11911 │ │            *
 11912 │ │            * For a double click to occur, the second button press must occur within
 11913 │ │            * 1/4 of a second of the first. For a triple click to occur, the third
 11914 │ │            * button press must also occur within 1/2 second of the first button press.
 11915 │ │            */
 11916 │ │           class EventButton {
 11917 │ │               static $gtype: GObject.GType<EventButton>;
 11918 │ │   
 11919 │ │               // Fields
 11920 │ │   
 11921 │ │               type: EventType;
 11922 │ │               window: Window;
 11923 │ │               send_event: number;
 11924 │ │               time: number;
 11925 │ │               x: number;
 11926 │ │               y: number;
 11927 │ │               axes: number;
 11928 │ │               state: ModifierType;
 11929 │ │               button: number;
 11930 │ │               device: Device;
 11931 │ │               x_root: number;
 11932 │ │               y_root: number;
 11933 │ │   
 11934 │ │               // Constructors
 11935 │ │   
 11936 │ │               _init(...args: any[]): void;
 11937 │ │           }
 11938 │ │   
 11939 │ │           /**
 11940 │ │            * Generated when a window size or position has changed.
 11941 │ │            */
 11942 │ │           class EventConfigure {
 11943 │ │               static $gtype: GObject.GType<EventConfigure>;
 11944 │ │   
 11945 │ │               // Fields
 11946 │ │   
 11947 │ │               type: EventType;
 11948 │ │               window: Window;
 11949 │ │               send_event: number;
 11950 │ │               x: number;
 11951 │ │               y: number;
 11952 │ │               width: number;
 11953 │ │               height: number;
 11954 │ │   
 11955 │ │               // Constructors
 11956 │ │   
 11957 │ │               _init(...args: any[]): void;
 11958 │ │           }
 11959 │ │   
 11960 │ │           /**
 11961 │ │            * Generated when the pointer enters or leaves a window.
 11962 │ │            */
 11963 │ │           class EventCrossing {
 11964 │ │               static $gtype: GObject.GType<EventCrossing>;
 11965 │ │   
 11966 │ │               // Fields
 11967 │ │   
 11968 │ │               type: EventType;
 11969 │ │               window: Window;
 11970 │ │               send_event: number;
 11971 │ │               subwindow: Window;
 11972 │ │               time: number;
 11973 │ │               x: number;
 11974 │ │               y: number;
 11975 │ │               x_root: number;
 11976 │ │               y_root: number;
 11977 │ │               mode: CrossingMode;
 11978 │ │               detail: NotifyType;
 11979 │ │               focus: boolean;
 11980 │ │               state: ModifierType;
 11981 │ │   
 11982 │ │               // Constructors
 11983 │ │   
 11984 │ │               _init(...args: any[]): void;
 11985 │ │           }
 11986 │ │   
 11987 │ │           /**
 11988 │ │            * Generated during DND operations.
 11989 │ │            */
 11990 │ │           class EventDND {
 11991 │ │               static $gtype: GObject.GType<EventDND>;
 11992 │ │   
 11993 │ │               // Fields
 11994 │ │   
 11995 │ │               type: EventType;
 11996 │ │               window: Window;
 11997 │ │               send_event: number;
 11998 │ │               context: DragContext;
 11999 │ │               time: number;
 12000 │ │               x_root: number;
 12001 │ │               y_root: number;
 12002 │ │   
 12003 │ │               // Constructors
 12004 │ │   
 12005 │ │               _init(...args: any[]): void;
 12006 │ │           }
 12007 │ │   
 12008 │ │           /**
 12009 │ │            * Generated when all or part of a window becomes visible and needs to be
 12010 │ │            * redrawn.
 12011 │ │            */
 12012 │ │           class EventExpose {
 12013 │ │               static $gtype: GObject.GType<EventExpose>;
 12014 │ │   
 12015 │ │               // Fields
 12016 │ │   
 12017 │ │               type: EventType;
 12018 │ │               window: Window;
 12019 │ │               send_event: number;
 12020 │ │               area: Rectangle;
 12021 │ │               count: number;
 12022 │ │   
 12023 │ │               // Constructors
 12024 │ │   
 12025 │ │               _init(...args: any[]): void;
 12026 │ │           }
 12027 │ │   
 12028 │ │           /**
 12029 │ │            * Describes a change of keyboard focus.
 12030 │ │            */
 12031 │ │           class EventFocus {
 12032 │ │               static $gtype: GObject.GType<EventFocus>;
 12033 │ │   
 12034 │ │               // Fields
 12035 │ │   
 12036 │ │               type: EventType;
 12037 │ │               window: Window;
 12038 │ │               send_event: number;
 12039 │ │               'in': number;
 12040 │ │   
 12041 │ │               // Constructors
 12042 │ │   
 12043 │ │               _init(...args: any[]): void;
 12044 │ │           }
 12045 │ │   
 12046 │ │           /**
 12047 │ │            * Generated when a pointer or keyboard grab is broken. On X11, this happens
 12048 │ │            * when the grab window becomes unviewable (i.e. it or one of its ancestors
 12049 │ │            * is unmapped), or if the same application grabs the pointer or keyboard
 12050 │ │            * again. Note that implicit grabs (which are initiated by button presses)
 12051 │ │            * can also cause #GdkEventGrabBroken events.
 12052 │ │            */
 12053 │ │           class EventGrabBroken {
 12054 │ │               static $gtype: GObject.GType<EventGrabBroken>;
 12055 │ │   
 12056 │ │               // Fields
 12057 │ │   
 12058 │ │               type: EventType;
 12059 │ │               window: Window;
 12060 │ │               send_event: number;
 12061 │ │               keyboard: boolean;
 12062 │ │               implicit: boolean;
 12063 │ │               grab_window: Window;
 12064 │ │   
 12065 │ │               // Constructors
 12066 │ │   
 12067 │ │               _init(...args: any[]): void;
 12068 │ │           }
 12069 │ │   
 12070 │ │           /**
 12071 │ │            * Describes a key press or key release event.
 12072 │ │            */
 12073 │ │           class EventKey {
 12074 │ │               static $gtype: GObject.GType<EventKey>;
 12075 │ │   
 12076 │ │               // Fields
 12077 │ │   
 12078 │ │               type: EventType;
 12079 │ │               window: Window;
 12080 │ │               send_event: number;
 12081 │ │               time: number;
 12082 │ │               state: ModifierType;
 12083 │ │               keyval: number;
 12084 │ │               length: number;
 12085 │ │               string: string;
 12086 │ │               hardware_keycode: number;
 12087 │ │               group: number;
 12088 │ │               is_modifier: number;
 12089 │ │   
 12090 │ │               // Constructors
 12091 │ │   
 12092 │ │               _init(...args: any[]): void;
 12093 │ │           }
 12094 │ │   
 12095 │ │           /**
 12096 │ │            * Generated when the pointer moves.
 12097 │ │            */
 12098 │ │           class EventMotion {
 12099 │ │               static $gtype: GObject.GType<EventMotion>;
 12100 │ │   
 12101 │ │               // Fields
 12102 │ │   
 12103 │ │               type: EventType;
 12104 │ │               window: Window;
 12105 │ │               send_event: number;
 12106 │ │               time: number;
 12107 │ │               x: number;
 12108 │ │               y: number;
 12109 │ │               axes: number;
 12110 │ │               state: ModifierType;
 12111 │ │               is_hint: number;
 12112 │ │               device: Device;
 12113 │ │               x_root: number;
 12114 │ │               y_root: number;
 12115 │ │   
 12116 │ │               // Constructors
 12117 │ │   
 12118 │ │               _init(...args: any[]): void;
 12119 │ │           }
 12120 │ │   
 12121 │ │           /**
 12122 │ │            * Generated when the owner of a selection changes. On X11, this
 12123 │ │            * information is only available if the X server supports the XFIXES
 12124 │ │            * extension.
 12125 │ │            */
 12126 │ │           class EventOwnerChange {
 12127 │ │               static $gtype: GObject.GType<EventOwnerChange>;
 12128 │ │   
 12129 │ │               // Fields
 12130 │ │   
 12131 │ │               type: EventType;
 12132 │ │               window: Window;
 12133 │ │               send_event: number;
 12134 │ │               owner: Window;
 12135 │ │               reason: OwnerChange;
 12136 │ │               time: number;
 12137 │ │               selection_time: number;
 12138 │ │   
 12139 │ │               // Constructors
 12140 │ │   
 12141 │ │               _init(...args: any[]): void;
 12142 │ │           }
 12143 │ │   
 12144 │ │           /**
 12145 │ │            * Generated during %GDK_SOURCE_TABLET_PAD interaction with tactile sensors.
 12146 │ │            */
 12147 │ │           class EventPadAxis {
 12148 │ │               static $gtype: GObject.GType<EventPadAxis>;
 12149 │ │   
 12150 │ │               // Fields
 12151 │ │   
 12152 │ │               type: EventType;
 12153 │ │               window: Window;
 12154 │ │               send_event: number;
 12155 │ │               time: number;
 12156 │ │               group: number;
 12157 │ │               index: number;
 12158 │ │               mode: number;
 12159 │ │               value: number;
 12160 │ │   
 12161 │ │               // Constructors
 12162 │ │   
 12163 │ │               _init(...args: any[]): void;
 12164 │ │           }
 12165 │ │   
 12166 │ │           /**
 12167 │ │            * Generated during %GDK_SOURCE_TABLET_PAD button presses and releases.
 12168 │ │            */
 12169 │ │           class EventPadButton {
 12170 │ │               static $gtype: GObject.GType<EventPadButton>;
 12171 │ │   
 12172 │ │               // Fields
 12173 │ │   
 12174 │ │               type: EventType;
 12175 │ │               window: Window;
 12176 │ │               send_event: number;
 12177 │ │               time: number;
 12178 │ │               group: number;
 12179 │ │               button: number;
 12180 │ │               mode: number;
 12181 │ │   
 12182 │ │               // Constructors
 12183 │ │   
 12184 │ │               _init(...args: any[]): void;
 12185 │ │           }
 12186 │ │   
 12187 │ │           /**
 12188 │ │            * Generated during %GDK_SOURCE_TABLET_PAD mode switches in a group.
 12189 │ │            */
 12190 │ │           class EventPadGroupMode {
 12191 │ │               static $gtype: GObject.GType<EventPadGroupMode>;
 12192 │ │   
 12193 │ │               // Fields
 12194 │ │   
 12195 │ │               type: EventType;
 12196 │ │               window: Window;
 12197 │ │               send_event: number;
 12198 │ │               time: number;
 12199 │ │               group: number;
 12200 │ │               mode: number;
 12201 │ │   
 12202 │ │               // Constructors
 12203 │ │   
 12204 │ │               _init(...args: any[]): void;
 12205 │ │           }
 12206 │ │   
 12207 │ │           /**
 12208 │ │            * Describes a property change on a window.
 12209 │ │            */
 12210 │ │           class EventProperty {
 12211 │ │               static $gtype: GObject.GType<EventProperty>;
 12212 │ │   
 12213 │ │               // Fields
 12214 │ │   
 12215 │ │               type: EventType;
 12216 │ │               window: Window;
 12217 │ │               send_event: number;
 12218 │ │               time: number;
 12219 │ │               state: PropertyState;
 12220 │ │   
 12221 │ │               // Constructors
 12222 │ │   
 12223 │ │               _init(...args: any[]): void;
 12224 │ │           }
 12225 │ │   
 12226 │ │           /**
 12227 │ │            * Proximity events are generated when using GDK’s wrapper for the
 12228 │ │            * XInput extension. The XInput extension is an add-on for standard X
 12229 │ │            * that allows you to use nonstandard devices such as graphics tablets.
 12230 │ │            * A proximity event indicates that the stylus has moved in or out of
 12231 │ │            * contact with the tablet, or perhaps that the user’s finger has moved
 12232 │ │            * in or out of contact with a touch screen.
 12233 │ │            *
 12234 │ │            * This event type will be used pretty rarely. It only is important for
 12235 │ │            * XInput aware programs that are drawing their own cursor.
 12236 │ │            */
 12237 │ │           class EventProximity {
 12238 │ │               static $gtype: GObject.GType<EventProximity>;
 12239 │ │   
 12240 │ │               // Fields
 12241 │ │   
 12242 │ │               type: EventType;
 12243 │ │               window: Window;
 12244 │ │               send_event: number;
 12245 │ │               time: number;
 12246 │ │               device: Device;
 12247 │ │   
 12248 │ │               // Constructors
 12249 │ │   
 12250 │ │               _init(...args: any[]): void;
 12251 │ │           }
 12252 │ │   
 12253 │ │           /**
 12254 │ │            * Generated from button presses for the buttons 4 to 7. Wheel mice are
 12255 │ │            * usually configured to generate button press events for buttons 4 and 5
 12256 │ │            * when the wheel is turned.
 12257 │ │            *
 12258 │ │            * Some GDK backends can also generate “smooth” scroll events, which
 12259 │ │            * can be recognized by the %GDK_SCROLL_SMOOTH scroll direction. For
 12260 │ │            * these, the scroll deltas can be obtained with
 12261 │ │            * gdk_event_get_scroll_deltas().
 12262 │ │            */
 12263 │ │           class EventScroll {
 12264 │ │               static $gtype: GObject.GType<EventScroll>;
 12265 │ │   
 12266 │ │               // Fields
 12267 │ │   
 12268 │ │               type: EventType;
 12269 │ │               window: Window;
 12270 │ │               send_event: number;
 12271 │ │               time: number;
 12272 │ │               x: number;
 12273 │ │               y: number;
 12274 │ │               state: ModifierType;
 12275 │ │               direction: ScrollDirection;
 12276 │ │               device: Device;
 12277 │ │               x_root: number;
 12278 │ │               y_root: number;
 12279 │ │               delta_x: number;
 12280 │ │               delta_y: number;
 12281 │ │               is_stop: number;
 12282 │ │   
 12283 │ │               // Constructors
 12284 │ │   
 12285 │ │               _init(...args: any[]): void;
 12286 │ │           }
 12287 │ │   
 12288 │ │           /**
 12289 │ │            * Generated when a selection is requested or ownership of a selection
 12290 │ │            * is taken over by another client application.
 12291 │ │            */
 12292 │ │           class EventSelection {
 12293 │ │               static $gtype: GObject.GType<EventSelection>;
 12294 │ │   
 12295 │ │               // Fields
 12296 │ │   
 12297 │ │               type: EventType;
 12298 │ │               window: Window;
 12299 │ │               send_event: number;
 12300 │ │               time: number;
 12301 │ │               requestor: Window;
 12302 │ │   
 12303 │ │               // Constructors
 12304 │ │   
 12305 │ │               _init(...args: any[]): void;
 12306 │ │           }
 12307 │ │   
 12308 │ │           abstract class EventSequence {
 12309 │ │               static $gtype: GObject.GType<EventSequence>;
 12310 │ │   
 12311 │ │               // Constructors
 12312 │ │   
 12313 │ │               _init(...args: any[]): void;
 12314 │ │           }
 12315 │ │   
 12316 │ │           /**
 12317 │ │            * Generated when a setting is modified.
 12318 │ │            */
 12319 │ │           class EventSetting {
 12320 │ │               static $gtype: GObject.GType<EventSetting>;
 12321 │ │   
 12322 │ │               // Fields
 12323 │ │   
 12324 │ │               type: EventType;
 12325 │ │               window: Window;
 12326 │ │               send_event: number;
 12327 │ │               action: SettingAction;
 12328 │ │               name: string;
 12329 │ │   
 12330 │ │               // Constructors
 12331 │ │   
 12332 │ │               _init(...args: any[]): void;
 12333 │ │           }
 12334 │ │   
 12335 │ │           /**
 12336 │ │            * Used for touch events.
 12337 │ │            * `type` field will be one of %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
 12338 │ │            * %GDK_TOUCH_END or %GDK_TOUCH_CANCEL.
 12339 │ │            *
 12340 │ │            * Touch events are grouped into sequences by means of the `sequence`
 12341 │ │            * field, which can also be obtained with gdk_event_get_event_sequence().
 12342 │ │            * Each sequence begins with a %GDK_TOUCH_BEGIN event, followed by
 12343 │ │            * any number of %GDK_TOUCH_UPDATE events, and ends with a %GDK_TOUCH_END
 12344 │ │            * (or %GDK_TOUCH_CANCEL) event. With multitouch devices, there may be
 12345 │ │            * several active sequences at the same time.
 12346 │ │            */
 12347 │ │           class EventTouch {
 12348 │ │               static $gtype: GObject.GType<EventTouch>;
 12349 │ │   
 12350 │ │               // Fields
 12351 │ │   
 12352 │ │               type: EventType;
 12353 │ │               window: Window;
 12354 │ │               send_event: number;
 12355 │ │               time: number;
 12356 │ │               x: number;
 12357 │ │               y: number;
 12358 │ │               axes: number;
 12359 │ │               state: ModifierType;
 12360 │ │               emulating_pointer: boolean;
 12361 │ │               device: Device;
 12362 │ │               x_root: number;
 12363 │ │               y_root: number;
 12364 │ │   
 12365 │ │               // Constructors
 12366 │ │   
 12367 │ │               _init(...args: any[]): void;
 12368 │ │           }
 12369 │ │   
 12370 │ │           /**
 12371 │ │            * Generated during touchpad swipe gestures.
 12372 │ │            */
 12373 │ │           class EventTouchpadPinch {
 12374 │ │               static $gtype: GObject.GType<EventTouchpadPinch>;
 12375 │ │   
 12376 │ │               // Fields
 12377 │ │   
 12378 │ │               type: EventType;
 12379 │ │               window: Window;
 12380 │ │               send_event: number;
 12381 │ │               phase: number;
 12382 │ │               n_fingers: number;
 12383 │ │               time: number;
 12384 │ │               x: number;
 12385 │ │               y: number;
 12386 │ │               dx: number;
 12387 │ │               dy: number;
 12388 │ │               angle_delta: number;
 12389 │ │               scale: number;
 12390 │ │               x_root: number;
 12391 │ │               y_root: number;
 12392 │ │               state: ModifierType;
 12393 │ │   
 12394 │ │               // Constructors
 12395 │ │   
 12396 │ │               _init(...args: any[]): void;
 12397 │ │           }
 12398 │ │   
 12399 │ │           /**
 12400 │ │            * Generated during touchpad swipe gestures.
 12401 │ │            */
 12402 │ │           class EventTouchpadSwipe {
 12403 │ │               static $gtype: GObject.GType<EventTouchpadSwipe>;
 12404 │ │   
 12405 │ │               // Fields
 12406 │ │   
 12407 │ │               type: EventType;
 12408 │ │               window: Window;
 12409 │ │               send_event: number;
 12410 │ │               phase: number;
 12411 │ │               n_fingers: number;
 12412 │ │               time: number;
 12413 │ │               x: number;
 12414 │ │               y: number;
 12415 │ │               dx: number;
 12416 │ │               dy: number;
 12417 │ │               x_root: number;
 12418 │ │               y_root: number;
 12419 │ │               state: ModifierType;
 12420 │ │   
 12421 │ │               // Constructors
 12422 │ │   
 12423 │ │               _init(...args: any[]): void;
 12424 │ │           }
 12425 │ │   
 12426 │ │           /**
 12427 │ │            * Generated when the window visibility status has changed.
 12428 │ │            */
 12429 │ │           class EventVisibility {
 12430 │ │               static $gtype: GObject.GType<EventVisibility>;
 12431 │ │   
 12432 │ │               // Fields
 12433 │ │   
 12434 │ │               type: EventType;
 12435 │ │               window: Window;
 12436 │ │               send_event: number;
 12437 │ │               state: VisibilityState;
 12438 │ │   
 12439 │ │               // Constructors
 12440 │ │   
 12441 │ │               _init(...args: any[]): void;
 12442 │ │           }
 12443 │ │   
 12444 │ │           /**
 12445 │ │            * Generated when the state of a toplevel window changes.
 12446 │ │            */
 12447 │ │           class EventWindowState {
 12448 │ │               static $gtype: GObject.GType<EventWindowState>;
 12449 │ │   
 12450 │ │               // Fields
 12451 │ │   
 12452 │ │               type: EventType;
 12453 │ │               window: Window;
 12454 │ │               send_event: number;
 12455 │ │               changed_mask: WindowState;
 12456 │ │               new_window_state: WindowState;
 12457 │ │   
 12458 │ │               // Constructors
 12459 │ │   
 12460 │ │               _init(...args: any[]): void;
 12461 │ │           }
 12462 │ │   
 12463 │ │           type FrameClockClass = typeof FrameClock;
 12464 │ │           abstract class FrameClockPrivate {
 12465 │ │               static $gtype: GObject.GType<FrameClockPrivate>;
 12466 │ │   
 12467 │ │               // Constructors
 12468 │ │   
 12469 │ │               _init(...args: any[]): void;
 12470 │ │           }
 12471 │ │   
 12472 │ │           /**
 12473 │ │            * A #GdkFrameTimings object holds timing information for a single frame
 12474 │ │            * of the application’s displays. To retrieve #GdkFrameTimings objects,
 12475 │ │            * use gdk_frame_clock_get_timings() or gdk_frame_clock_get_current_timings().
 12476 │ │            * The information in #GdkFrameTimings is useful for precise synchronization
 12477 │ │            * of video with the event or audio streams, and for measuring
 12478 │ │            * quality metrics for the application’s display, such as latency and jitter.
 12479 │ │            */
 12480 │ │           abstract class FrameTimings {
 12481 │ │               static $gtype: GObject.GType<FrameTimings>;
 12482 │ │   
 12483 │ │               // Constructors
 12484 │ │   
 12485 │ │               _init(...args: any[]): void;
 12486 │ │   
 12487 │ │               // Methods
 12488 │ │   
 12489 │ │               /**
 12490 │ │                * The timing information in a #GdkFrameTimings is filled in
 12491 │ │                * incrementally as the frame as drawn and passed off to the
 12492 │ │                * window system for processing and display to the user. The
 12493 │ │                * accessor functions for #GdkFrameTimings can return 0 to
 12494 │ │                * indicate an unavailable value for two reasons: either because
 12495 │ │                * the information is not yet available, or because it isn't
 12496 │ │                * available at all. Once gdk_frame_timings_get_complete() returns
 12497 │ │                * %TRUE for a frame, you can be certain that no further values
 12498 │ │                * will become available and be stored in the #GdkFrameTimings.
 12499 │ │                * @returns %TRUE if all information that will be available  for the frame has been filled in.
 12500 │ │                */
 12501 │ │               get_complete(): boolean;
 12502 │ │               /**
 12503 │ │                * Gets the frame counter value of the #GdkFrameClock when this
 12504 │ │                * this frame was drawn.
 12505 │ │                * @returns the frame counter value for this frame
 12506 │ │                */
 12507 │ │               get_frame_counter(): number;
 12508 │ │               /**
 12509 │ │                * Returns the frame time for the frame. This is the time value
 12510 │ │                * that is typically used to time animations for the frame. See
 12511 │ │                * gdk_frame_clock_get_frame_time().
 12512 │ │                * @returns the frame time for the frame, in the timescale  of g_get_monotonic_time()
 12513 │ │                */
 12514 │ │               get_frame_time(): number;
 12515 │ │               /**
 12516 │ │                * Gets the predicted time at which this frame will be displayed. Although
 12517 │ │                * no predicted time may be available, if one is available, it will
 12518 │ │                * be available while the frame is being generated, in contrast to
 12519 │ │                * gdk_frame_timings_get_presentation_time(), which is only available
 12520 │ │                * after the frame has been presented. In general, if you are simply
 12521 │ │                * animating, you should use gdk_frame_clock_get_frame_time() rather
 12522 │ │                * than this function, but this function is useful for applications
 12523 │ │                * that want exact control over latency. For example, a movie player
 12524 │ │                * may want this information for Audio/Video synchronization.
 12525 │ │                * @returns The predicted time at which the frame will be presented,  in the timescale of g_get_monotonic_time(), or 0 if no predicted  presentation time is available.
 12526 │ │                */
 12527 │ │               get_predicted_presentation_time(): number;
 12528 │ │               /**
 12529 │ │                * Reurns the presentation time. This is the time at which the frame
 12530 │ │                * became visible to the user.
 12531 │ │                * @returns the time the frame was displayed to the user, in the  timescale of g_get_monotonic_time(), or 0 if no presentation  time is available. See gdk_frame_timings_get_complete()
 12532 │ │                */
 12533 │ │               get_presentation_time(): number;
 12534 │ │               /**
 12535 │ │                * Gets the natural interval between presentation times for
 12536 │ │                * the display that this frame was displayed on. Frame presentation
 12537 │ │                * usually happens during the “vertical blanking interval”.
 12538 │ │                * @returns the refresh interval of the display, in microseconds,  or 0 if the refresh interval is not available.  See gdk_frame_timings_get_complete().
 12539 │ │                */
 12540 │ │               get_refresh_interval(): number;
 12541 │ │               /**
 12542 │ │                * Increases the reference count of `timings`.
 12543 │ │                * @returns @timings
 12544 │ │                */
 12545 │ │               ref(): FrameTimings;
 12546 │ │               /**
 12547 │ │                * Decreases the reference count of `timings`. If `timings`
 12548 │ │                * is no longer referenced, it will be freed.
 12549 │ │                */
 12550 │ │               unref(): void;
 12551 │ │           }
 12552 │ │   
 12553 │ │           /**
 12554 │ │            * The #GdkGeometry struct gives the window manager information about
 12555 │ │            * a window’s geometry constraints. Normally you would set these on
 12556 │ │            * the GTK+ level using gtk_window_set_geometry_hints(). #GtkWindow
 12557 │ │            * then sets the hints on the #GdkWindow it creates.
 12558 │ │            *
 12559 │ │            * gdk_window_set_geometry_hints() expects the hints to be fully valid already
 12560 │ │            * and simply passes them to the window manager; in contrast,
 12561 │ │            * gtk_window_set_geometry_hints() performs some interpretation. For example,
 12562 │ │            * #GtkWindow will apply the hints to the geometry widget instead of the
 12563 │ │            * toplevel window, if you set a geometry widget. Also, the
 12564 │ │            * `min_width/``min_height/``max_width/``max_height` fields may be set to -1, and
 12565 │ │            * #GtkWindow will substitute the size request of the window or geometry widget.
 12566 │ │            * If the minimum size hint is not provided, #GtkWindow will use its requisition
 12567 │ │            * as the minimum size. If the minimum size is provided and a geometry widget is
 12568 │ │            * set, #GtkWindow will take the minimum size as the minimum size of the
 12569 │ │            * geometry widget rather than the entire window. The base size is treated
 12570 │ │            * similarly.
 12571 │ │            *
 12572 │ │            * The canonical use-case for gtk_window_set_geometry_hints() is to get a
 12573 │ │            * terminal widget to resize properly. Here, the terminal text area should be
 12574 │ │            * the geometry widget; #GtkWindow will then automatically set the base size to
 12575 │ │            * the size of other widgets in the terminal window, such as the menubar and
 12576 │ │            * scrollbar. Then, the `width_inc` and `height_inc` fields should be set to the
 12577 │ │            * size of one character in the terminal. Finally, the base size should be set
 12578 │ │            * to the size of one character. The net effect is that the minimum size of the
 12579 │ │            * terminal will have a 1x1 character terminal area, and only terminal sizes on
 12580 │ │            * the “character grid” will be allowed.
 12581 │ │            *
 12582 │ │            * Here’s an example of how the terminal example would be implemented, assuming
 12583 │ │            * a terminal area widget called “terminal” and a toplevel window “toplevel”:
 12584 │ │            *
 12585 │ │            *
 12586 │ │            * ```c
 12587 │ │            *  GdkGeometry hints;
 12588 │ │            *
 12589 │ │            *  hints.base_width = terminal->char_width;
 12590 │ │            *         hints.base_height = terminal->char_height;
 12591 │ │            *         hints.min_width = terminal->char_width;
 12592 │ │            *         hints.min_height = terminal->char_height;
 12593 │ │            *         hints.width_inc = terminal->char_width;
 12594 │ │            *         hints.height_inc = terminal->char_height;
 12595 │ │            *
 12596 │ │            *  gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
 12597 │ │            *                                 GTK_WIDGET (terminal),
 12598 │ │            *                                 &hints,
 12599 │ │            *                                 GDK_HINT_RESIZE_INC |
 12600 │ │            *                                 GDK_HINT_MIN_SIZE |
 12601 │ │            *                                 GDK_HINT_BASE_SIZE);
 12602 │ │            * ```
 12603 │ │            *
 12604 │ │            *
 12605 │ │            * The other useful fields are the `min_aspect` and `max_aspect` fields; these
 12606 │ │            * contain a width/height ratio as a floating point number. If a geometry widget
 12607 │ │            * is set, the aspect applies to the geometry widget rather than the entire
 12608 │ │            * window. The most common use of these hints is probably to set `min_aspect` and
 12609 │ │            * `max_aspect` to the same value, thus forcing the window to keep a constant
 12610 │ │            * aspect ratio.
 12611 │ │            */
 12612 │ │           class Geometry {
 12613 │ │               static $gtype: GObject.GType<Geometry>;
 12614 │ │   
 12615 │ │               // Fields
 12616 │ │   
 12617 │ │               min_width: number;
 12618 │ │               min_height: number;
 12619 │ │               max_width: number;
 12620 │ │               max_height: number;
 12621 │ │               base_width: number;
 12622 │ │               base_height: number;
 12623 │ │               width_inc: number;
 12624 │ │               height_inc: number;
 12625 │ │               min_aspect: number;
 12626 │ │               max_aspect: number;
 12627 │ │               win_gravity: Gravity;
 12628 │ │   
 12629 │ │               // Constructors
 12630 │ │   
 12631 │ │               _init(...args: any[]): void;
 12632 │ │           }
 12633 │ │   
 12634 │ │           /**
 12635 │ │            * A #GdkKeymapKey is a hardware key that can be mapped to a keyval.
 12636 │ │            */
 12637 │ │           class KeymapKey {
 12638 │ │               static $gtype: GObject.GType<KeymapKey>;
 12639 │ │   
 12640 │ │               // Fields
 12641 │ │   
 12642 │ │               keycode: number;
 12643 │ │               group: number;
 12644 │ │               level: number;
 12645 │ │   
 12646 │ │               // Constructors
 12647 │ │   
 12648 │ │               constructor(
 12649 │ │                   properties?: Partial<{
 12650 │ │                       keycode: number;
 12651 │ │                       group: number;
 12652 │ │                       level: number;
 12653 │ │                   }>,
 12654 │ │               );
 12655 │ │               _init(...args: any[]): void;
 12656 │ │           }
 12657 │ │   
 12658 │ │           type MonitorClass = typeof Monitor;
 12659 │ │           /**
 12660 │ │            * Defines the x and y coordinates of a point.
 12661 │ │            */
 12662 │ │           class Point {
 12663 │ │               static $gtype: GObject.GType<Point>;
 12664 │ │   
 12665 │ │               // Fields
 12666 │ │   
 12667 │ │               x: number;
 12668 │ │               y: number;
 12669 │ │   
 12670 │ │               // Constructors
 12671 │ │   
 12672 │ │               constructor(
 12673 │ │                   properties?: Partial<{
 12674 │ │                       x: number;
 12675 │ │                       y: number;
 12676 │ │                   }>,
 12677 │ │               );
 12678 │ │               _init(...args: any[]): void;
 12679 │ │           }
 12680 │ │   
 12681 │ │           /**
 12682 │ │            * A #GdkRGBA is used to represent a (possibly translucent)
 12683 │ │            * color, in a way that is compatible with cairo’s notion of color.
 12684 │ │            */
 12685 │ │           class RGBA {
 12686 │ │               static $gtype: GObject.GType<RGBA>;
 12687 │ │   
 12688 │ │               // Fields
 12689 │ │   
 12690 │ │               red: number;
 12691 │ │               green: number;
 12692 │ │               blue: number;
 12693 │ │               alpha: number;
 12694 │ │   
 12695 │ │               // Constructors
 12696 │ │   
 12697 │ │               constructor(
 12698 │ │                   properties?: Partial<{
 12699 │ │                       red: number;
 12700 │ │                       green: number;
 12701 │ │                       blue: number;
 12702 │ │                       alpha: number;
 12703 │ │                   }>,
 12704 │ │               );
 12705 │ │               _init(...args: any[]): void;
 12706 │ │   
 12707 │ │               // Methods
 12708 │ │   
 12709 │ │               /**
 12710 │ │                * Makes a copy of a #GdkRGBA.
 12711 │ │                *
 12712 │ │                * The result must be freed through gdk_rgba_free().
 12713 │ │                * @returns A newly allocated #GdkRGBA, with the same contents as @rgba
 12714 │ │                */
 12715 │ │               copy(): RGBA;
 12716 │ │               /**
 12717 │ │                * Compares two RGBA colors.
 12718 │ │                * @param p2 another #GdkRGBA pointer
 12719 │ │                * @returns %TRUE if the two colors compare equal
 12720 │ │                */
 12721 │ │               equal(p2: RGBA): boolean;
 12722 │ │               /**
 12723 │ │                * Frees a #GdkRGBA created with gdk_rgba_copy()
 12724 │ │                */
 12725 │ │               free(): void;
 12726 │ │               /**
 12727 │ │                * A hash function suitable for using for a hash
 12728 │ │                * table that stores #GdkRGBAs.
 12729 │ │                * @returns The hash value for @p
 12730 │ │                */
 12731 │ │               hash(): number;
 12732 │ │               /**
 12733 │ │                * Parses a textual representation of a color, filling in
 12734 │ │                * the `red,` `green,` `blue` and `alpha` fields of the `rgba` #GdkRGBA.
 12735 │ │                *
 12736 │ │                * The string can be either one of:
 12737 │ │                * - A standard name (Taken from the X11 rgb.txt file).
 12738 │ │                * - A hexadecimal value in the form “\#rgb”, “\#rrggbb”,
 12739 │ │                *   “\#rrrgggbbb” or ”\#rrrrggggbbbb”
 12740 │ │                * - A RGB color in the form “rgb(r,g,b)” (In this case the color will
 12741 │ │                *   have full opacity)
 12742 │ │                * - A RGBA color in the form “rgba(r,g,b,a)”
 12743 │ │                *
 12744 │ │                * Where “r”, “g”, “b” and “a” are respectively the red, green, blue and
 12745 │ │                * alpha color values. In the last two cases, “r”, “g”, and “b” are either integers
 12746 │ │                * in the range 0 to 255 or percentage values in the range 0% to 100%, and
 12747 │ │                * a is a floating point value in the range 0 to 1.
 12748 │ │                * @param spec the string specifying the color
 12749 │ │                * @returns %TRUE if the parsing succeeded
 12750 │ │                */
 12751 │ │               parse(spec: string): boolean;
 12752 │ │               /**
 12753 │ │                * Returns a textual specification of `rgba` in the form
 12754 │ │                * `rgb(r,g,b)` or
 12755 │ │                * `rgba(r g,b,a)`,
 12756 │ │                * where “r”, “g”, “b” and “a” represent the red, green,
 12757 │ │                * blue and alpha values respectively. “r”, “g”, and “b” are
 12758 │ │                * represented as integers in the range 0 to 255, and “a”
 12759 │ │                * is represented as a floating point value in the range 0 to 1.
 12760 │ │                *
 12761 │ │                * These string forms are string forms that are supported by
 12762 │ │                * the CSS3 colors module, and can be parsed by gdk_rgba_parse().
 12763 │ │                *
 12764 │ │                * Note that this string representation may lose some
 12765 │ │                * precision, since “r”, “g” and “b” are represented as 8-bit
 12766 │ │                * integers. If this is a concern, you should use a
 12767 │ │                * different representation.
 12768 │ │                * @returns A newly allocated text string
 12769 │ │                */
 12770 │ │               to_string(): string;
 12771 │ │           }
 12772 │ │   
 12773 │ │           /**
 12774 │ │            * Defines the position and size of a rectangle. It is identical to
 12775 │ │            * #cairo_rectangle_int_t.
 12776 │ │            */
 12777 │ │           class Rectangle {
 12778 │ │               static $gtype: GObject.GType<Rectangle>;
 12779 │ │   
 12780 │ │               // Fields
 12781 │ │   
 12782 │ │               x: number;
 12783 │ │               y: number;
 12784 │ │               width: number;
 12785 │ │               height: number;
 12786 │ │   
 12787 │ │               // Constructors
 12788 │ │   
 12789 │ │               constructor(
 12790 │ │                   properties?: Partial<{
 12791 │ │                       x: number;
 12792 │ │                       y: number;
 12793 │ │                       width: number;
 12794 │ │                       height: number;
 12795 │ │                   }>,
 12796 │ │               );
 12797 │ │               _init(...args: any[]): void;
 12798 │ │   
 12799 │ │               // Methods
 12800 │ │   
 12801 │ │               /**
 12802 │ │                * Checks if the two given rectangles are equal.
 12803 │ │                * @param rect2 a #GdkRectangle
 12804 │ │                * @returns %TRUE if the rectangles are equal.
 12805 │ │                */
 12806 │ │               equal(rect2: Rectangle): boolean;
 12807 │ │               /**
 12808 │ │                * Calculates the intersection of two rectangles. It is allowed for
 12809 │ │                * `dest` to be the same as either `src1` or `src2`. If the rectangles
 12810 │ │                * do not intersect, `dest’`s width and height is set to 0 and its x
 12811 │ │                * and y values are undefined. If you are only interested in whether
 12812 │ │                * the rectangles intersect, but not in the intersecting area itself,
 12813 │ │                * pass %NULL for `dest`.
 12814 │ │                * @param src2 a #GdkRectangle
 12815 │ │                * @returns %TRUE if the rectangles intersect.
 12816 │ │                */
 12817 │ │               intersect(src2: Rectangle): [boolean, Rectangle | null];
 12818 │ │               /**
 12819 │ │                * Calculates the union of two rectangles.
 12820 │ │                * The union of rectangles `src1` and `src2` is the smallest rectangle which
 12821 │ │                * includes both `src1` and `src2` within it.
 12822 │ │                * It is allowed for `dest` to be the same as either `src1` or `src2`.
 12823 │ │                *
 12824 │ │                * Note that this function does not ignore 'empty' rectangles (ie. with
 12825 │ │                * zero width or height).
 12826 │ │                * @param src2 a #GdkRectangle
 12827 │ │                */
 12828 │ │               union(src2: Rectangle): Rectangle;
 12829 │ │           }
 12830 │ │   
 12831 │ │           /**
 12832 │ │            * A #GdkTimeCoord stores a single event in a motion history.
 12833 │ │            */
 12834 │ │           class TimeCoord {
 12835 │ │               static $gtype: GObject.GType<TimeCoord>;
 12836 │ │   
 12837 │ │               // Fields
 12838 │ │   
 12839 │ │               time: number;
 12840 │ │               axes: number[];
 12841 │ │   
 12842 │ │               // Constructors
 12843 │ │   
 12844 │ │               constructor(
 12845 │ │                   properties?: Partial<{
 12846 │ │                       time: number;
 12847 │ │                       axes: number[];
 12848 │ │                   }>,
 12849 │ │               );
 12850 │ │               _init(...args: any[]): void;
 12851 │ │           }
 12852 │ │   
 12853 │ │           /**
 12854 │ │            * Attributes to use for a newly-created window.
 12855 │ │            */
 12856 │ │           class WindowAttr {
 12857 │ │               static $gtype: GObject.GType<WindowAttr>;
 12858 │ │   
 12859 │ │               // Fields
 12860 │ │   
 12861 │ │               title: string;
 12862 │ │               event_mask: number;
 12863 │ │               x: number;
 12864 │ │               y: number;
 12865 │ │               width: number;
 12866 │ │               height: number;
 12867 │ │               wclass: WindowWindowClass;
 12868 │ │               visual: Visual;
 12869 │ │               window_type: WindowType;
 12870 │ │               cursor: Cursor;
 12871 │ │               wmclass_name: string;
 12872 │ │               wmclass_class: string;
 12873 │ │               override_redirect: boolean;
 12874 │ │               type_hint: WindowTypeHint;
 12875 │ │   
 12876 │ │               // Constructors
 12877 │ │   
 12878 │ │               _init(...args: any[]): void;
 12879 │ │           }
 12880 │ │   
 12881 │ │           type WindowClass = typeof Window;
 12882 │ │           abstract class WindowRedirect {
 12883 │ │               static $gtype: GObject.GType<WindowRedirect>;
 12884 │ │   
 12885 │ │               // Constructors
 12886 │ │   
 12887 │ │               _init(...args: any[]): void;
 12888 │ │           }
 12889 │ │   
 12890 │ │           /**
 12891 │ │            * A #GdkEvent contains a union of all of the event types,
 12892 │ │            * and allows access to the data fields in a number of ways.
 12893 │ │            *
 12894 │ │            * The event type is always the first field in all of the event types, and
 12895 │ │            * can always be accessed with the following code, no matter what type of
 12896 │ │            * event it is:
 12897 │ │            *
 12898 │ │            * ```c
 12899 │ │            *   GdkEvent *event;
 12900 │ │            *   GdkEventType type;
 12901 │ │            *
 12902 │ │            *   type = event->type;
 12903 │ │            * ```
 12904 │ │            *
 12905 │ │            *
 12906 │ │            * To access other fields of the event, the pointer to the event
 12907 │ │            * can be cast to the appropriate event type, or the union member
 12908 │ │            * name can be used. For example if the event type is %GDK_BUTTON_PRESS
 12909 │ │            * then the x coordinate of the button press can be accessed with:
 12910 │ │            *
 12911 │ │            * ```c
 12912 │ │            *   GdkEvent *event;
 12913 │ │            *   gdouble x;
 12914 │ │            *
 12915 │ │            *   x = ((GdkEventButton*)event)->x;
 12916 │ │            * ```
 12917 │ │            *
 12918 │ │            * or:
 12919 │ │            *
 12920 │ │            * ```c
 12921 │ │            *   GdkEvent *event;
 12922 │ │            *   gdouble x;
 12923 │ │            *
 12924 │ │            *   x = event->button.x;
 12925 │ │            * ```
 12926 │ │            *
 12927 │ │            */
 12928 │ │           class Event {
 12929 │ │               static $gtype: GObject.GType<Event>;
 12930 │ │   
 12931 │ │               // Fields
 12932 │ │   
 12933 │ │               type: EventType;
 12934 │ │   
 12935 │ │               // Constructors
 12936 │ │   
 12937 │ │               constructor(type: EventType);
 12938 │ │               _init(...args: any[]): void;
 12939 │ │   
 12940 │ │               static ['new'](type: EventType): Event;
 12941 │ │   
 12942 │ │               // Static methods
 12943 │ │   
 12944 │ │               /**
 12945 │ │                * Checks all open displays for a #GdkEvent to process,to be processed
 12946 │ │                * on, fetching events from the windowing system if necessary.
 12947 │ │                * See gdk_display_get_event().
 12948 │ │                */
 12949 │ │               static get(): Event | null;
 12950 │ │               /**
 12951 │ │                * Sets the function to call to handle all events from GDK.
 12952 │ │                *
 12953 │ │                * Note that GTK+ uses this to install its own event handler, so it is
 12954 │ │                * usually not useful for GTK+ applications. (Although an application
 12955 │ │                * can call this function then call gtk_main_do_event() to pass
 12956 │ │                * events to GTK+.)
 12957 │ │                * @param func the function to call to handle events from GDK.
 12958 │ │                */
 12959 │ │               static handler_set(func: EventFunc): void;
 12960 │ │               /**
 12961 │ │                * If there is an event waiting in the event queue of some open
 12962 │ │                * display, returns a copy of it. See gdk_display_peek_event().
 12963 │ │                */
 12964 │ │               static peek(): Event | null;
 12965 │ │               /**
 12966 │ │                * Request more motion notifies if `event` is a motion notify hint event.
 12967 │ │                *
 12968 │ │                * This function should be used instead of gdk_window_get_pointer() to
 12969 │ │                * request further motion notifies, because it also works for extension
 12970 │ │                * events where motion notifies are provided for devices other than the
 12971 │ │                * core pointer. Coordinate extraction, processing and requesting more
 12972 │ │                * motion events from a %GDK_MOTION_NOTIFY event usually works like this:
 12973 │ │                *
 12974 │ │                *
 12975 │ │                * ```c
 12976 │ │                * {
 12977 │ │                *   // motion_event handler
 12978 │ │                *   x = motion_event->x;
 12979 │ │                *   y = motion_event->y;
 12980 │ │                *   // handle (x,y) motion
 12981 │ │                *   gdk_event_request_motions (motion_event); // handles is_hint events
 12982 │ │                * }
 12983 │ │                * ```
 12984 │ │                *
 12985 │ │                * @param event a valid #GdkEvent
 12986 │ │                */
 12987 │ │               static request_motions(event: EventMotion): void;
 12988 │ │   
 12989 │ │               // Methods
 12990 │ │   
 12991 │ │               /**
 12992 │ │                * If both events contain X/Y information, this function will return %TRUE
 12993 │ │                * and return in `angle` the relative angle from `event1` to `event2`. The rotation
 12994 │ │                * direction for positive angles is from the positive X axis towards the positive
 12995 │ │                * Y axis.
 12996 │ │                * @param event2 second #GdkEvent
 12997 │ │                * @returns %TRUE if the angle could be calculated.
 12998 │ │                */
 12999 │ │               _get_angle(event2: Event): [boolean, number];
 13000 │ │               /**
 13001 │ │                * If both events contain X/Y information, the center of both coordinates
 13002 │ │                * will be returned in `x` and `y`.
 13003 │ │                * @param event2 second #GdkEvent
 13004 │ │                * @returns %TRUE if the center could be calculated.
 13005 │ │                */
 13006 │ │               _get_center(event2: Event): [boolean, number, number];
 13007 │ │               /**
 13008 │ │                * If both events have X/Y information, the distance between both coordinates
 13009 │ │                * (as in a straight line going from `event1` to `event2`) will be returned.
 13010 │ │                * @param event2 second #GdkEvent
 13011 │ │                * @returns %TRUE if the distance could be calculated.
 13012 │ │                */
 13013 │ │               _get_distance(event2: Event): [boolean, number];
 13014 │ │               /**
 13015 │ │                * Copies a #GdkEvent, copying or incrementing the reference count of the
 13016 │ │                * resources associated with it (e.g. #GdkWindow’s and strings).
 13017 │ │                * @returns a copy of @event. The returned #GdkEvent should be freed with gdk_event_free().
 13018 │ │                */
 13019 │ │               copy(): Event;
 13020 │ │               /**
 13021 │ │                * Frees a #GdkEvent, freeing or decrementing any resources associated with it.
 13022 │ │                * Note that this function should only be called with events returned from
 13023 │ │                * functions such as gdk_event_peek(), gdk_event_get(), gdk_event_copy()
 13024 │ │                * and gdk_event_new().
 13025 │ │                */
 13026 │ │               free(): void;
 13027 │ │               /**
 13028 │ │                * Extract the axis value for a particular axis use from
 13029 │ │                * an event structure.
 13030 │ │                * @param axis_use the axis use to look for
 13031 │ │                * @returns %TRUE if the specified axis was found, otherwise %FALSE
 13032 │ │                */
 13033 │ │               get_axis(axis_use: AxisUse | null): [boolean, number];
 13034 │ │               /**
 13035 │ │                * Extract the button number from an event.
 13036 │ │                * @returns %TRUE if the event delivered a button number
 13037 │ │                */
 13038 │ │               get_button(): [boolean, number];
 13039 │ │               /**
 13040 │ │                * Extracts the click count from an event.
 13041 │ │                * @returns %TRUE if the event delivered a click count
 13042 │ │                */
 13043 │ │               get_click_count(): [boolean, number];
 13044 │ │               /**
 13045 │ │                * Extract the event window relative x/y coordinates from an event.
 13046 │ │                * @returns %TRUE if the event delivered event window coordinates
 13047 │ │                */
 13048 │ │               get_coords(): [boolean, number, number];
 13049 │ │               /**
 13050 │ │                * If the event contains a “device” field, this function will return
 13051 │ │                * it, else it will return %NULL.
 13052 │ │                * @returns a #GdkDevice, or %NULL.
 13053 │ │                */
 13054 │ │               get_device(): Device | null;
 13055 │ │               /**
 13056 │ │                * If the event was generated by a device that supports
 13057 │ │                * different tools (eg. a tablet), this function will
 13058 │ │                * return a #GdkDeviceTool representing the tool that
 13059 │ │                * caused the event. Otherwise, %NULL will be returned.
 13060 │ │                *
 13061 │ │                * Note: the #GdkDeviceTool<!-- -->s will be constant during
 13062 │ │                * the application lifetime, if settings must be stored
 13063 │ │                * persistently across runs, see gdk_device_tool_get_serial()
 13064 │ │                * @returns The current device tool, or %NULL
 13065 │ │                */
 13066 │ │               get_device_tool(): DeviceTool;
 13067 │ │               /**
 13068 │ │                * If `event` if of type %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
 13069 │ │                * %GDK_TOUCH_END or %GDK_TOUCH_CANCEL, returns the #GdkEventSequence
 13070 │ │                * to which the event belongs. Otherwise, return %NULL.
 13071 │ │                * @returns the event sequence that the event belongs to
 13072 │ │                */
 13073 │ │               get_event_sequence(): EventSequence;
 13074 │ │               /**
 13075 │ │                * Retrieves the type of the event.
 13076 │ │                * @returns a #GdkEventType
 13077 │ │                */
 13078 │ │               get_event_type(): EventType;
 13079 │ │               /**
 13080 │ │                * Extracts the hardware keycode from an event.
 13081 │ │                *
 13082 │ │                * Also see gdk_event_get_scancode().
 13083 │ │                * @returns %TRUE if the event delivered a hardware keycode
 13084 │ │                */
 13085 │ │               get_keycode(): [boolean, number];
 13086 │ │               /**
 13087 │ │                * Extracts the keyval from an event.
 13088 │ │                * @returns %TRUE if the event delivered a key symbol
 13089 │ │                */
 13090 │ │               get_keyval(): [boolean, number];
 13091 │ │               /**
 13092 │ │                * #event: a #GdkEvent
 13093 │ │                * Returns whether this event is an 'emulated' pointer event (typically
 13094 │ │                * from a touch event), as opposed to a real one.
 13095 │ │                * @returns %TRUE if this event is emulated
 13096 │ │                */
 13097 │ │               get_pointer_emulated(): boolean;
 13098 │ │               /**
 13099 │ │                * Extract the root window relative x/y coordinates from an event.
 13100 │ │                * @returns %TRUE if the event delivered root window coordinates
 13101 │ │                */
 13102 │ │               get_root_coords(): [boolean, number, number];
 13103 │ │               /**
 13104 │ │                * Gets the keyboard low-level scancode of a key event.
 13105 │ │                *
 13106 │ │                * This is usually hardware_keycode. On Windows this is the high
 13107 │ │                * word of WM_KEY{DOWN,UP} lParam which contains the scancode and
 13108 │ │                * some extended flags.
 13109 │ │                * @returns The associated keyboard scancode or 0
 13110 │ │                */
 13111 │ │               get_scancode(): number;
 13112 │ │               /**
 13113 │ │                * Returns the screen for the event. The screen is
 13114 │ │                * typically the screen for `event->any.window`, but
 13115 │ │                * for events such as mouse events, it is the screen
 13116 │ │                * where the pointer was when the event occurs -
 13117 │ │                * that is, the screen which has the root window
 13118 │ │                * to which `event->motion.x_root` and
 13119 │ │                * `event->motion.y_root` are relative.
 13120 │ │                * @returns the screen for the event
 13121 │ │                */
 13122 │ │               get_screen(): Screen;
 13123 │ │               /**
 13124 │ │                * Retrieves the scroll deltas from a #GdkEvent
 13125 │ │                *
 13126 │ │                * See also: gdk_event_get_scroll_direction()
 13127 │ │                * @returns %TRUE if the event contains smooth scroll information   and %FALSE otherwise
 13128 │ │                */
 13129 │ │               get_scroll_deltas(): [boolean, number, number];
 13130 │ │               /**
 13131 │ │                * Extracts the scroll direction from an event.
 13132 │ │                *
 13133 │ │                * If `event` is not of type %GDK_SCROLL, the contents of `direction`
 13134 │ │                * are undefined.
 13135 │ │                *
 13136 │ │                * If you wish to handle both discrete and smooth scrolling, you
 13137 │ │                * should check the return value of this function, or of
 13138 │ │                * gdk_event_get_scroll_deltas(); for instance:
 13139 │ │                *
 13140 │ │                *
 13141 │ │                * ```c
 13142 │ │                *   GdkScrollDirection direction;
 13143 │ │                *   double vscroll_factor = 0.0;
 13144 │ │                *   double x_scroll, y_scroll;
 13145 │ │                *
 13146 │ │                *   if (gdk_event_get_scroll_direction (event, &direction))
 13147 │ │                *     {
 13148 │ │                *       // Handle discrete scrolling with a known constant delta;
 13149 │ │                *       const double delta = 12.0;
 13150 │ │                *
 13151 │ │                *       switch (direction)
 13152 │ │                *         {
 13153 │ │                *         case GDK_SCROLL_UP:
 13154 │ │                *           vscroll_factor = -delta;
 13155 │ │                *           break;
 13156 │ │                *         case GDK_SCROLL_DOWN:
 13157 │ │                *           vscroll_factor = delta;
 13158 │ │                *           break;
 13159 │ │                *         default:
 13160 │ │                *           // no scrolling
 13161 │ │                *           break;
 13162 │ │                *         }
 13163 │ │                *     }
 13164 │ │                *   else if (gdk_event_get_scroll_deltas (event, &x_scroll, &y_scroll))
 13165 │ │                *     {
 13166 │ │                *       // Handle smooth scrolling directly
 13167 │ │                *       vscroll_factor = y_scroll;
 13168 │ │                *     }
 13169 │ │                * ```
 13170 │ │                *
 13171 │ │                * @returns %TRUE if the event delivered a scroll direction   and %FALSE otherwise
 13172 │ │                */
 13173 │ │               get_scroll_direction(): [boolean, ScrollDirection];
 13174 │ │               /**
 13175 │ │                * Returns the #GdkSeat this event was generated for.
 13176 │ │                * @returns The #GdkSeat of this event
 13177 │ │                */
 13178 │ │               get_seat(): Seat;
 13179 │ │               /**
 13180 │ │                * This function returns the hardware (slave) #GdkDevice that has
 13181 │ │                * triggered the event, falling back to the virtual (master) device
 13182 │ │                * (as in gdk_event_get_device()) if the event wasn’t caused by
 13183 │ │                * interaction with a hardware device. This may happen for example
 13184 │ │                * in synthesized crossing events after a #GdkWindow updates its
 13185 │ │                * geometry or a grab is acquired/released.
 13186 │ │                *
 13187 │ │                * If the event does not contain a device field, this function will
 13188 │ │                * return %NULL.
 13189 │ │                * @returns a #GdkDevice, or %NULL.
 13190 │ │                */
 13191 │ │               get_source_device(): Device | null;
 13192 │ │               /**
 13193 │ │                * If the event contains a “state” field, puts that field in `state`. Otherwise
 13194 │ │                * stores an empty state (0). Returns %TRUE if there was a state field
 13195 │ │                * in the event. `event` may be %NULL, in which case it’s treated
 13196 │ │                * as if the event had no state field.
 13197 │ │                * @returns %TRUE if there was a state field in the event
 13198 │ │                */
 13199 │ │               get_state(): [boolean, ModifierType];
 13200 │ │               /**
 13201 │ │                * Returns the time stamp from `event,` if there is one; otherwise
 13202 │ │                * returns #GDK_CURRENT_TIME. If `event` is %NULL, returns #GDK_CURRENT_TIME.
 13203 │ │                * @returns time stamp field from @event
 13204 │ │                */
 13205 │ │               get_time(): number;
 13206 │ │               /**
 13207 │ │                * Extracts the #GdkWindow associated with an event.
 13208 │ │                * @returns The #GdkWindow associated with the event
 13209 │ │                */
 13210 │ │               get_window(): Window;
 13211 │ │               /**
 13212 │ │                * Check whether a scroll event is a stop scroll event. Scroll sequences
 13213 │ │                * with smooth scroll information may provide a stop scroll event once the
 13214 │ │                * interaction with the device finishes, e.g. by lifting a finger. This
 13215 │ │                * stop scroll event is the signal that a widget may trigger kinetic
 13216 │ │                * scrolling based on the current velocity.
 13217 │ │                *
 13218 │ │                * Stop scroll events always have a a delta of 0/0.
 13219 │ │                * @returns %TRUE if the event is a scroll stop event
 13220 │ │                */
 13221 │ │               is_scroll_stop_event(): boolean;
 13222 │ │               /**
 13223 │ │                * Appends a copy of the given event onto the front of the event
 13224 │ │                * queue for event->any.window’s display, or the default event
 13225 │ │                * queue if event->any.window is %NULL. See gdk_display_put_event().
 13226 │ │                */
 13227 │ │               put(): void;
 13228 │ │               /**
 13229 │ │                * Sets the device for `event` to `device`. The event must
 13230 │ │                * have been allocated by GTK+, for instance, by
 13231 │ │                * gdk_event_copy().
 13232 │ │                * @param device a #GdkDevice
 13233 │ │                */
 13234 │ │               set_device(device: Device): void;
 13235 │ │               /**
 13236 │ │                * Sets the device tool for this event, should be rarely used.
 13237 │ │                * @param tool tool to set on the event, or %NULL
 13238 │ │                */
 13239 │ │               set_device_tool(tool?: DeviceTool | null): void;
 13240 │ │               /**
 13241 │ │                * Sets the screen for `event` to `screen`. The event must
 13242 │ │                * have been allocated by GTK+, for instance, by
 13243 │ │                * gdk_event_copy().
 13244 │ │                * @param screen a #GdkScreen
 13245 │ │                */
 13246 │ │               set_screen(screen: Screen): void;
 13247 │ │               /**
 13248 │ │                * Sets the slave device for `event` to `device`.
 13249 │ │                *
 13250 │ │                * The event must have been allocated by GTK+,
 13251 │ │                * for instance by gdk_event_copy().
 13252 │ │                * @param device a #GdkDevice
 13253 │ │                */
 13254 │ │               set_source_device(device: Device): void;
 13255 │ │               /**
 13256 │ │                * This function returns whether a #GdkEventButton should trigger a
 13257 │ │                * context menu, according to platform conventions. The right mouse
 13258 │ │                * button always triggers context menus. Additionally, if
 13259 │ │                * gdk_keymap_get_modifier_mask() returns a non-0 mask for
 13260 │ │                * %GDK_MODIFIER_INTENT_CONTEXT_MENU, then the left mouse button will
 13261 │ │                * also trigger a context menu if this modifier is pressed.
 13262 │ │                *
 13263 │ │                * This function should always be used instead of simply checking for
 13264 │ │                * event->button == %GDK_BUTTON_SECONDARY.
 13265 │ │                * @returns %TRUE if the event should trigger a context menu.
 13266 │ │                */
 13267 │ │               triggers_context_menu(): boolean;
 13268 │ │           }
 13269 │ │   
 13270 │ │           namespace DevicePad {
 13271 │ │               // Constructor properties interface
 13272 │ │   
 13273 │ │               interface ConstructorProps extends Device.ConstructorProps {}
 13274 │ │           }
 13275 │ │   
 13276 │ │           export interface DevicePadNamespace {
 13277 │ │               $gtype: GObject.GType<DevicePad>;
 13278 │ │               prototype: DevicePad;
 13279 │ │           }
 13280 │ │           interface DevicePad extends Device {
 13281 │ │               // Methods
 13282 │ │   
 13283 │ │               /**
 13284 │ │                * Returns the group the given `feature` and `idx` belong to,
 13285 │ │                * or -1 if feature/index do not exist in `pad`.
 13286 │ │                * @param feature the feature type to get the group from
 13287 │ │                * @param feature_idx the index of the feature to get the group from
 13288 │ │                * @returns The group number of the queried pad feature.
 13289 │ │                */
 13290 │ │               get_feature_group(feature: DevicePadFeature | null, feature_idx: number): number;
 13291 │ │               /**
 13292 │ │                * Returns the number of modes that `group` may have.
 13293 │ │                * @param group_idx group to get the number of available modes from
 13294 │ │                * @returns The number of modes available in @group.
 13295 │ │                */
 13296 │ │               get_group_n_modes(group_idx: number): number;
 13297 │ │               /**
 13298 │ │                * Returns the number of features a tablet pad has.
 13299 │ │                * @param feature a pad feature
 13300 │ │                * @returns The amount of elements of type @feature that this pad has.
 13301 │ │                */
 13302 │ │               get_n_features(feature: DevicePadFeature | null): number;
 13303 │ │               /**
 13304 │ │                * Returns the number of groups this pad device has. Pads have
 13305 │ │                * at least one group. A pad group is a subcollection of
 13306 │ │                * buttons/strip/rings that is affected collectively by a same
 13307 │ │                * current mode.
 13308 │ │                * @returns The number of button/ring/strip groups in the pad.
 13309 │ │                */
 13310 │ │               get_n_groups(): number;
 13311 │ │           }
 13312 │ │   
 13313 │ │           export const DevicePad: DevicePadNamespace & {
 13314 │ │               new (): DevicePad; // This allows `obj instanceof DevicePad`
 13315 │ │           };
 13316 │ │   
 13317 │ │           type XEvent = void;
 13318 │ │           /**
 13319 │ │            * Name of the imported GIR library
 13320 │ │            * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L188
 13321 │ │            */
 13322 │ │           const __name__: string;
 13323 │ │           /**
 13324 │ │            * Version of the imported GIR library
 13325 │ │            * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L189
 13326 │ │            */
 13327 │ │           const __version__: string;
 13328 │ │       }
 13329 │ │   
 13330 │ │       export default Gdk;
 13331 │ │   }
 13332 │ │   
 13333 │ │   declare module 'gi://Gdk' {
 13334 │ │       import Gdk30 from 'gi://Gdk?version=3.0';
 13335 │ │       export default Gdk30;
 13336 │ │   }
 13337 │ ├─▶ // END
       · ╰──── tag
       ╰────

