;;          ╭─────────────────────────────────────────────────────────╮
;;          │                         TOPBAR                          │
;;          ╰─────────────────────────────────────────────────────────╯

;; ══ WIDGETS ═════════════════════════════════════════════════════════


(defwidget bluetooth []
  (box
    (eventbox
      (box
        (label :text "󰂯")
      )
    )
  )
)
(defwidget wifi []
  (box
    (eventbox
      (box
        (label :text "")
      )
    )
  )
)





;; ╭─ Rofi ───────────────────────────────────────────────────────────╮
(defvar rofi "eww update appToggle='on' && rofi -show drun -theme ~/.config/rofi/themes/Applauncher/Applauncher.rasi &")
(defvar appToggle "off")
(defwidget appLauncher [] 
  (box :class "dark-box" :width 37
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${appToggle == "off" ? rofi : "eww update appToggle='off' && killall rofi"}" 
      (label :text "󰣇" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Hyproverview ───────────────────────────────────────────────────╮
(defvar hyprOverview "hyprctl dispatch overview:toggle &")
(defwidget hyprOverview []
  (box :class "light-box" :width 35
    (eventbox :cursor "pointer" :class "barEvent" :onclick {hyprOverview}
      (label :text "󰹰" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Quick settings ─────────────────────────────────────────────────╮

(defvar settingsOpen1 "eww update settingsToggle='on' && eww open settingsWindow --screen 0")
(defvar settingsOpen2 "eww update settingsToggle='on' && eww open settingsWindow --screen 1")
(defvar settingsClose "eww update settingsToggle='off' && eww close settingsWindow")
(defvar settingsToggle "off")
(defwidget settingsButton1 []
  (box :class "barBox" :width "40"
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${settingsToggle == "off" ? settingsOpen1 :
        settingsClose}" 
      (label :text "" :class "singleIcon")
    )
  )
)
(defwidget settingsButton2 []
  (box :class "barBox" :width "40"
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${settingsToggle == "off" ? settingsOpen2 :
        settingsClose}" 
      (label :text "" :class "singleIcon")
    )
  )
)

(defwidget settings [] 
  (box :class "barBox" :space-evenly false
    (box :class "list2-first"
      (eventbox :cursor "pointer" :class "barEvent" :width 30
        :onclick "${monToggle == "off" ? monitor : "eww update monToggle='off' && killall rofi"}" 
        (label :text "" :class "singleIcon")
      )
    )
    (hSpacer)
    (box :class "list2-last"
      (eventbox :cursor "pointer" :class "barEvent" :width 30
        :onclick "${wallToggle == "off" ? wallpaper : "eww update wallToggle='off' && killall rofi"}" 
        (label :text "󰸉" :class "singleIcon")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯


;; ══ center widgets ══════════════════════════════════════════════════





;; ╭─ Workspaces ─────────────────────────────────────────────────────╮
(deflisten getWS :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten getWS2 :initial "[]" "bash ~/.config/eww/scripts/get-workspaces2.sh")
(deflisten currWS :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true
      (label :text "${getWS}${currWS}" :visible false)
      (for ws in getWS
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer" :class "ws-hover"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}" ;;:width 40
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

(defwidget workspaces2 []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true :class "workspaceScroll"
      (label :text "${getWS2}${currWS}" :visible false)
      (for ws in getWS2
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer" :class "ws-hover"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}"
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Song ───────────────────────────────────────────────────────────╮
(deflisten songTitle :initial "Nothing" "playerctl --follow metadata --format {{title}}")
(deflisten songArtist :initial "Noone" "playerctl --follow metadata --format {{artist}}")
(defwidget song []
  (box
    (eventbox
      (box :class "light-box" :space-evenly false
        (label :text "‎ ${songTitle}" :limit-width 30 :wrap true)
        (label :text "‎ -‎ ")
        (label :text "${songArtist}‎ " :limit-width 30:wrap true)
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ RIGHT WIDGETS ═══════════════════════════════════════════════════

;; ╭─ Disk ───────────────────────────────────────────────────────────╮
(defwidget temp []
  (box :class "dark-box"
    (eventbox
      (box :space-evenly false
        (label :text "" :class "updates-off")
        (label :text "${EWW_TEMPS["AMDGPU_EDGE"]}°C" :class "updates-text")
        (label :text "${round(EWW_TEMPS["K10TEMP_TCTL"], 0)}°C" :class "updates-text")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯


;; ╭─ Disk ───────────────────────────────────────────────────────────╮
(defwidget cpu []
  (box :class "light-box"
    (eventbox
      (box :space-evenly false
        (label :text "" :class "updates-off")
        (label :text "${round(EWW_CPU["avg"], 1)}%" :class "updates-text")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Disk ───────────────────────────────────────────────────────────╮
(defwidget disk []
  (box :class "light-box"
    (eventbox
      (box :space-evenly false
        (label :text "" :class "updates-off")
        (label :text "${round(EWW_DISK["/"].used_perc, 1)}%" :class "updates-text")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ RAM ────────────────────────────────────────────────────────────╮
(defwidget ram []
  (box :class "dark-box" :space-evenly false
    (eventbox
      (box :space-evenly false
        (label :text "":class "updates-off")
        (label :text "${round(EWW_RAM["used_mem_perc"], 1)}%" :class "updates-text")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Updates ────────────────────────────────────────────────────────╮
(defvar updatesNumber "1")
(defwidget updates []
  (box :class "dark-box"
    (eventbox :class "barEvent" :cursor "pointer"
      :onclick "bash ~/.config/eww/scripts/updates.sh --amount &"
      (box :space-evenly false
        (tooltip
          (label :text "You have ${updatesNumber > 1 ? updatesNumber : 'no'} package updates available."
         :class "dark-box")
          (box
            (label :text "${updatesNumber > 1 ? '󰊠' : '󰧵'}"
              :class "${updatesNumber > 1 ? 'updates-on' : 'updates-off'}"
            )
            (label :text "${updatesNumber > 1 ? updatesNumber : '--'}" :class "updates-text")
          )
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Network ────────────────────────────────────────────────────────╮
(defwidget network []
  (box
    (eventbox
      (box :space-evenly false :class "light-box"
        (label :text "" :width 30)
        (label :text "${round(EWW_NET['eno1']['NET_DOWN']/1000, 1)}")
        (label :text "" :width 30)
        (label :text "${round(EWW_NET['eno1']['NET_UP']/1000, 1)}" :class "volume-text")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Brightness ─────────────────────────────────────────────────────╮
(defpoll current-brightness :interval "1s" "brightnessctl g")
(defvar brightnessToggle false)
(defwidget barBrightness []
  (box :class "dark-box :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update brightnessToggle=true"
      :onhoverlost "eww update brightnessToggle=false"
      :onscroll "bash ~/.config/eww/scripts/brightness_scroll.sh --{}"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-brightness == 0 ? '󰃝' :
            current-brightness < 40 ? '󰃞' :
            current-brightness < 100 ? '󰃟' : '󰃠'}"
          )
        )
        (revealer :transition "slideleft" :reveal brightnessToggle :duration "550ms"
          (box :space-evenly false
;            (scale :mix 0 :max 256 :orientation "h" :flipped false :halign "center" 
;            :value {current-brightness}
;            :onchange "brightnessctl s {}"
;            )
            (label :text "${round((current-brightness * 100) / 255, 0)}%" :class "volume-text")
          )
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Volume ─────────────────────────────────────────────────────────╮
(defpoll current-volume :interval "1s" 
  "amixer sget Master | grep 'Left: Playback' | awk '{ print $5 }' | tr -d '[%]'")
(defvar volumeToggle false)
(defwidget barVolume []
  (box :class "light-box :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update volumeToggle=true"
      :onhoverlost "eww update volumeToggle=false"
      :onscroll "bash ~/.config/eww/scripts/volume_scroll.sh --{}"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-volume == 0 ? '' :
            current-volume < 20 ? '' :
            current-volume < 51 ? '' : ''}"
          )
        )
        (revealer :transition "slideleft" :reveal volumeToggle :duration "550ms"
          (box :space-evenly false
;            (scale :mix 0 :max 101 :orientation "h" :flipped false :halign "center" :value {current-volume}
;            :onchange "amixer sset Master {}%"
;            )
            (label :text "${current-volume}%" :class "volume-text")
          )
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Indicators ─────────────────────────────────────────────────────╮
(defpoll numPoll :interval "1" :initial "off" `sed -n 1p /sys/class/leds/input*::numlock/brightness`)
(defpoll capsPoll :interval "1" :initial "off" `sed -n 1p /sys/class/leds/input*::capslock/brightness`)
(defwidget indicators []
  (box :class "dark-box" :space-evenly false
    (eventbox 
      (box :class "nums"  
        (label :text "󰎤" :class "${numPoll == 0 ? "off" : "on"}")
      )
    )
    (eventbox
      (box :class "caps"
        (label :text "󰬈" :class "${capsPoll == 0 ? "off" : "on"}")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯


;; ╭─ Battery ────────────────────────────────────────────────────────╮
(defpoll batPercent :interval "60s" `bash ~/.config/eww/scripts/battery.sh`)
(defvar batText "󰁹")
(defvar batClass "critical")
(defwidget battery []
  (box :class "light-box" 
    (eventbox       
      (box :class {batClass}
        (tooltip
          (label :text {batPercent} :class "default")
          (box :space-evenly false
            (label :text {batText} :class "singleIcon" :width 25)
            (label :text {batPercent} :class "bat-percent")
          )
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Time ───────────────────────────────────────────────────────────╮
(defpoll time :interval "10s" "date +%H:%M")
(defwidget time []
  (box :orientation "h" :space-evenly false :class "time"
    (eventbox :cursor "pointer" :class "barEvent"
      (label :text {time} :class "time-text")
    ) 
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Power menu ─────────────────────────────────────────────────────╮
(defvar PM1 "eww close bar leftBar && eww open powerMenu --screen 0 && eww update whichbar='bar leftBar' && bash ~/.config/eww/scripts/windows_number.sh")
(defwidget PM1 [] 
  (box :class "red-box" :width 35
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick {PM1} 
      (label :text "⏻" :class "singleIcon")
    )
  )
)
(defvar PM2 "eww close bar2 leftBar2 && eww open powerMenu --screen 1 && eww update whichbar='bar2 leftBar2' && bash ~/.config/eww/scripts/windows_number.sh")
(defwidget PM2 [] 
  (box :class "red-box" :width 35
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick {PM2} 
      (label :text "⏻" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;;          ╭─────────────────────────────────────────────────────────╮
;;          │                          SETUP                          │
;;          ╰─────────────────────────────────────────────────────────╯

(defwidget leftAll []
  (box :space-evenly false
    (song)
  )
)
(defwidget rightAll []
  (box :space-evenly false
    (temp)
    (cpu)
    (ram)
    (disk)
    (updates)
    (network)
    ;(wfi)
    ;(bluetooth)
    ;(updates)
    (barBrightness)
    (barVolume)
    ;(settingsButton1)
    (indicators)
    (battery)
    (time)
  )
)

;; ╭─ Bar ────────────────────────────────────────────────────────────╮
;; Different widgets based on monitor
(defwidget bar []
  (centerbox :class "default-top" :orientation "h" :space-evenly false
    (box :orientation "h" :halign "start" :space-evenly false
      (appLauncher)
      (hyprOverview)
      (workspaces)
      (leftAll)

    )
    (box :orientation "h" :halign "center" :space-evenly false
      ;(song)
    )
    (box :orientation "h" :halign "end" :space-evenly false
      (rightAll)
      (PM1)
    )
  )
)

(defwidget bar2 []
  (centerbox :class "default-top" :orientation "h" :space-evenly false
    (box :orientation "h" :halign "start" :space-evenly false 
      (appLauncher)
      (hyprOverview)
      (workspaces2)
      (leftAll)
    )
    (box :orientation "h" :halign "center" :space-evenly false 
      ;(song)
    )
    (box :orientation "h" :halign "end" :space-evenly false
      (rightAll)
      (PM2)
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ WINDOWS ═════════════════════════════════════════════════════════
;; ╭─ Bar monitor 0 ──────────────────────────────────────────────────╮
;; Needs to be (or at least idk how to do it otherwise) split for
;; multi monitor support
(defwindow bar 
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "35px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar))
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Bar monitor 1 ──────────────────────────────────────────────────╮
(defwindow bar2 
  :monitor 1
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "35px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar2))
;; ╰──────────────────────────────────────────────────────────────────╯
