;; WIDGETS
(defwidget mybar-dashboard []
  (box :class "mybar-dashboard" 
    (button :onrightclick "eww close dashboard-art waifu sysmon sissytray" :onclick "eww open-many dashboard-art waifu sysmon sissytray | scripts/waifu.sh" "󰣇")))

(defwidget mybar-launch []
  (box :class "mybar-launch"
  (button :onclick "eww open-many myapplauncher" "󰀻")))


(defwidget mybar-layout []
  (box :class "mybar-layout"
    (literal :content current-layout)))




(defwidget mybar-tags []
  (box :valign "center"
  (literal :content groups)
  ))

(defpoll volume-toggle :interval "1s" "scripts/toggle-mute.sh")
(defpoll current-volume :interval "1s" "amixer sget Master | grep 'Left: Playback' | awk '{ print $5 }' | tr -d '[%]'")
(defwidget mybar-volume []
  (box :class "mybar-volume" :orientation "v" :space-evenly false :tooltip {current-volume}
  (literal :content volume-toggle)
  ;;(button :valign "start" :vexpand false :onclick "amixer -D pulse set Master toggle" "")
  (scale :mix 0 :max 101 :orientation "v" :flipped true :halign "center" :value {current-volume}
    :onchange "amixer sset Master {}%" )))

(defpoll bright-toggle :interval "1s" "scripts/toggle-bright.sh")
(defpoll current-brightness :interval "1s" "scripts/brightness.sh")
(defwidget mybar-brightness []
  (box :class "mybar-brightness" :orientation "v" :space-evenly false :tooltip {current-brightness}
  (literal :content bright-toggle)
  (scale :min 10 :max 100 :orientation "v" :flipped true :halign "center" :value {current-brightness}
    :onchange "xrandr --output eDP-1 --brightness 0.{}" )))

(defvar mybat "")
(defpoll bat-script :interval "60s" "scripts/bat.sh")
(defwidget another-bat [bat_yuck]
  (literal :content bat-script))
(defwidget mybar-bat []
  (box ;:tooltip {bat-percent}
  (another-bat :bat_yuck {mybat})))

(defvar mynum "")
(defpoll num-script :interval "1s" "scripts/num.sh")
(defwidget another-num [num_yuck]
  (literal :content num-script))
(defwidget mybar-num []
  (box(another-num :num_yuck {mynum})))

(defvar mycaps "")
(defpoll caps-script :interval "1s" "scripts/caps.sh")
(defwidget another-caps [caps_yuck]
  (literal :content caps-script))
(defwidget mybar-caps []
  (box(another-caps :caps_yuck {mycaps})))

(defwidget mybar-clock []
  (box :class "mybar-date" :orientation "v"
    (box {hour})
    (box {min})))

(defwidget bar-power []
  (box :class "bar-power"
    (button :onclick "eww open-many closemypowermenu power-shutdown power-logout power-restart" "")))



; WINDOWS
;; App window
(defwindow mybar-dashboard :monitor 0 :stacking "fg" :wm-ignore false
   :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "10px" :width "50px" :height "50px")
  (mybar-dashboard))

(defwindow mybar-launch :monitor 0 :stacking "fg" :wm-ignore false
   :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "70px" :width "50px" :height "50px")
  (mybar-launch))

;; Layout-switcher window
(defwindow mybar-layout :monitor 0 :stacking "fg" :wm-ignore false
   :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "130px" :width "50px" :height "50px")
  (mybar-layout))

;; tags window
(defwindow mybar-tags :monitor 0 :stacking "fg" :wm-ignore false
   :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "190px" :width "50px" :height "190px")
  (mybar-tags))

;; Volume windoiw
(defwindow mybar-volume :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "390px" :width "50px" :height "160px" )
(mybar-volume))

;; Volume windoiw
(defwindow mybar-brightness :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left top" :x "10px" :y "560px" :width "50px" :height "160px" )
(mybar-brightness))

;; Battery window
(defwindow mybar-bat :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left bottom" :x "10px" :y "-300px" :width "50px" :height "50px")
  (mybar-bat))

;; NumLock window
(defwindow mybar-num :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
 :geometry (geometry :anchor "left bottom" :x "10px" :y "-240px" :width "50px" :height "50px")
  (mybar-num))

;; CapsLock window
(defwindow mybar-caps :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
  :geometry (geometry :anchor "left bottom" :x "10px" :y "-180px" :width "50px" :height "50px")
  (mybar-caps))

;; Clock window
(defwindow mybar-clock :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left")
  :geometry (geometry :anchor "left bottom" :x "10px" :y "-70px" :width "50px" :height "100px")
  (mybar-clock))

;; Powermenu window
(defwindow bar-power :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left") ;; qtile -> reserve stacks, awesomewm -> every widget needs reserve
  :geometry (geometry :anchor "left bottom" :x "10px" :y "-10px" :width "50px" :height "50px")
  (bar-power))


;; --- BIG BAR ---

(defvar toggle-settings-btn false)

(defwidget bar []
  (box :orientation "v" :class "default"
    (box :orientation "v" :valign "start" :space-evenly false
      (dashboard-btn)
      (mybar-layout)
      (mybar-tags)
    )
    (box :orientation "v" :valign "center" :space-evenly false
      (clock)
    )
    (box :orientation "v" :valign "end" :space-evenly false
      (mybar-bat)
      (settings-btn)
      (sissytray)
      (power-menu-btn)
    )
  )
)

(defwidget dashboard-btn []
  (eventbox :class "dashboard-btn" :cursor "pointer" 
    (button :onrightclick "eww close dashboard-art waifu sysmon sissytray" :onclick "eww open-many dashboard-art waifu sysmon sissytray | scripts/waifu.sh" "󰣇")))

(defwidget settings-btn []
  (eventbox :class "settings-btn" :cursor "pointer" :onhover "${EWW_CMD} update toggle-settings-btn=true" :onhoverlost "${EWW_CMD} update toggle-settings-btn=false"
    (box :orientation "v" :space-evenly false
      (revealer :transition "slidedown" :reveal toggle-settings-btn :duration "550ms"
        (box :orientation "v"
          (mybar-caps)
          (mybar-num)
        )
      )
      (button :onclick "eww open settings" "")
    )
  ) 
)

(defwidget clock []
  (box :class "clock" :orientation "v"
    {hour}
    {min}))
(defwidget sissytray []
  (eventbox :cursor "pointer"
    (systray :class "sissytray" :orientation "v" :space-evenly false :icon-size 25 :prepend-new true)
  )
)

(defwidget power-menu-btn []
  (eventbox :class "power-menu-btn" :cursor "pointer"
    (button :onclick "eww open-many closemypowermenu power-shutdown power-logout power-restart" "")))

(defwindow bar :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "60px" :side "left") ;; qtile -> reserve stacks, awesomewm -> every widget needs reserve
  :geometry (geometry :anchor "left bottom" :x "10px" :y "-10px" :width "50px" :height "1060px")
  (bar))

