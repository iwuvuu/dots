;;          ╭─────────────────────────────────────────────────────────╮
;;          │                         TOPBAR                          │
;;          ╰─────────────────────────────────────────────────────────╯

;; ══ WIDGETS ═════════════════════════════════════════════════════════

;; ╭─ Rofi ───────────────────────────────────────────────────────────╮
(defvar rofi "eww update appToggle='on' && rofi -show drun -theme ~/.config/rofi/themes/Applauncher/Applauncher.rasi &")
(defvar appToggle "off")
(defwidget appLauncher [] 
  (box :class "barBox" :width 40
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${appToggle == "off" ? rofi : "eww update appToggle='off' && killall rofi"}" 
      (label :text "󰣇" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Hyproverview ───────────────────────────────────────────────────╮
(defvar hyprOverview "hyprctl dispatch overview:toggle &")
(defwidget hyprOverview []
  (box :class "barBox" :width "40"
    (eventbox :cursor "pointer" :class "barEvent" :onclick {hyprOverview}
      (label :text "󰹰" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Quick settings ─────────────────────────────────────────────────╮

(defvar settingsOpen1 "eww update settingsToggle='on' && eww open settingsWindow --screen 0")
(defvar settingsOpen2 "eww update settingsToggle='on' && eww open settingsWindow --screen 1")
(defvar settingsClose "eww update settingsToggle='off' && eww close settingsWindow")
(defvar settingsToggle "off")
(defwidget settingsButton1 []
  (box :class "barBox" :width "40"
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${settingsToggle == "off" ? settingsOpen1 :
        settingsClose}" 
      (label :text "" :class "singleIcon")
    )
  )
)
(defwidget settingsButton2 []
  (box :class "barBox" :width "40"
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${settingsToggle == "off" ? settingsOpen2 :
        settingsClose}" 
      (label :text "" :class "singleIcon")
    )
  )
)

(defwidget settings [] 
  (box :class "barBox" :space-evenly false
    (box :class "list2-first"
      (eventbox :cursor "pointer" :class "barEvent" :width 30
        :onclick "${monToggle == "off" ? monitor : "eww update monToggle='off' && killall rofi"}" 
        (label :text "" :class "singleIcon")
      )
    )
    (hSpacer)
    (box :class "list2-last"
      (eventbox :cursor "pointer" :class "barEvent" :width 30
        :onclick "${wallToggle == "off" ? wallpaper : "eww update wallToggle='off' && killall rofi"}" 
        (label :text "󰸉" :class "singleIcon")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Applications ───────────────────────────────────────────────────╮
(defwidget hotApps []
  (box :class "barBox"
    (box :class "list-first"
      (eventbox :cursor "pointer" :class "barEvent" :width 30 :onclick "kitty -e ~ &"
        (label :text "" :class "singleIcon")
      )
    )
    (box :class "list"
      (eventbox :cursor "pointer" :class "barEvent" :width 30 :onclick "librewolf &"
        (label :text "󰈹" :class "singleIcon")
      )
    )
    (box :class "list"
      (eventbox :cursor "pointer" :class "barEvent" :width 30 :onclick "spotify-launcher &"
        (label :text "" :class "singleIcon")
      )
    )
    (box :class "list-last"
      (eventbox :cursor "pointer" :class "barEvent" :width 30 :onclick "vesktop &"
        (label :text "" :class "singleIcon")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ center widgets ══════════════════════════════════════════════════

;; ╭─ Workspaces ─────────────────────────────────────────────────────╮
(deflisten getWS :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten getWS2 :initial "[]" "bash ~/.config/eww/scripts/get-workspaces2.sh")
(deflisten currWS :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true
      (label :text "${getWS}${currWS}" :visible false)
      (for ws in getWS
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}" ;;:width 40
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

(defwidget workspaces2 []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true :class "workspaceScroll"
      (label :text "${getWS2}${currWS}" :visible false)
      (for ws in getWS2
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}"
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ LEFT WIDGETS ════════════════════════════════════════════════════

;; ╭─ Brightness ─────────────────────────────────────────────────────╮
(defpoll current-brightness :interval "1s" "brightnessctl g")
(defvar brightnessToggle false)
(defwidget barBrightness []
  (box :class "barBox :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update brightnessToggle=true"
      :onhoverlost "eww update brightnessToggle=false"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-brightness == 0 ? '󰃝' :
            current-brightness < 40 ? '󰃞' :
            current-brightness < 100 ? '󰃟' : '󰃠'}"
          )
        )
        (revealer :transition "slideleft" :reveal brightnessToggle :duration "550ms"
          (scale :mix 0 :max 256 :orientation "h" :flipped false :halign "center" 
            :value {current-brightness}
            :onchange "brightnessctl s {}" ) 
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Volume ─────────────────────────────────────────────────────────╮
(defpoll current-volume :interval "1s" 
  "amixer sget Master | grep 'Left: Playback' | awk '{ print $5 }' | tr -d '[%]'")
(defvar volumeToggle false)
(defwidget barVolume []
  (box :class "barBox :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update volumeToggle=true"
      :onhoverlost "eww update volumeToggle=false"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-volume == 0 ? '' :
            current-volume < 20 ? '' :
            current-volume < 51 ? '' : ''}"
          )
        )
        (revealer :transition "slideleft" :reveal volumeToggle :duration "550ms"
          (scale :mix 0 :max 101 :orientation "h" :flipped false :halign "center" :value {current-volume}
            :onchange "amixer sset Master {}%"
          ) 
        )
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Indicators ─────────────────────────────────────────────────────╮
(defpoll numPoll :interval "1" :initial "off" `sed -n 1p /sys/class/leds/input*::numlock/brightness`)
(defpoll capsPoll :interval "1" :initial "off" `sed -n 1p /sys/class/leds/input*::capslock/brightness`)
(defwidget indicators []
  (box :class "barBox" :space-evenly false
    (eventbox 
      (box :class "nums"  
        (label :text "󰎤" :class "${numPoll == 0 ? "off" : "on"}")
      )
    )
    (eventbox
      (box :class "caps"
        (label :text "󰬈" :class "${capsPoll == 0 ? "off" : "on"}")
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Systray ────────────────────────────────────────────────────────╮
(defwidget sissytray []
  (eventbox :cursor "pointer" :class "barBox"
    (systray :class "sissytray" :orientation "h" :space-evenly false :icon-size 25 
      :prepend-new true :spacing 5)
  )
)
;; ╰────────────────────────────────────────────────────────────────────╯

;; ╭─ Battery ────────────────────────────────────────────────────────╮
(defpoll batPercent :interval "60s" `bash ~/.config/eww/scripts/battery.sh`)
(defvar batText "󰁹")
(defvar batClass "critical")
(defwidget battery []
  (box :class "barBox" :width "40"
    (eventbox :tooltip {batPercent}
      (box
        (label :text {batText} :class {batClass})
      )
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Time ───────────────────────────────────────────────────────────╮
(defpoll time :interval "10s" "date +%H:%M")
(defwidget time []
  (box :orientation "h" :space-evenly false :class "time"
    (eventbox :cursor "pointer" :class "barEvent"
      (label :text {time} :class "time-text")
    ) 
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Power menu ─────────────────────────────────────────────────────╮
(defvar PM1 "eww close bar && eww open powerMenu --screen 0 && eww update whichbar='bar' && bash ~/.config/eww/scripts/windows_number.sh")
(defwidget PM1 [] 
  (box :class "barBox" :width 40
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick {PM1} 
      (label :text "⏻" :class "singleIcon")
    )
  )
)
(defvar PM2 "eww close bar2 && eww open powerMenu --screen 1 && eww update whichbar='bar2' && bash ~/.config/eww/scripts/windows_number.sh")
(defwidget PM2 [] 
  (box :class "barBox" :width 40
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick {PM2} 
      (label :text "⏻" :class "singleIcon")
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ Setup ═══════════════════════════════════════════════════════════

;; ╭─ Bar ────────────────────────────────────────────────────────────╮
;; Different widgets based on monitor
(defwidget bar []
  (box :class "default" :orientation "h" :space-evenly true
    (box :orientation "h" :halign "start" :space-evenly false
      (hSpacer)
      (hSpacer)
      (appLauncher)
      (hyprOverview)
      (hotApps)
    )
    (box :orientation "h" :halign "center" :space-evenly false
      (workspaces)
    )
    (box :orientation "h" :halign "end" :space-evenly false
      (barBrightness)
      (barVolume)
      (settingsButton1)
      (indicators)
      (sissytray)
      (battery)
      (time)
      (PM1)
      (hSpacer)
      (hSpacer)
    )
  )
)

(defwidget bar2 []
  (box :class "default" :orientation "h" :space-evenly true
    (box :orientation "h" :halign "start" :space-evenly false
      (hSpacer)
      (hSpacer)
      (appLauncher)
      (hyprOverview)
      (hotApps)
    )
    (box :orientation "h" :halign "center" :space-evenly false
      (workspaces2)
    )
    (box :orientation "h" :halign "end" :space-evenly false :hexpand true
      (barBrightness)
      (barVolume)
      (settingsButton2)
      (indicators)
      (sissytray)
      (battery)
      (time)
      (PM2)
      (hSpacer)
      (hSpacer)
    )
  )
)
;; ╰──────────────────────────────────────────────────────────────────╯

;; ══ WINDOWS ═════════════════════════════════════════════════════════
;; ╭─ Bar monitor 0 ──────────────────────────────────────────────────╮
;; Needs to be (or at least idk how to do it otherwise) split for
;; multi monitor support
(defwindow bar 
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "40px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar))
;; ╰──────────────────────────────────────────────────────────────────╯

;; ╭─ Bar monitor 1 ──────────────────────────────────────────────────╮
(defwindow bar2 
  :monitor 1
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "40px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar2))
;; ╰──────────────────────────────────────────────────────────────────╯
