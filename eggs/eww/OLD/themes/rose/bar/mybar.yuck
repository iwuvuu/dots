;; WIDGETS
(defwidget bar []
  (box :orientation "v" :class "default" :space-evenly false
    (box :orientation "v" :valign "start" :space-evenly false
      (dashboard-btn)
      (launcher-btn)
      (label :class "separ" :text "-----")
      (layout-btn)
      (tags)

    )
    (box :orientation "v" :valign "end" :space-evenly false :vexpand true
      (clock)
      (label :class "separ" :text "-----")
      (song-button)
      (volume)
      (brightness)
      (settings-btn)
      (label :class "separ" :text "-----")
      (battery)
      ;;(sissytray)
      (power-menu-btn)
    )
  )
)

;; COMPONENTS
;; Top widgets
(defwidget dashboard-btn []
  (eventbox :class "dashboard-btn" :cursor "pointer" 
    (button :onrightclick "eww close dashboard-art waifu sysmon sissytray" :onclick "eww open-many dashboard-art waifu sysmon | scripts/waifu.sh" "󰣇")))

(defwidget launcher-btn []
  (eventbox :class "mybar-launch" :cursor "pointer"
  (button :onclick "eww open-many myapplauncher" :onrightclick "rofi -show drun &" "󰀻")))

(defwidget tags []
  (eventbox :valign "center" :cursor "pointer"
  (literal :content groups)))

(defwidget layout-btn []
  (eventbox :class "mybar-layout" :cursor "pointer"
    (literal :content current-layout)))
(defvar toggle-settings-btn false)


;; Bottom widgets
;;(defvar percentik )
(defwidget song-button []
  (eventbox :onmiddleclick "${EWW_CMD} open dashboard-art" :onrightclick "${EWW_CMD} close dashboard-art" :cursor "pointer"
    (box :class "song" :tooltip "${current-pos-sec * 100 / song-length-sec}"
      (circular-progress :class "prog" :value "${current-pos-sec * 100 / song-length-sec}" :thickness 7 :clockwise true
        (button :class "song-btn" :onclick "playerctl play-pause" {play-button})
      )
    )
  )
)

(defvar toggle-volume-btn false)
(defwidget volume []
  (eventbox :cursor "pointer" :onhover "${EWW_CMD} update toggle-volume-btn=true && ${EWW_CMD} update toggle-brightness-btn=false && ${EWW_CMD} update toggle-settings-btn=false" :onhoverlost "${EWW_CMD} update toggle-volume-btn=false"
    (box :class "volume" :orientation "v" :space-evenly false :tooltip {current-volume}
      (literal :content volume-toggle)
      (revealer :transition "slideup" :reveal toggle-volume-btn :duration "550ms"
        (scale :mix 0 :max 101 :orientation "v" :flipped true :halign "center" :value {current-volume}
    :onchange "amixer sset Master {}%" )))))

(defvar toggle-brightness-btn false)
(defwidget brightness []
  (eventbox :cursor "pointer" :onhover "${EWW_CMD} update toggle-brightness-btn=true && ${EWW_CMD} update toggle-volume-btn=false && ${EWW_CMD} update toggle-settings-btn=false" :onhoverlost "${EWW_CMD} update toggle-brightness-btn=false"
    (box :class "brightness" :orientation "v" :space-evenly false :tooltip {current-brightness}
      (literal :content bright-toggle)
      (revealer :transition "slideup" :reveal toggle-brightness-btn :duration "550ms"
        (scale :min 10 :max 100 :orientation "v" :flipped true :halign "center" :value {current-brightness}
    :onchange "xrandr --output eDP-1 --brightness 0.{}" )))))

(defwidget battery []
  (eventbox :cursor "context-menu" (literal :content bat-script)))

(defpoll blue-col :interval "1s" "scripts/blue-col.sh")
(defwidget bluetooth []
  (box :class "bluetooth"     
    (button :onclick "~/.local/bin/bm-run.sh" :class {blue-col} "󰂯")
  ))

(defpoll wifi-col :interval "1s" "scripts/wifi-col.sh")
(defwidget wifi []
  (box :class "wifi"
    (button :onclick "~/.local/bin/nm-run.sh" :class {wifi-col} "󰖩")
  ))

(defwidget numlock []
  (box(literal :content num-script)))

(defwidget capslock []
  (box(literal :content caps-script)))

(defwidget settings-btn []
  (eventbox :cursor "pointer" :onhover "${EWW_CMD} update toggle-settings-btn=true && ${EWW_CMD} update toggle-volume-btn=false && ${EWW_CMD} update toggle-brightness-btn=false" :onhoverlost "${EWW_CMD} update toggle-settings-btn=false"
    (box :orientation "v" :space-evenly false
      (revealer :transition "slidedown" :reveal toggle-settings-btn :duration "550ms"
        (box :orientation "v" :space-evenly false :class "settings-children"
          (bluetooth)
          (wifi)
          (capslock)
          (numlock)))
      (box :class "settings-btn"
      (button :onclick "eww open settings" :onrightclick "eww close settings" "")))))

(defwidget clock []
  (eventbox :onclick "${EWW_CMD} open cal" :onrightclick "${EWW_CMD} close cal" :cursor "pointer"
  (box :class "clock" :orientation "v"
    {hour}
    {min})))

(defwidget sissytray []
  (eventbox :cursor "pointer"
    (systray :class "sissytray" :orientation "v" :space-evenly false :icon-size 25 :prepend-new true)))

(defwidget power-menu-btn []
  (eventbox :class "power-menu-btn" :cursor "pointer"
    (button :onclick "eww open-many closemypowermenu power-shutdown power-logout power-restart powermenu-text && scripts/powermenu-text.sh" (label :text ""))))

;; WINDOWS
(defwindow bar :monitor 0 :stacking "fg" :wm-ignore false
  :reserve (struts :distance "0px" 
    :side "left") ;; qtile -> reserve stacks, awesomewm -> every widget needs reserve
  :geometry (geometry :anchor "left bottom" :x "10px" :y "-10px" :width "50px" :height "1060px")
  (bar))

