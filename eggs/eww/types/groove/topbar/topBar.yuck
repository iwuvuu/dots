;; ── WIDGETS ─────────────────────────────────────────────────────────

;; Time widget
(defvar time-toggle 0) ;Current children in the stack
(defwidget time []
	(box
		(eventbox
			:onhover "${EWW_CMD} update time-toggle=${(time-toggle + 1) % 2}"
			:onhoverlost "${EWW_CMD} update time-toggle=${(time-toggle + 1) % 2}"
			(box :space-evenly false
				(stack
					:transition "slideup"
					:selected {time-toggle}
					(box
						(label
							:class "time-text"
							:text {formattime(EWW_TIME, "%H:%M")}
						)
					)
					(box
						(label
							:class "time-text"
							:text {formattime(EWW_TIME, "%a, %B %d")}
						)
					)
				)
			)
		)
	)
)

;; Battery widgets
(defwidget battery []
  (box 
		:class "uBox" 
    (eventbox 
			:class "barEvent" 
			:cursor "pointer"  
      (box 
        (tooltip
				
					;; Tooltip contents
					
					(box 
						:width 200 
						:height 100 
						:class "popupBox shadow-box" 
						:space-evenly false 
						:orientation "h" 
						(circular-progress  
							:start-at 75 
							:width 70 :thickness 10
							:value "${EWW_BATTERY["BAT0"]["capacity"]}" 
							:class "${EWW_BATTERY["BAT0"]["capacity"] < 40 ?
								"red":EWW_BATTERY["BAT0"]["capacity"] < 80 ?
								"yellow": "green"
								} battery-progress"
							(label 
								:text "${EWW_BATTERY["BAT0"]["capacity"]}%" 
								:class "battery-tooltip")
						)
						(box 
							:orientation "v" 
							:hexpand true 
							:space-evenly false 
							:valign "center"
							(label 
								:text "Status:" 
								:class "battery-tooltip")
							(label 
								:text "${EWW_BATTERY["BAT0"]["status"]}"
								:class "${EWW_BATTERY["BAT0"]["status"] == "Full" ?
									"green":EWW_BATTERY["BAT0"]["status"] == "Charging" ?
									"yellow":"red"
								} battery-status"
							)
						)
					)

					;; Widget contents
				
					(box 
						:space-evenly false
						(label 
							:text "${EWW_BATTERY["BAT0"]["status"] != "Discharging" ?
								"󰂄": EWW_BATTERY["BAT0"]["capacity"] < 10 ?
								"󰂎": EWW_BATTERY["BAT0"]["capacity"] < 20 ?
								"󰁺": EWW_BATTERY["BAT0"]["capacity"] < 30 ?
								"󰁻": EWW_BATTERY["BAT0"]["capacity"] < 40 ?
								"󰁼": EWW_BATTERY["BAT0"]["capacity"] < 50 ?
								"󰁽": EWW_BATTERY["BAT0"]["capacity"] < 60 ?
								"󰁾": EWW_BATTERY["BAT0"]["capacity"] < 70 ?
								"󰁿": EWW_BATTERY["BAT0"]["capacity"] < 80 ?
								"󰂀": EWW_BATTERY["BAT0"]["capacity"] < 90 ?
								"󰂁": EWW_BATTERY["BAT0"]["capacity"] < 98 ?
								"󰂂":"󰁹"
							}"
							:class "${EWW_BATTERY["BAT0"]["capacity"] < 40 ?
								"red": EWW_BATTERY["BAT0"]["capacity"] < 80 ?
								"yellow": "green"
								} icon"
						)
          )
        )
      )
    )
  )
)

(defpoll current-volume :interval "1s" 
  "amixer sget Master | grep 'Mono: Playback' | awk '{print $4}' | tr -d '[%]'")
(defvar volumeToggle false)
(defwidget barVolume []
  (box :class "light-box :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update volumeToggle=true"
      :onhoverlost "eww update volumeToggle=false"
      :onscroll "bash ~/.config/eww/scripts/volume_scroll.sh --{}"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-volume == 0 ? '' :
            current-volume < 20 ? '' :
            current-volume < 51 ? '' : ''}"
          )
        )
        (revealer :transition "slideleft" :reveal volumeToggle :duration "550ms"
          (box :space-evenly false
;            (scale :mix 0 :max 101 :orientation "h" :flipped false :halign "center" :value {current-volume}
;            :onchange "amixer sset Master {}%"
;            )
            (label :text "${current-volume}%" :class "volume-text")
          )
        )
      )
    )
  )
)

(defpoll current-brightness :interval "1s" "brightnessctl g")
(defvar brightnessToggle false)
(defwidget barBrightness []
  (box :class "dark-box :space-evenly false"
    (eventbox :cursor "pointer"
      :onhover "eww update brightnessToggle=true"
      :onhoverlost "eww update brightnessToggle=false"
      :onscroll "bash ~/.config/eww/scripts/brightness_scroll.sh --{}"
      (box :space-evenly false :class "mybar-volume"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-brightness == 0 ? '󰃝' :
            current-brightness < 40 ? '󰃞' :
            current-brightness < 100 ? '󰃟' : '󰃠'}"
          )
        )
        (revealer :transition "slideleft" :reveal brightnessToggle :duration "550ms"
          (box :space-evenly false
;            (scale :mix 0 :max 256 :orientation "h" :flipped false :halign "center" 
;            :value {current-brightness}
;            :onchange "brightnessctl s {}"
;            )
            (label :text "${round((current-brightness * 100) / 255, 0)}%" :class "volume-text")
          )
        )
      )
    )
  )
)

(deflisten songTitle :initial "Nothing" "playerctl --follow metadata --format {{title}}")
(deflisten songArtist :initial "Noone" "playerctl --follow metadata --format {{artist}}")
(defwidget song []
  (box
    (eventbox
      (box :class "light-box" :space-evenly false
        (label :text "${songTitle == '' ? 'Nothing' : ' ‎ ${songTitle}'}" :limit-width 30 :wrap true)
        (label :text "‎ -‎ ")
        (label :text "${songArtist == '' ? 'Noone' : '${songArtist}‎ '}" :limit-width 30:wrap true)
      )
    )
  )
)

;; Powermenu
(defwidget powermenu [monitor] 
  (box :class "uBox" 
    (eventbox 
			:cursor "pointer" 
			:class "barEvent"
      :onclick "bash ~/.config/eww/scripts/powermenu.sh --${monitor}" 
      (label 
				:text "󰐥" 
				:class "red icon"
			)
    )
  )
)

(deflisten getWS :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten getWS2 :initial "[]" "bash ~/.config/eww/scripts/get-workspaces2.sh")
(deflisten currWS :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true
      (label :text "${getWS}${currWS}" :visible false)
      (for ws in getWS
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer" :class "ws-hover"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}" ;;:width 40
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

(defwidget workspaces2 []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspaceScroll"
    (box :space-evenly true :class "workspaceScroll"
      (label :text "${getWS2}${currWS}" :visible false)
      (for ws in getWS2
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer" :class "ws-hover"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}"
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

(defvar hyprOverview "hyprctl dispatch overview:toggle")
(defwidget hyprOverview []
  (box :class "light-box" :width 40
    (eventbox :cursor "pointer" :class "barEvent" :onclick {hyprOverview}
      (label :text "󰹰" :class "singleIcon")
    )
  )
)

(defvar rofi "eww update appToggle='on' && rofi -show drun -theme ~/.config/rofi/themes/Applauncher/Applauncher.rasi &")
(defvar appToggle "off")
(defwidget appLauncher [] 
  (box :class "dark-box" :width 37
    (eventbox :cursor "pointer" :class "barEvent"
      :onclick "${appToggle == "off" ? rofi : "eww update appToggle='off' && killall rofi"}" 
      (label :text "󰣇" :class "singleIcon")
    )
  )
)

(defwidget bluetooth []
  (box
    (eventbox
      (box
        (label :text "󰂯")
      )
    )
  )
)
(defwidget wifi []
  (box
    (eventbox
      (box
        (label :text "")
      )
    )
  )
)

;; ── BAR SETUP ───────────────────────────────────────────────────────
;;                                                           ▲
;;   Asign widgets to each bar from                          █
;;                                                           ▼

(defwidget bar []
	(centerbox
		:space-evenly false
		(box
			(label :text "blablabla")
		)
		(box
			(time)
		)
		(box
			(powermenu
				:monitor 0
			)
		)
	)
)

(defwidget bar2 []
	(centerbox
		:class "bar-bg"
		:space-evenly false
		:orientation "h"
		(box ;left widgets
			:halign "start"
			:space-evenly false
			(appLauncher)
			(hyprOverview)
			(workspaces2)
			(song)
		)
		(box ;center widgets
			:halign "center"
			:space-evenly false
			(time)
		)
		(box ;right widgets
			:halign "end"
			:space-evenly false
			(wifi)
			(bluetooth)
			(barVolume)
			(barBrightness)
			(battery)
			(powermenu
				:monitor 1
			)
		)
	)
)





;; ── WINDOWS ─────────────────────────────────────────────────────────
;;                                                           ▲
;;   Separate bars for each monitor (for correct support)    █
;;                                                           ▼

(defwindow bar 
  :monitor 0
  :geometry (geometry
    ;:x "10px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar))

(defwindow bar2 
  :monitor 1
  :geometry (geometry
    ;:x "10px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :namespace "overlay"
  (bar2))
