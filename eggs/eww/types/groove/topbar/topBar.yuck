;; ── WIDGETS ─────────────────────────────────────────────────────────

;; App launcher
(defvar rofi "eww update appToggle='on' && rofi -show drun -theme ~/.config/rofi/launcher.rasi &")
(defvar appToggle "off")
(defwidget appLauncher [monitor] 
  (box :width 35
    (eventbox :cursor "pointer" :class "hover"
			;:onclick "${appToggle == "off" ? rofi : "eww update appToggle='off' && killall rofi"}"
			:onclick "eww open appLauncher --screen ${monitor}"
      (label :text "󰣇" :class "singleIcon blue")
    )
  )
)

;; Workspace overview
(defvar hyprOverview "hyprctl dispatch overview:toggle")
(defwidget hyprOverview []
  (box :width 35
    (eventbox :cursor "pointer" :class "hover" :onclick {hyprOverview}
      (label :text "󰹰" :class "singleIcon orange")
    )
  )
)


;; Workspaces
(deflisten getWS :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten getWS2 :initial "[]" "bash ~/.config/eww/scripts/get-workspaces2.sh")
(deflisten currWS :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
  (eventbox 
		:onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" 
		:class "workspace"
    (box 
			:space-evenly true
      (label 
				:text "${getWS}${currWS}" 
				:visible false)
      (for ws in getWS
        (eventbox 
					:onclick "hyprctl dispatch workspace ${ws.id}" 
					:cursor "pointer"
					:class "ws-hover"
          (box 
						:class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}"         
						(label 
							:text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" 
							:class "workspace-entry ${ws.id == currWS ? "current" : ""}" 
						)
          )
        )
      )
    )
  )
)

(defwidget workspaces2 []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${currWS}" :class "workspace"
    (box :space-evenly true       
			(label :text "${getWS2}${currWS}" :visible false)
      (for ws in getWS2
        (eventbox :onclick "hyprctl dispatch workspace ${ws.id}" :cursor "pointer" :class "ws-hover"
          (box :class "workspace-entry ${ws.windows > 0 ? "occupied" : "empty"}"
            (label :text "${ws.id == currWS ? "" : ws.windows > 0 ? "" : ""}" :class "workspace-entry ${ws.id == currWS ? "current" : ""}" )
            )
          )
        )
      )
    )
  )

;; Music widget
(deflisten songTitle :initial "Nothing" "playerctl --follow metadata --format {{title}}")
(deflisten songArtist :initial "Noone" "playerctl --follow metadata --format {{artist}}")
(defwidget song []
  (box
    (eventbox
      (box 
				:class "widgetText"
				:space-evenly false
        (label 
					:text "${songTitle == '' ? 'Nothing' : ' ‎ ${songTitle}'}" :limit-width 30 :wrap true)
        (label 
					:text "‎ -‎ ")
        (label 
					:text "${songArtist == '' ? 'Noone' : '${songArtist}‎ '}" :limit-width 30:wrap true)
      )
    )
  )
)



;; Time widget
(defvar time-toggle 0) ;Current children in the stack
(defwidget time []
	(box
		(eventbox
			:onhover "${EWW_CMD} update time-toggle=${(time-toggle + 1) % 2}"
			:onhoverlost "${EWW_CMD} update time-toggle=${(time-toggle + 1) % 2}"
			(box :space-evenly false
				(stack
					:transition "slideup"
					:selected {time-toggle}
					(box
						(label
							:class "widgetText"
							:text {formattime(EWW_TIME, "%H:%M")}
						)
					)
					(box
						(label
							:class "widgetText"
							:text {formattime(EWW_TIME, "%a, %B %d")}
						)
					)
				)
			)
		)
	)
)



;; More settings
(defwidget more []
	(box
		:width 35
		:class "singleIcon"
		(eventbox
			:cursor "pointer"
			:class "hover"
			(box
				(button
					:onclick "kitty &"
					(label :text "")
				)
			)
		)
	)
)

;; Wifi
(deflisten wifi :initial "dead" "~/.config/eww/scripts/wifi-col.sh" )
(defwidget wifi []
  (box
		:width 35
		:class "singleIcon ${wifi == 'connected' ? 'green' : wifi == 'off' ? 'red' : 'whiteDark'}"
    (eventbox
			:onclick "kitty -e nmtui &"
			:class "hover"
			:cursor "pointer"
      (box
        (label :text "")
      )
    )
  )
)

;; Bluetooth
(deflisten bluetooth :initial "no" "~/.config/eww/scripts/blue-col.sh" )
(defwidget bluetooth []
  (box
		:width 35
		:class "singleIcon ${bluetooth == 'yes' ? 'green' : 'red'}"
    (eventbox
			:onclick "blueman-manager &"
			:class "hover"
			:cursor "pointer"
      (box
        (label :text "󰂯")
      )
    )
  )
)


;; Volume
(defpoll current-volume :interval "1s" 
  "amixer sget Master | grep 'Mono: Playback' | awk '{print $4}' | tr -d '[%]'")
(defvar volumeToggle false)
(defwidget barVolume []
  (box :class "iconSpace blue"
		:space-evenly false
    (eventbox :cursor "pointer"
      :onhover "eww update volumeToggle=true"
      :onhoverlost "eww update volumeToggle=false"
      :onscroll "bash ~/.config/eww/scripts/volume_scroll.sh --{}"
      (box :space-evenly false :class "volumeScale"
        (box :width 30
          (label :class "singleIcon" 
            :text "${current-volume == 0 ? '' :
            current-volume < 20 ? '' :
            current-volume < 51 ? '' : ''}"
          )
        )
        (revealer :transition "slideleft" :reveal volumeToggle :duration "550ms"
          (box :space-evenly false
            (scale :mix 0 :max 101 :orientation "h" :flipped false :halign "center" :value {current-volume}
            :onchange "amixer sset Master {}%"
            )
;            (label :text "${current-volume}%" :class "volume-text")
          )
        )
      )
    )
  )
)

;; Brightness
(defpoll current-brightness :interval "1s" "brightnessctl g")
(defvar brightnessToggle false)
(defwidget barBrightness []
  (box :class "yellow iconSpace"
		:space-evenly false
    (eventbox :cursor "pointer"
      :onhover "eww update brightnessToggle=true"
      :onhoverlost "eww update brightnessToggle=false"
      :onscroll "bash ~/.config/eww/scripts/brightness_scroll.sh --{}"
      (box :space-evenly false :class "brightnessScale"
        (box
          (label :class "singleIcon" 
            :text "${current-brightness == 0 ? '󰃝' :
            current-brightness < 40 ? '󰃞' :
            current-brightness < 100 ? '󰃟' : '󰃠'}"
          )
        )
        (revealer :transition "slideleft" :reveal brightnessToggle :duration "550ms"
            (scale :mix 0 :max 256 :orientation "h" :flipped false :halign "center" 
            :value {current-brightness}
            :onchange "brightnessctl s {}"
            )
;          (box :space-evenly false
;            (label :text "${round((current-brightness * 100) / 255, 0)}%" :class "volume-text")
;          )
        )
      )
    )
  )
)


;; Battery widgets

(defwidget battery []
	(box
		:tooltip "${EWW_BATTERY["BAT0"]["capacity"]}%"
		(eventbox
			(box 
				(label
					:text "${EWW_BATTERY["BAT0"]["status"] != "Discharging" ?
						"󰂄": EWW_BATTERY["BAT0"]["capacity"] < 10 ?
						"󰂎": EWW_BATTERY["BAT0"]["capacity"] < 20 ?
						"󰁺": EWW_BATTERY["BAT0"]["capacity"] < 30 ?
						"󰁻": EWW_BATTERY["BAT0"]["capacity"] < 40 ?
						"󰁼": EWW_BATTERY["BAT0"]["capacity"] < 50 ?
						"󰁽": EWW_BATTERY["BAT0"]["capacity"] < 60 ?
						"󰁾": EWW_BATTERY["BAT0"]["capacity"] < 70 ?
						"󰁿": EWW_BATTERY["BAT0"]["capacity"] < 80 ?
						"󰂀": EWW_BATTERY["BAT0"]["capacity"] < 90 ?
						"󰂁": EWW_BATTERY["BAT0"]["capacity"] < 98 ?
						"󰂂":"󰁹"
					}"
					:class "${EWW_BATTERY["BAT0"]["capacity"] < 40 ?
						"red": EWW_BATTERY["BAT0"]["capacity"] < 80 ?
						"yellow": "green"
						} singleIcon iconSpace"
				)
      )
		)
	)
)


;; Powermenu
(defvar pwrState false)
(defvar pwrOpen "bash ~/.config/eww/scripts/powermenu.sh")
(defwidget powermenu [monitor] 
  (box :class "singleIcon"
		:width 35
    (eventbox 
			:cursor "pointer" 
			:class "${pwrState == false ? 'hover' : 'active'}"
			(button
				:onclick "${pwrState == false ? 'bash ~/.config/eww/scripts/powermenu.sh --${monitor} && eww update pwrState=true' : 
					'eww close powermenu && eww update pwrState=false && eww update pwrToggle=false'
				}"
				(label 
					:text "⏻" 
					:class "red"
				)
			)
    )
  )
)



;; ── BAR SETUP ───────────────────────────────────────────────────────
;;                                                           ▲
;;   Asign widgets to each bar from                          █
;;                                                           ▼

(defwidget bar []
	(centerbox
		:class "barBg"
		:space-evenly false
		:orientation "h"
		(box ;left widgets
			:halign "start"
			:space-evenly false
			(hSpacer)
			(appLauncher
				:monitor 0
			)
			(hyprOverview)
			(hSpacer)
			(hSpacer)
			(workspaces)
			(song)
		)
		(box ;center widgets
			:halign "center"
			:space-evenly false
			(time)
		)
		(box ;right widgets
			:halign "end"
			:space-evenly false
			(more)
			(wifi)
			(bluetooth)
			(barVolume)
			(barBrightness)
			(battery)
			(powermenu
				:monitor 0
			)
			(hSpacer)
		)
	)
)
(defwidget shadowBar []
	(box
		:class "barShadow"
	)
)


(defwidget bar2 []
	(centerbox
		:class "barBg"
		:space-evenly false
		:orientation "h"
		(box ;left widgets
			:halign "start"
			:space-evenly false
			(hSpacer)
			(appLauncher
				:monitor 1
			)
			(hyprOverview)
			(hSpacer)
			(hSpacer)
			(workspaces2)
			(song)
		)
		(box ;center widgets
			:halign "center"
			:space-evenly false
			(time)
		)
		(box ;right widgets
			:halign "end"
			:space-evenly false
			(more)
			(wifi)
			(bluetooth)
			(barVolume)
			(barBrightness)
			(battery)
			(powermenu
				:monitor 1
			)
			(hSpacer)
		)
	)
)
(defwidget shadowBar2 []
	(box
		:class "barShadow"
	)
)



;; ── WINDOWS ─────────────────────────────────────────────────────────
;;                                                           ▲
;;   Separate bars for each monitor (for correct support)    █
;;                                                           ▼

(defwindow bar 
  :monitor 0
  :geometry (geometry
    ;:x "10px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "top center")
  :stacking "overlay"
  :exclusive true
  :namespace "overlay"
  (bar)
)

(defwindow bar2 
  :monitor 1
  :geometry (geometry
    ;:x "10px"
    :y "0px"
    :width "100%"
    :height "30px"
    :anchor "top center")
  :stacking "overlay"
  :exclusive true
  :namespace "overlay"
  (bar2)
)
(defwindow shadowBar2 
  :monitor 1
  :geometry (geometry
    ;:x "10px"
    :y "-30px"
    :width "100%"
    :height "38px"
    :anchor "top center")
  :stacking "fg"
  :exclusive false
  :namespace "overlay"
  (shadowBar2)
)
(defwindow shadowBar
  :monitor 0
  :geometry (geometry
    ;:x "10px"
    :y "-30px"
    :width "100%"
    :height "38px"
    :anchor "top center")
  :stacking "fg"
  :exclusive false
  :namespace "overlay"
  (shadowBar)
)
